
progetto_SE_croci.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ffc  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0002deb8  080071a0  080071a0  000081a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08035058  08035058  000371d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08035058  08035058  00036058  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08035060  08035060  000371d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08035060  08035060  00036060  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08035064  08035064  00036064  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08035068  00037000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000019e4  200001d4  0803523c  000371d4  2**2
                  ALLOC
 10 ._user_heap_stack 00001000  20001bb8  0803523c  00037bb8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000371d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00026c0e  00000000  00000000  00037204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030bc  00000000  00000000  0005de12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014f0  00000000  00000000  00060ed0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000015a7  00000000  00000000  000623c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000161bf  00000000  00000000  00063967  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c05a  00000000  00000000  00079b26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091ec0  00000000  00000000  00095b80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b1  00000000  00000000  00127a40  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005684  00000000  00000000  00127af4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loclists 0000e45b  00000000  00000000  0012d178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006d  00000000  00000000  0013b5d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_loc    0000099b  00000000  00000000  0013b640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_ranges 00000040  00000000  00000000  0013bfdb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d4 	.word	0x200001d4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007184 	.word	0x08007184

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001d8 	.word	0x200001d8
 80001dc:	08007184 	.word	0x08007184

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b988 	b.w	8000f80 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	468e      	mov	lr, r1
 8000c90:	4604      	mov	r4, r0
 8000c92:	4688      	mov	r8, r1
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d14a      	bne.n	8000d2e <__udivmoddi4+0xa6>
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	4617      	mov	r7, r2
 8000c9c:	d962      	bls.n	8000d64 <__udivmoddi4+0xdc>
 8000c9e:	fab2 f682 	clz	r6, r2
 8000ca2:	b14e      	cbz	r6, 8000cb8 <__udivmoddi4+0x30>
 8000ca4:	f1c6 0320 	rsb	r3, r6, #32
 8000ca8:	fa01 f806 	lsl.w	r8, r1, r6
 8000cac:	fa20 f303 	lsr.w	r3, r0, r3
 8000cb0:	40b7      	lsls	r7, r6
 8000cb2:	ea43 0808 	orr.w	r8, r3, r8
 8000cb6:	40b4      	lsls	r4, r6
 8000cb8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cbc:	fa1f fc87 	uxth.w	ip, r7
 8000cc0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000cc4:	0c23      	lsrs	r3, r4, #16
 8000cc6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000cca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cce:	fb01 f20c 	mul.w	r2, r1, ip
 8000cd2:	429a      	cmp	r2, r3
 8000cd4:	d909      	bls.n	8000cea <__udivmoddi4+0x62>
 8000cd6:	18fb      	adds	r3, r7, r3
 8000cd8:	f101 30ff 	add.w	r0, r1, #4294967295
 8000cdc:	f080 80ea 	bcs.w	8000eb4 <__udivmoddi4+0x22c>
 8000ce0:	429a      	cmp	r2, r3
 8000ce2:	f240 80e7 	bls.w	8000eb4 <__udivmoddi4+0x22c>
 8000ce6:	3902      	subs	r1, #2
 8000ce8:	443b      	add	r3, r7
 8000cea:	1a9a      	subs	r2, r3, r2
 8000cec:	b2a3      	uxth	r3, r4
 8000cee:	fbb2 f0fe 	udiv	r0, r2, lr
 8000cf2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cf6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cfa:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cfe:	459c      	cmp	ip, r3
 8000d00:	d909      	bls.n	8000d16 <__udivmoddi4+0x8e>
 8000d02:	18fb      	adds	r3, r7, r3
 8000d04:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d08:	f080 80d6 	bcs.w	8000eb8 <__udivmoddi4+0x230>
 8000d0c:	459c      	cmp	ip, r3
 8000d0e:	f240 80d3 	bls.w	8000eb8 <__udivmoddi4+0x230>
 8000d12:	443b      	add	r3, r7
 8000d14:	3802      	subs	r0, #2
 8000d16:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d1a:	eba3 030c 	sub.w	r3, r3, ip
 8000d1e:	2100      	movs	r1, #0
 8000d20:	b11d      	cbz	r5, 8000d2a <__udivmoddi4+0xa2>
 8000d22:	40f3      	lsrs	r3, r6
 8000d24:	2200      	movs	r2, #0
 8000d26:	e9c5 3200 	strd	r3, r2, [r5]
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d905      	bls.n	8000d3e <__udivmoddi4+0xb6>
 8000d32:	b10d      	cbz	r5, 8000d38 <__udivmoddi4+0xb0>
 8000d34:	e9c5 0100 	strd	r0, r1, [r5]
 8000d38:	2100      	movs	r1, #0
 8000d3a:	4608      	mov	r0, r1
 8000d3c:	e7f5      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000d3e:	fab3 f183 	clz	r1, r3
 8000d42:	2900      	cmp	r1, #0
 8000d44:	d146      	bne.n	8000dd4 <__udivmoddi4+0x14c>
 8000d46:	4573      	cmp	r3, lr
 8000d48:	d302      	bcc.n	8000d50 <__udivmoddi4+0xc8>
 8000d4a:	4282      	cmp	r2, r0
 8000d4c:	f200 8105 	bhi.w	8000f5a <__udivmoddi4+0x2d2>
 8000d50:	1a84      	subs	r4, r0, r2
 8000d52:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d56:	2001      	movs	r0, #1
 8000d58:	4690      	mov	r8, r2
 8000d5a:	2d00      	cmp	r5, #0
 8000d5c:	d0e5      	beq.n	8000d2a <__udivmoddi4+0xa2>
 8000d5e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d62:	e7e2      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000d64:	2a00      	cmp	r2, #0
 8000d66:	f000 8090 	beq.w	8000e8a <__udivmoddi4+0x202>
 8000d6a:	fab2 f682 	clz	r6, r2
 8000d6e:	2e00      	cmp	r6, #0
 8000d70:	f040 80a4 	bne.w	8000ebc <__udivmoddi4+0x234>
 8000d74:	1a8a      	subs	r2, r1, r2
 8000d76:	0c03      	lsrs	r3, r0, #16
 8000d78:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d7c:	b280      	uxth	r0, r0
 8000d7e:	b2bc      	uxth	r4, r7
 8000d80:	2101      	movs	r1, #1
 8000d82:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d86:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d8a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d8e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d92:	429a      	cmp	r2, r3
 8000d94:	d907      	bls.n	8000da6 <__udivmoddi4+0x11e>
 8000d96:	18fb      	adds	r3, r7, r3
 8000d98:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d9c:	d202      	bcs.n	8000da4 <__udivmoddi4+0x11c>
 8000d9e:	429a      	cmp	r2, r3
 8000da0:	f200 80e0 	bhi.w	8000f64 <__udivmoddi4+0x2dc>
 8000da4:	46c4      	mov	ip, r8
 8000da6:	1a9b      	subs	r3, r3, r2
 8000da8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000dac:	fb0e 3312 	mls	r3, lr, r2, r3
 8000db0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000db4:	fb02 f404 	mul.w	r4, r2, r4
 8000db8:	429c      	cmp	r4, r3
 8000dba:	d907      	bls.n	8000dcc <__udivmoddi4+0x144>
 8000dbc:	18fb      	adds	r3, r7, r3
 8000dbe:	f102 30ff 	add.w	r0, r2, #4294967295
 8000dc2:	d202      	bcs.n	8000dca <__udivmoddi4+0x142>
 8000dc4:	429c      	cmp	r4, r3
 8000dc6:	f200 80ca 	bhi.w	8000f5e <__udivmoddi4+0x2d6>
 8000dca:	4602      	mov	r2, r0
 8000dcc:	1b1b      	subs	r3, r3, r4
 8000dce:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000dd2:	e7a5      	b.n	8000d20 <__udivmoddi4+0x98>
 8000dd4:	f1c1 0620 	rsb	r6, r1, #32
 8000dd8:	408b      	lsls	r3, r1
 8000dda:	fa22 f706 	lsr.w	r7, r2, r6
 8000dde:	431f      	orrs	r7, r3
 8000de0:	fa0e f401 	lsl.w	r4, lr, r1
 8000de4:	fa20 f306 	lsr.w	r3, r0, r6
 8000de8:	fa2e fe06 	lsr.w	lr, lr, r6
 8000dec:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000df0:	4323      	orrs	r3, r4
 8000df2:	fa00 f801 	lsl.w	r8, r0, r1
 8000df6:	fa1f fc87 	uxth.w	ip, r7
 8000dfa:	fbbe f0f9 	udiv	r0, lr, r9
 8000dfe:	0c1c      	lsrs	r4, r3, #16
 8000e00:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e04:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e08:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e0c:	45a6      	cmp	lr, r4
 8000e0e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e12:	d909      	bls.n	8000e28 <__udivmoddi4+0x1a0>
 8000e14:	193c      	adds	r4, r7, r4
 8000e16:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e1a:	f080 809c 	bcs.w	8000f56 <__udivmoddi4+0x2ce>
 8000e1e:	45a6      	cmp	lr, r4
 8000e20:	f240 8099 	bls.w	8000f56 <__udivmoddi4+0x2ce>
 8000e24:	3802      	subs	r0, #2
 8000e26:	443c      	add	r4, r7
 8000e28:	eba4 040e 	sub.w	r4, r4, lr
 8000e2c:	fa1f fe83 	uxth.w	lr, r3
 8000e30:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e34:	fb09 4413 	mls	r4, r9, r3, r4
 8000e38:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e3c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e40:	45a4      	cmp	ip, r4
 8000e42:	d908      	bls.n	8000e56 <__udivmoddi4+0x1ce>
 8000e44:	193c      	adds	r4, r7, r4
 8000e46:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e4a:	f080 8082 	bcs.w	8000f52 <__udivmoddi4+0x2ca>
 8000e4e:	45a4      	cmp	ip, r4
 8000e50:	d97f      	bls.n	8000f52 <__udivmoddi4+0x2ca>
 8000e52:	3b02      	subs	r3, #2
 8000e54:	443c      	add	r4, r7
 8000e56:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e5a:	eba4 040c 	sub.w	r4, r4, ip
 8000e5e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e62:	4564      	cmp	r4, ip
 8000e64:	4673      	mov	r3, lr
 8000e66:	46e1      	mov	r9, ip
 8000e68:	d362      	bcc.n	8000f30 <__udivmoddi4+0x2a8>
 8000e6a:	d05f      	beq.n	8000f2c <__udivmoddi4+0x2a4>
 8000e6c:	b15d      	cbz	r5, 8000e86 <__udivmoddi4+0x1fe>
 8000e6e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e72:	eb64 0409 	sbc.w	r4, r4, r9
 8000e76:	fa04 f606 	lsl.w	r6, r4, r6
 8000e7a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e7e:	431e      	orrs	r6, r3
 8000e80:	40cc      	lsrs	r4, r1
 8000e82:	e9c5 6400 	strd	r6, r4, [r5]
 8000e86:	2100      	movs	r1, #0
 8000e88:	e74f      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000e8a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e8e:	0c01      	lsrs	r1, r0, #16
 8000e90:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e94:	b280      	uxth	r0, r0
 8000e96:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e9a:	463b      	mov	r3, r7
 8000e9c:	4638      	mov	r0, r7
 8000e9e:	463c      	mov	r4, r7
 8000ea0:	46b8      	mov	r8, r7
 8000ea2:	46be      	mov	lr, r7
 8000ea4:	2620      	movs	r6, #32
 8000ea6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000eaa:	eba2 0208 	sub.w	r2, r2, r8
 8000eae:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000eb2:	e766      	b.n	8000d82 <__udivmoddi4+0xfa>
 8000eb4:	4601      	mov	r1, r0
 8000eb6:	e718      	b.n	8000cea <__udivmoddi4+0x62>
 8000eb8:	4610      	mov	r0, r2
 8000eba:	e72c      	b.n	8000d16 <__udivmoddi4+0x8e>
 8000ebc:	f1c6 0220 	rsb	r2, r6, #32
 8000ec0:	fa2e f302 	lsr.w	r3, lr, r2
 8000ec4:	40b7      	lsls	r7, r6
 8000ec6:	40b1      	lsls	r1, r6
 8000ec8:	fa20 f202 	lsr.w	r2, r0, r2
 8000ecc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ed0:	430a      	orrs	r2, r1
 8000ed2:	fbb3 f8fe 	udiv	r8, r3, lr
 8000ed6:	b2bc      	uxth	r4, r7
 8000ed8:	fb0e 3318 	mls	r3, lr, r8, r3
 8000edc:	0c11      	lsrs	r1, r2, #16
 8000ede:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee2:	fb08 f904 	mul.w	r9, r8, r4
 8000ee6:	40b0      	lsls	r0, r6
 8000ee8:	4589      	cmp	r9, r1
 8000eea:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000eee:	b280      	uxth	r0, r0
 8000ef0:	d93e      	bls.n	8000f70 <__udivmoddi4+0x2e8>
 8000ef2:	1879      	adds	r1, r7, r1
 8000ef4:	f108 3cff 	add.w	ip, r8, #4294967295
 8000ef8:	d201      	bcs.n	8000efe <__udivmoddi4+0x276>
 8000efa:	4589      	cmp	r9, r1
 8000efc:	d81f      	bhi.n	8000f3e <__udivmoddi4+0x2b6>
 8000efe:	eba1 0109 	sub.w	r1, r1, r9
 8000f02:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f06:	fb09 f804 	mul.w	r8, r9, r4
 8000f0a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f0e:	b292      	uxth	r2, r2
 8000f10:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f14:	4542      	cmp	r2, r8
 8000f16:	d229      	bcs.n	8000f6c <__udivmoddi4+0x2e4>
 8000f18:	18ba      	adds	r2, r7, r2
 8000f1a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f1e:	d2c4      	bcs.n	8000eaa <__udivmoddi4+0x222>
 8000f20:	4542      	cmp	r2, r8
 8000f22:	d2c2      	bcs.n	8000eaa <__udivmoddi4+0x222>
 8000f24:	f1a9 0102 	sub.w	r1, r9, #2
 8000f28:	443a      	add	r2, r7
 8000f2a:	e7be      	b.n	8000eaa <__udivmoddi4+0x222>
 8000f2c:	45f0      	cmp	r8, lr
 8000f2e:	d29d      	bcs.n	8000e6c <__udivmoddi4+0x1e4>
 8000f30:	ebbe 0302 	subs.w	r3, lr, r2
 8000f34:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f38:	3801      	subs	r0, #1
 8000f3a:	46e1      	mov	r9, ip
 8000f3c:	e796      	b.n	8000e6c <__udivmoddi4+0x1e4>
 8000f3e:	eba7 0909 	sub.w	r9, r7, r9
 8000f42:	4449      	add	r1, r9
 8000f44:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f48:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f4c:	fb09 f804 	mul.w	r8, r9, r4
 8000f50:	e7db      	b.n	8000f0a <__udivmoddi4+0x282>
 8000f52:	4673      	mov	r3, lr
 8000f54:	e77f      	b.n	8000e56 <__udivmoddi4+0x1ce>
 8000f56:	4650      	mov	r0, sl
 8000f58:	e766      	b.n	8000e28 <__udivmoddi4+0x1a0>
 8000f5a:	4608      	mov	r0, r1
 8000f5c:	e6fd      	b.n	8000d5a <__udivmoddi4+0xd2>
 8000f5e:	443b      	add	r3, r7
 8000f60:	3a02      	subs	r2, #2
 8000f62:	e733      	b.n	8000dcc <__udivmoddi4+0x144>
 8000f64:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f68:	443b      	add	r3, r7
 8000f6a:	e71c      	b.n	8000da6 <__udivmoddi4+0x11e>
 8000f6c:	4649      	mov	r1, r9
 8000f6e:	e79c      	b.n	8000eaa <__udivmoddi4+0x222>
 8000f70:	eba1 0109 	sub.w	r1, r1, r9
 8000f74:	46c4      	mov	ip, r8
 8000f76:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f7a:	fb09 f804 	mul.w	r8, r9, r4
 8000f7e:	e7c4      	b.n	8000f0a <__udivmoddi4+0x282>

08000f80 <__aeabi_idiv0>:
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop

08000f84 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f84:	b084      	sub	sp, #16

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f86:	4b16      	ldr	r3, [pc, #88]	@ (8000fe0 <MX_GPIO_Init+0x5c>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	9200      	str	r2, [sp, #0]
 8000f8c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000f8e:	f041 0104 	orr.w	r1, r1, #4
 8000f92:	6319      	str	r1, [r3, #48]	@ 0x30
 8000f94:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000f96:	f001 0104 	and.w	r1, r1, #4
 8000f9a:	9100      	str	r1, [sp, #0]
 8000f9c:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f9e:	9201      	str	r2, [sp, #4]
 8000fa0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000fa2:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 8000fa6:	6319      	str	r1, [r3, #48]	@ 0x30
 8000fa8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000faa:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 8000fae:	9101      	str	r1, [sp, #4]
 8000fb0:	9901      	ldr	r1, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fb2:	9202      	str	r2, [sp, #8]
 8000fb4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000fb6:	f041 0101 	orr.w	r1, r1, #1
 8000fba:	6319      	str	r1, [r3, #48]	@ 0x30
 8000fbc:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000fbe:	f001 0101 	and.w	r1, r1, #1
 8000fc2:	9102      	str	r1, [sp, #8]
 8000fc4:	9902      	ldr	r1, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fc6:	9203      	str	r2, [sp, #12]
 8000fc8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000fca:	f042 0202 	orr.w	r2, r2, #2
 8000fce:	631a      	str	r2, [r3, #48]	@ 0x30
 8000fd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fd2:	f003 0302 	and.w	r3, r3, #2
 8000fd6:	9303      	str	r3, [sp, #12]
 8000fd8:	9b03      	ldr	r3, [sp, #12]

}
 8000fda:	b004      	add	sp, #16
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop
 8000fe0:	40023800 	.word	0x40023800

08000fe4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000fe4:	b508      	push	{r3, lr}
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000fe6:	480b      	ldr	r0, [pc, #44]	@ (8001014 <MX_I2C1_Init+0x30>)
  hi2c1.Init.ClockSpeed = 100000;
 8000fe8:	4a0b      	ldr	r2, [pc, #44]	@ (8001018 <MX_I2C1_Init+0x34>)
 8000fea:	4b0c      	ldr	r3, [pc, #48]	@ (800101c <MX_I2C1_Init+0x38>)
 8000fec:	e9c0 2300 	strd	r2, r3, [r0]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ff0:	2300      	movs	r3, #0
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ff2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
  hi2c1.Init.OwnAddress1 = 0;
 8000ff6:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ffa:	e9c0 2304 	strd	r2, r3, [r0, #16]
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ffe:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001002:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001004:	f001 fc4a 	bl	800289c <HAL_I2C_Init>
 8001008:	b118      	cbz	r0, 8001012 <MX_I2C1_Init+0x2e>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800100a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 800100e:	f000 bd33 	b.w	8001a78 <Error_Handler>
}
 8001012:	bd08      	pop	{r3, pc}
 8001014:	200001f0 	.word	0x200001f0
 8001018:	40005400 	.word	0x40005400
 800101c:	000186a0 	.word	0x000186a0

08001020 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001020:	b530      	push	{r4, r5, lr}
 8001022:	4604      	mov	r4, r0
 8001024:	b089      	sub	sp, #36	@ 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001026:	2214      	movs	r2, #20
 8001028:	2100      	movs	r1, #0
 800102a:	a803      	add	r0, sp, #12
 800102c:	f003 facd 	bl	80045ca <memset>
  if(i2cHandle->Instance==I2C1)
 8001030:	6822      	ldr	r2, [r4, #0]
 8001032:	4b14      	ldr	r3, [pc, #80]	@ (8001084 <HAL_I2C_MspInit+0x64>)
 8001034:	429a      	cmp	r2, r3
 8001036:	d122      	bne.n	800107e <HAL_I2C_MspInit+0x5e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001038:	4c13      	ldr	r4, [pc, #76]	@ (8001088 <HAL_I2C_MspInit+0x68>)
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800103a:	4814      	ldr	r0, [pc, #80]	@ (800108c <HAL_I2C_MspInit+0x6c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800103c:	2500      	movs	r5, #0
 800103e:	9501      	str	r5, [sp, #4]
 8001040:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8001042:	f043 0302 	orr.w	r3, r3, #2
 8001046:	6323      	str	r3, [r4, #48]	@ 0x30
 8001048:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800104a:	f003 0302 	and.w	r3, r3, #2
 800104e:	9301      	str	r3, [sp, #4]
 8001050:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001052:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8001056:	2312      	movs	r3, #18
 8001058:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800105c:	2103      	movs	r1, #3
 800105e:	2304      	movs	r3, #4
 8001060:	e9cd 1306 	strd	r1, r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001064:	a903      	add	r1, sp, #12
 8001066:	f001 f953 	bl	8002310 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800106a:	9502      	str	r5, [sp, #8]
 800106c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800106e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001072:	6423      	str	r3, [r4, #64]	@ 0x40
 8001074:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001076:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800107a:	9302      	str	r3, [sp, #8]
 800107c:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800107e:	b009      	add	sp, #36	@ 0x24
 8001080:	bd30      	pop	{r4, r5, pc}
 8001082:	bf00      	nop
 8001084:	40005400 	.word	0x40005400
 8001088:	40023800 	.word	0x40023800
 800108c:	40020400 	.word	0x40020400

08001090 <lsm6dsox_read_reg>:
  *
  */
int32_t __weak lsm6dsox_read_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 8001090:	b410      	push	{r4}
  int32_t ret;

  if (ctx == NULL)
 8001092:	b128      	cbz	r0, 80010a0 <lsm6dsox_read_reg+0x10>
  {
    return -1;
  }

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8001094:	6844      	ldr	r4, [r0, #4]
 8001096:	68c0      	ldr	r0, [r0, #12]
 8001098:	46a4      	mov	ip, r4

  return ret;
}
 800109a:	f85d 4b04 	ldr.w	r4, [sp], #4
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800109e:	4760      	bx	ip
}
 80010a0:	f04f 30ff 	mov.w	r0, #4294967295
 80010a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80010a8:	4770      	bx	lr

080010aa <lsm6dsox_write_reg>:
  *
  */
int32_t __weak lsm6dsox_write_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                  uint8_t *data,
                                  uint16_t len)
{
 80010aa:	b410      	push	{r4}
  int32_t ret;

  if (ctx == NULL)
 80010ac:	b128      	cbz	r0, 80010ba <lsm6dsox_write_reg+0x10>
  {
    return -1;
  }

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80010ae:	6804      	ldr	r4, [r0, #0]
 80010b0:	68c0      	ldr	r0, [r0, #12]
 80010b2:	46a4      	mov	ip, r4

  return ret;
}
 80010b4:	f85d 4b04 	ldr.w	r4, [sp], #4
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80010b8:	4760      	bx	ip
}
 80010ba:	f04f 30ff 	mov.w	r0, #4294967295
 80010be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80010c2:	4770      	bx	lr

080010c4 <lsm6dsox_from_fs8_to_mg>:
{
  return ((float_t)lsb) * 0.122f;
}

float_t lsm6dsox_from_fs8_to_mg(int16_t lsb)
{
 80010c4:	ee07 0a90 	vmov	s15, r0
  return ((float_t)lsb) * 0.244f;
}
 80010c8:	ed9f 0a03 	vldr	s0, [pc, #12]	@ 80010d8 <lsm6dsox_from_fs8_to_mg+0x14>
  return ((float_t)lsb) * 0.244f;
 80010cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 80010d0:	ee27 0a80 	vmul.f32	s0, s15, s0
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop
 80010d8:	3e79db23 	.word	0x3e79db23

080010dc <lsm6dsox_from_fs2000_to_mdps>:
{
  return ((float_t)lsb) * 35.0f;
}

float_t lsm6dsox_from_fs2000_to_mdps(int16_t lsb)
{
 80010dc:	ee07 0a90 	vmov	s15, r0
  return ((float_t)lsb) * 70.0f;
}
 80010e0:	ed9f 0a03 	vldr	s0, [pc, #12]	@ 80010f0 <lsm6dsox_from_fs2000_to_mdps+0x14>
  return ((float_t)lsb) * 70.0f;
 80010e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 80010e8:	ee27 0a80 	vmul.f32	s0, s15, s0
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop
 80010f0:	428c0000 	.word	0x428c0000

080010f4 <lsm6dsox_xl_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_xl_full_scale_set(const stmdev_ctx_t *ctx,
                                   lsm6dsox_fs_xl_t val)
{
 80010f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  lsm6dsox_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_CTRL1_XL, (uint8_t *)&reg, 1);
 80010f6:	2301      	movs	r3, #1
{
 80010f8:	460d      	mov	r5, r1
  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_CTRL1_XL, (uint8_t *)&reg, 1);
 80010fa:	aa01      	add	r2, sp, #4
 80010fc:	2110      	movs	r1, #16
{
 80010fe:	4604      	mov	r4, r0
  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_CTRL1_XL, (uint8_t *)&reg, 1);
 8001100:	f7ff ffc6 	bl	8001090 <lsm6dsox_read_reg>

  if (ret == 0)
 8001104:	b958      	cbnz	r0, 800111e <lsm6dsox_xl_full_scale_set+0x2a>
  {
    reg.fs_xl = (uint8_t) val;
 8001106:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800110a:	f365 0383 	bfi	r3, r5, #2, #2
 800110e:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_CTRL1_XL, (uint8_t *)&reg, 1);
 8001112:	aa01      	add	r2, sp, #4
 8001114:	2301      	movs	r3, #1
 8001116:	2110      	movs	r1, #16
 8001118:	4620      	mov	r0, r4
 800111a:	f7ff ffc6 	bl	80010aa <lsm6dsox_write_reg>
  }

  return ret;
}
 800111e:	b003      	add	sp, #12
 8001120:	bd30      	pop	{r4, r5, pc}

08001122 <lsm6dsox_gy_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_gy_full_scale_set(const stmdev_ctx_t *ctx,
                                   lsm6dsox_fs_g_t val)
{
 8001122:	b537      	push	{r0, r1, r2, r4, r5, lr}
  lsm6dsox_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_CTRL2_G, (uint8_t *)&reg, 1);
 8001124:	2301      	movs	r3, #1
{
 8001126:	460d      	mov	r5, r1
  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_CTRL2_G, (uint8_t *)&reg, 1);
 8001128:	aa01      	add	r2, sp, #4
 800112a:	2111      	movs	r1, #17
{
 800112c:	4604      	mov	r4, r0
  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_CTRL2_G, (uint8_t *)&reg, 1);
 800112e:	f7ff ffaf 	bl	8001090 <lsm6dsox_read_reg>

  if (ret == 0)
 8001132:	b958      	cbnz	r0, 800114c <lsm6dsox_gy_full_scale_set+0x2a>
  {
    reg.fs_g = (uint8_t) val;
 8001134:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001138:	f365 0343 	bfi	r3, r5, #1, #3
 800113c:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_CTRL2_G, (uint8_t *)&reg, 1);
 8001140:	aa01      	add	r2, sp, #4
 8001142:	2301      	movs	r3, #1
 8001144:	2111      	movs	r1, #17
 8001146:	4620      	mov	r0, r4
 8001148:	f7ff ffaf 	bl	80010aa <lsm6dsox_write_reg>
  }

  return ret;
}
 800114c:	b003      	add	sp, #12
 800114e:	bd30      	pop	{r4, r5, pc}

08001150 <lsm6dsox_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_block_data_update_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 8001150:	b537      	push	{r0, r1, r2, r4, r5, lr}
  lsm6dsox_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_CTRL3_C, (uint8_t *)&reg, 1);
 8001152:	2301      	movs	r3, #1
{
 8001154:	460d      	mov	r5, r1
  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_CTRL3_C, (uint8_t *)&reg, 1);
 8001156:	aa01      	add	r2, sp, #4
 8001158:	2112      	movs	r1, #18
{
 800115a:	4604      	mov	r4, r0
  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_CTRL3_C, (uint8_t *)&reg, 1);
 800115c:	f7ff ff98 	bl	8001090 <lsm6dsox_read_reg>

  if (ret == 0)
 8001160:	b958      	cbnz	r0, 800117a <lsm6dsox_block_data_update_set+0x2a>
  {
    reg.bdu = val;
 8001162:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001166:	f365 1386 	bfi	r3, r5, #6, #1
 800116a:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_CTRL3_C, (uint8_t *)&reg, 1);
 800116e:	aa01      	add	r2, sp, #4
 8001170:	2301      	movs	r3, #1
 8001172:	2112      	movs	r1, #18
 8001174:	4620      	mov	r0, r4
 8001176:	f7ff ff98 	bl	80010aa <lsm6dsox_write_reg>
  }

  return ret;
}
 800117a:	b003      	add	sp, #12
 800117c:	bd30      	pop	{r4, r5, pc}

0800117e <lsm6dsox_status_reg_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_status_reg_get(const stmdev_ctx_t *ctx,
                                lsm6dsox_status_reg_t *val)
{
 800117e:	b508      	push	{r3, lr}
 8001180:	460a      	mov	r2, r1
  int32_t ret;

  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_STATUS_REG, (uint8_t *) val, 1);
 8001182:	2301      	movs	r3, #1
 8001184:	211e      	movs	r1, #30
 8001186:	f7ff ff83 	bl	8001090 <lsm6dsox_read_reg>

  return ret;
}
 800118a:	bd08      	pop	{r3, pc}

0800118c <lsm6dsox_angular_rate_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_angular_rate_raw_get(const stmdev_ctx_t *ctx, int16_t *val)
{
 800118c:	b513      	push	{r0, r1, r4, lr}
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_OUTX_L_G, buff, 6);
 800118e:	2306      	movs	r3, #6
{
 8001190:	460c      	mov	r4, r1
  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_OUTX_L_G, buff, 6);
 8001192:	466a      	mov	r2, sp
 8001194:	2122      	movs	r1, #34	@ 0x22
 8001196:	f7ff ff7b 	bl	8001090 <lsm6dsox_read_reg>
  val[0] = (int16_t)buff[1];
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800119a:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800119e:	f89d 3000 	ldrb.w	r3, [sp]
 80011a2:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80011a6:	8023      	strh	r3, [r4, #0]
  val[1] = (int16_t)buff[3];
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80011a8:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80011ac:	f89d 3002 	ldrb.w	r3, [sp, #2]
 80011b0:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80011b4:	8063      	strh	r3, [r4, #2]
  val[2] = (int16_t)buff[5];
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80011b6:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80011ba:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80011be:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80011c2:	80a3      	strh	r3, [r4, #4]

  return ret;
}
 80011c4:	b002      	add	sp, #8
 80011c6:	bd10      	pop	{r4, pc}

080011c8 <lsm6dsox_acceleration_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_acceleration_raw_get(const stmdev_ctx_t *ctx, int16_t *val)
{
 80011c8:	b513      	push	{r0, r1, r4, lr}
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_OUTX_L_A, buff, 6);
 80011ca:	2306      	movs	r3, #6
{
 80011cc:	460c      	mov	r4, r1
  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_OUTX_L_A, buff, 6);
 80011ce:	466a      	mov	r2, sp
 80011d0:	2128      	movs	r1, #40	@ 0x28
 80011d2:	f7ff ff5d 	bl	8001090 <lsm6dsox_read_reg>
  val[0] = (int16_t)buff[1];
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80011d6:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80011da:	f89d 3000 	ldrb.w	r3, [sp]
 80011de:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80011e2:	8023      	strh	r3, [r4, #0]
  val[1] = (int16_t)buff[3];
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80011e4:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80011e8:	f89d 3002 	ldrb.w	r3, [sp, #2]
 80011ec:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80011f0:	8063      	strh	r3, [r4, #2]
  val[2] = (int16_t)buff[5];
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80011f2:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80011f6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80011fa:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80011fe:	80a3      	strh	r3, [r4, #4]

  return ret;
}
 8001200:	b002      	add	sp, #8
 8001202:	bd10      	pop	{r4, pc}

08001204 <lsm6dsox_mem_bank_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_mem_bank_set(const stmdev_ctx_t *ctx,
                              lsm6dsox_reg_access_t val)
{
 8001204:	b537      	push	{r0, r1, r2, r4, r5, lr}
  lsm6dsox_func_cfg_access_t reg;
  int32_t ret;

  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_FUNC_CFG_ACCESS,
 8001206:	2301      	movs	r3, #1
{
 8001208:	460d      	mov	r5, r1
  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_FUNC_CFG_ACCESS,
 800120a:	aa01      	add	r2, sp, #4
 800120c:	4619      	mov	r1, r3
{
 800120e:	4604      	mov	r4, r0
  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_FUNC_CFG_ACCESS,
 8001210:	f7ff ff3e 	bl	8001090 <lsm6dsox_read_reg>
                          (uint8_t *)&reg, 1);

  if (ret == 0)
 8001214:	b958      	cbnz	r0, 800122e <lsm6dsox_mem_bank_set+0x2a>
  {
    reg.reg_access = (uint8_t)val;
 8001216:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800121a:	f365 1387 	bfi	r3, r5, #6, #2
 800121e:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_FUNC_CFG_ACCESS,
 8001222:	2301      	movs	r3, #1
 8001224:	aa01      	add	r2, sp, #4
 8001226:	4619      	mov	r1, r3
 8001228:	4620      	mov	r0, r4
 800122a:	f7ff ff3e 	bl	80010aa <lsm6dsox_write_reg>
                             (uint8_t *)&reg, 1);
  }

  return ret;
}
 800122e:	b003      	add	sp, #12
 8001230:	bd30      	pop	{r4, r5, pc}

08001232 <lsm6dsox_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_device_id_get(const stmdev_ctx_t *ctx, uint8_t *buff)
{
 8001232:	b508      	push	{r3, lr}
 8001234:	460a      	mov	r2, r1
  int32_t ret;

  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_WHO_AM_I, buff, 1);
 8001236:	2301      	movs	r3, #1
 8001238:	210f      	movs	r1, #15
 800123a:	f7ff ff29 	bl	8001090 <lsm6dsox_read_reg>

  return ret;
}
 800123e:	bd08      	pop	{r3, pc}

08001240 <lsm6dsox_reset_set>:
  * @param  val      change the values of sw_reset in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_reset_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 8001240:	b537      	push	{r0, r1, r2, r4, r5, lr}
  lsm6dsox_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_CTRL3_C, (uint8_t *)&reg, 1);
 8001242:	2301      	movs	r3, #1
{
 8001244:	460d      	mov	r5, r1
  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_CTRL3_C, (uint8_t *)&reg, 1);
 8001246:	aa01      	add	r2, sp, #4
 8001248:	2112      	movs	r1, #18
{
 800124a:	4604      	mov	r4, r0
  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_CTRL3_C, (uint8_t *)&reg, 1);
 800124c:	f7ff ff20 	bl	8001090 <lsm6dsox_read_reg>

  if (ret == 0)
 8001250:	b958      	cbnz	r0, 800126a <lsm6dsox_reset_set+0x2a>
  {
    reg.sw_reset = val;
 8001252:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001256:	f365 0300 	bfi	r3, r5, #0, #1
 800125a:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_CTRL3_C, (uint8_t *)&reg, 1);
 800125e:	aa01      	add	r2, sp, #4
 8001260:	2301      	movs	r3, #1
 8001262:	2112      	movs	r1, #18
 8001264:	4620      	mov	r0, r4
 8001266:	f7ff ff20 	bl	80010aa <lsm6dsox_write_reg>
  }

  return ret;
}
 800126a:	b003      	add	sp, #12
 800126c:	bd30      	pop	{r4, r5, pc}

0800126e <lsm6dsox_reset_get>:
  * @param  val      change the values of sw_reset in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_reset_get(const stmdev_ctx_t *ctx, uint8_t *val)
{
 800126e:	b513      	push	{r0, r1, r4, lr}
  lsm6dsox_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_CTRL3_C, (uint8_t *)&reg, 1);
 8001270:	2301      	movs	r3, #1
{
 8001272:	460c      	mov	r4, r1
  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_CTRL3_C, (uint8_t *)&reg, 1);
 8001274:	aa01      	add	r2, sp, #4
 8001276:	2112      	movs	r1, #18
 8001278:	f7ff ff0a 	bl	8001090 <lsm6dsox_read_reg>
  *val = reg.sw_reset;
 800127c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001280:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001284:	7023      	strb	r3, [r4, #0]

  return ret;
}
 8001286:	b002      	add	sp, #8
 8001288:	bd10      	pop	{r4, pc}

0800128a <lsm6dsox_i3c_disable_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_i3c_disable_set(const stmdev_ctx_t *ctx,
                                 lsm6dsox_i3c_disable_t val)
{
 800128a:	b537      	push	{r0, r1, r2, r4, r5, lr}
  lsm6dsox_i3c_bus_avb_t i3c_bus_avb;
  lsm6dsox_ctrl9_xl_t ctrl9_xl;
  int32_t ret;

  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 800128c:	2301      	movs	r3, #1
{
 800128e:	460d      	mov	r5, r1
  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 8001290:	aa01      	add	r2, sp, #4
 8001292:	2118      	movs	r1, #24
{
 8001294:	4604      	mov	r4, r0
  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 8001296:	f7ff fefb 	bl	8001090 <lsm6dsox_read_reg>

  if (ret == 0)
 800129a:	bb00      	cbnz	r0, 80012de <lsm6dsox_i3c_disable_set+0x54>
  {
    ctrl9_xl.i3c_disable = ((uint8_t)val & 0x80U) >> 7;
 800129c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80012a0:	09eb      	lsrs	r3, r5, #7
 80012a2:	f363 0241 	bfi	r2, r3, #1, #1
 80012a6:	f88d 2004 	strb.w	r2, [sp, #4]
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 80012aa:	2301      	movs	r3, #1
 80012ac:	aa01      	add	r2, sp, #4
 80012ae:	2118      	movs	r1, #24
 80012b0:	4620      	mov	r0, r4
 80012b2:	f7ff fefa 	bl	80010aa <lsm6dsox_write_reg>
  }

  if (ret == 0)
 80012b6:	b990      	cbnz	r0, 80012de <lsm6dsox_i3c_disable_set+0x54>
  {
    ret = lsm6dsox_read_reg(ctx, LSM6DSOX_I3C_BUS_AVB,
 80012b8:	2301      	movs	r3, #1
 80012ba:	466a      	mov	r2, sp
 80012bc:	2162      	movs	r1, #98	@ 0x62
 80012be:	4620      	mov	r0, r4
 80012c0:	f7ff fee6 	bl	8001090 <lsm6dsox_read_reg>
                            (uint8_t *)&i3c_bus_avb, 1);
  }

  if (ret == 0)
 80012c4:	b958      	cbnz	r0, 80012de <lsm6dsox_i3c_disable_set+0x54>
  {
    i3c_bus_avb.i3c_bus_avb_sel = (uint8_t)val & 0x03U;
 80012c6:	f89d 3000 	ldrb.w	r3, [sp]
 80012ca:	f365 03c4 	bfi	r3, r5, #3, #2
 80012ce:	f88d 3000 	strb.w	r3, [sp]
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_I3C_BUS_AVB,
 80012d2:	466a      	mov	r2, sp
 80012d4:	2301      	movs	r3, #1
 80012d6:	2162      	movs	r1, #98	@ 0x62
 80012d8:	4620      	mov	r0, r4
 80012da:	f7ff fee6 	bl	80010aa <lsm6dsox_write_reg>
                             (uint8_t *)&i3c_bus_avb, 1);
  }

  return ret;
}
 80012de:	b003      	add	sp, #12
 80012e0:	bd30      	pop	{r4, r5, pc}

080012e2 <lsm6dsox_fsm_enable_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_fsm_enable_get(const stmdev_ctx_t *ctx,
                                lsm6dsox_emb_fsm_enable_t *val)
{
 80012e2:	b538      	push	{r3, r4, r5, lr}
 80012e4:	460d      	mov	r5, r1
  int32_t ret;

  ret = lsm6dsox_mem_bank_set(ctx, LSM6DSOX_EMBEDDED_FUNC_BANK);
 80012e6:	2102      	movs	r1, #2
{
 80012e8:	4604      	mov	r4, r0
  ret = lsm6dsox_mem_bank_set(ctx, LSM6DSOX_EMBEDDED_FUNC_BANK);
 80012ea:	f7ff ff8b 	bl	8001204 <lsm6dsox_mem_bank_set>

  if (ret == 0)
 80012ee:	b960      	cbnz	r0, 800130a <lsm6dsox_fsm_enable_get+0x28>
  {
    ret = lsm6dsox_read_reg(ctx, LSM6DSOX_FSM_ENABLE_A, (uint8_t *) val,
 80012f0:	2302      	movs	r3, #2
 80012f2:	462a      	mov	r2, r5
 80012f4:	2146      	movs	r1, #70	@ 0x46
 80012f6:	4620      	mov	r0, r4
 80012f8:	f7ff feca 	bl	8001090 <lsm6dsox_read_reg>
                            2);
  }

  if (ret == 0)
 80012fc:	b928      	cbnz	r0, 800130a <lsm6dsox_fsm_enable_get+0x28>
  {
    ret = lsm6dsox_mem_bank_set(ctx, LSM6DSOX_USER_BANK);
 80012fe:	4601      	mov	r1, r0
 8001300:	4620      	mov	r0, r4
  }

  return ret;
}
 8001302:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    ret = lsm6dsox_mem_bank_set(ctx, LSM6DSOX_USER_BANK);
 8001306:	f7ff bf7d 	b.w	8001204 <lsm6dsox_mem_bank_set>
}
 800130a:	bd38      	pop	{r3, r4, r5, pc}

0800130c <lsm6dsox_fsm_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_fsm_data_rate_get(const stmdev_ctx_t *ctx,
                                   lsm6dsox_fsm_odr_t *val)
{
 800130c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800130e:	460d      	mov	r5, r1
  lsm6dsox_emb_func_odr_cfg_b_t reg;
  int32_t ret;

  ret = lsm6dsox_mem_bank_set(ctx, LSM6DSOX_EMBEDDED_FUNC_BANK);
 8001310:	2102      	movs	r1, #2
{
 8001312:	4604      	mov	r4, r0
  ret = lsm6dsox_mem_bank_set(ctx, LSM6DSOX_EMBEDDED_FUNC_BANK);
 8001314:	f7ff ff76 	bl	8001204 <lsm6dsox_mem_bank_set>

  if (ret == 0)
 8001318:	b9b0      	cbnz	r0, 8001348 <lsm6dsox_fsm_data_rate_get+0x3c>
  {
    ret = lsm6dsox_read_reg(ctx, LSM6DSOX_EMB_FUNC_ODR_CFG_B,
 800131a:	2301      	movs	r3, #1
 800131c:	aa01      	add	r2, sp, #4
 800131e:	215f      	movs	r1, #95	@ 0x5f
 8001320:	4620      	mov	r0, r4
 8001322:	f7ff feb5 	bl	8001090 <lsm6dsox_read_reg>
                            (uint8_t *)&reg, 1);
  }

  if (ret == 0)
 8001326:	b978      	cbnz	r0, 8001348 <lsm6dsox_fsm_data_rate_get+0x3c>
  {
    switch (reg.fsm_odr)
 8001328:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800132c:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8001330:	2b02      	cmp	r3, #2
 8001332:	d004      	beq.n	800133e <lsm6dsox_fsm_data_rate_get+0x32>
 8001334:	2b03      	cmp	r3, #3
 8001336:	d002      	beq.n	800133e <lsm6dsox_fsm_data_rate_get+0x32>
 8001338:	1e5a      	subs	r2, r3, #1
 800133a:	4253      	negs	r3, r2
 800133c:	4153      	adcs	r3, r2
    {
      case LSM6DSOX_ODR_FSM_12Hz5:
        *val = LSM6DSOX_ODR_FSM_12Hz5;
 800133e:	702b      	strb	r3, [r5, #0]
      default:
        *val = LSM6DSOX_ODR_FSM_12Hz5;
        break;
    }

    ret = lsm6dsox_mem_bank_set(ctx, LSM6DSOX_USER_BANK);
 8001340:	2100      	movs	r1, #0
 8001342:	4620      	mov	r0, r4
 8001344:	f7ff ff5e 	bl	8001204 <lsm6dsox_mem_bank_set>
  }

  return ret;
}
 8001348:	b003      	add	sp, #12
 800134a:	bd30      	pop	{r4, r5, pc}

0800134c <lsm6dsox_mlc_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_mlc_data_rate_get(const stmdev_ctx_t *ctx,
                                   lsm6dsox_mlc_odr_t *val)
{
 800134c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800134e:	460d      	mov	r5, r1
  lsm6dsox_emb_func_odr_cfg_c_t reg;
  int32_t ret;

  ret = lsm6dsox_mem_bank_set(ctx, LSM6DSOX_EMBEDDED_FUNC_BANK);
 8001350:	2102      	movs	r1, #2
{
 8001352:	4604      	mov	r4, r0
  ret = lsm6dsox_mem_bank_set(ctx, LSM6DSOX_EMBEDDED_FUNC_BANK);
 8001354:	f7ff ff56 	bl	8001204 <lsm6dsox_mem_bank_set>

  if (ret == 0)
 8001358:	b9b0      	cbnz	r0, 8001388 <lsm6dsox_mlc_data_rate_get+0x3c>
  {
    ret = lsm6dsox_read_reg(ctx, LSM6DSOX_EMB_FUNC_ODR_CFG_C,
 800135a:	2301      	movs	r3, #1
 800135c:	aa01      	add	r2, sp, #4
 800135e:	2160      	movs	r1, #96	@ 0x60
 8001360:	4620      	mov	r0, r4
 8001362:	f7ff fe95 	bl	8001090 <lsm6dsox_read_reg>
                            (uint8_t *)&reg, 1);
  }

  if (ret == 0)
 8001366:	b978      	cbnz	r0, 8001388 <lsm6dsox_mlc_data_rate_get+0x3c>
  {
    switch (reg.mlc_odr)
 8001368:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800136c:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8001370:	2b02      	cmp	r3, #2
 8001372:	d004      	beq.n	800137e <lsm6dsox_mlc_data_rate_get+0x32>
 8001374:	2b03      	cmp	r3, #3
 8001376:	d002      	beq.n	800137e <lsm6dsox_mlc_data_rate_get+0x32>
 8001378:	1e5a      	subs	r2, r3, #1
 800137a:	4253      	negs	r3, r2
 800137c:	4153      	adcs	r3, r2
    {
      case LSM6DSOX_ODR_PRGS_12Hz5:
        *val = LSM6DSOX_ODR_PRGS_12Hz5;
 800137e:	702b      	strb	r3, [r5, #0]
      default:
        *val = LSM6DSOX_ODR_PRGS_12Hz5;
        break;
    }

    ret = lsm6dsox_mem_bank_set(ctx, LSM6DSOX_USER_BANK);
 8001380:	2100      	movs	r1, #0
 8001382:	4620      	mov	r0, r4
 8001384:	f7ff ff3e 	bl	8001204 <lsm6dsox_mem_bank_set>
  }

  return ret;
}
 8001388:	b003      	add	sp, #12
 800138a:	bd30      	pop	{r4, r5, pc}

0800138c <lsm6dsox_embedded_sens_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_embedded_sens_get(const stmdev_ctx_t *ctx,
                                   lsm6dsox_emb_sens_t *emb_sens)
{
 800138c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800138e:	460d      	mov	r5, r1
  lsm6dsox_emb_func_en_a_t emb_func_en_a;
  lsm6dsox_emb_func_en_b_t emb_func_en_b;
  int32_t ret;

  ret = lsm6dsox_mem_bank_set(ctx, LSM6DSOX_EMBEDDED_FUNC_BANK);
 8001390:	2102      	movs	r1, #2
{
 8001392:	4604      	mov	r4, r0
  ret = lsm6dsox_mem_bank_set(ctx, LSM6DSOX_EMBEDDED_FUNC_BANK);
 8001394:	f7ff ff36 	bl	8001204 <lsm6dsox_mem_bank_set>

  if (ret == 0)
 8001398:	bb80      	cbnz	r0, 80013fc <lsm6dsox_embedded_sens_get+0x70>
  {
    ret = lsm6dsox_read_reg(ctx, LSM6DSOX_EMB_FUNC_EN_A,
 800139a:	2301      	movs	r3, #1
 800139c:	466a      	mov	r2, sp
 800139e:	2104      	movs	r1, #4
 80013a0:	4620      	mov	r0, r4
 80013a2:	f7ff fe75 	bl	8001090 <lsm6dsox_read_reg>
                            (uint8_t *)&emb_func_en_a, 1);
  }

  if (ret == 0)
 80013a6:	bb48      	cbnz	r0, 80013fc <lsm6dsox_embedded_sens_get+0x70>
  {
    ret = lsm6dsox_read_reg(ctx, LSM6DSOX_EMB_FUNC_EN_B,
 80013a8:	2301      	movs	r3, #1
 80013aa:	aa01      	add	r2, sp, #4
 80013ac:	2105      	movs	r1, #5
 80013ae:	4620      	mov	r0, r4
 80013b0:	f7ff fe6e 	bl	8001090 <lsm6dsox_read_reg>
                            (uint8_t *)&emb_func_en_b, 1);
    emb_sens->mlc = emb_func_en_b.mlc_en;
    emb_sens->fsm = emb_func_en_b.fsm_en;
    emb_sens->tilt = emb_func_en_a.tilt_en;
 80013b4:	f89d 2000 	ldrb.w	r2, [sp]
 80013b8:	f3c2 1100 	ubfx	r1, r2, #4, #1
    emb_sens->step = emb_func_en_a.pedo_en;
    emb_sens->sig_mot = emb_func_en_a.sign_motion_en;
 80013bc:	f3c2 1340 	ubfx	r3, r2, #5, #1
 80013c0:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    emb_sens->step = emb_func_en_a.pedo_en;
 80013c4:	f3c2 02c0 	ubfx	r2, r2, #3, #1
    emb_sens->sig_mot = emb_func_en_a.sign_motion_en;
 80013c8:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
    emb_sens->mlc = emb_func_en_b.mlc_en;
 80013cc:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80013d0:	f3c2 1100 	ubfx	r1, r2, #4, #1
    emb_sens->sig_mot = emb_func_en_a.sign_motion_en;
 80013d4:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
    emb_sens->fsm = emb_func_en_b.fsm_en;
 80013d8:	f3c2 0100 	ubfx	r1, r2, #0, #1
    emb_sens->sig_mot = emb_func_en_a.sign_motion_en;
 80013dc:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
    emb_sens->fifo_compr = emb_func_en_b.fifo_compr_en;
 80013e0:	f3c2 02c0 	ubfx	r2, r2, #3, #1
    emb_sens->sig_mot = emb_func_en_a.sign_motion_en;
 80013e4:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 80013e8:	782a      	ldrb	r2, [r5, #0]
 80013ea:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 80013ee:	4313      	orrs	r3, r2
 80013f0:	702b      	strb	r3, [r5, #0]
  }

  if (ret == 0)
 80013f2:	b918      	cbnz	r0, 80013fc <lsm6dsox_embedded_sens_get+0x70>
  {
    ret = lsm6dsox_mem_bank_set(ctx, LSM6DSOX_USER_BANK);
 80013f4:	4601      	mov	r1, r0
 80013f6:	4620      	mov	r0, r4
 80013f8:	f7ff ff04 	bl	8001204 <lsm6dsox_mem_bank_set>
  }

  return ret;
}
 80013fc:	b003      	add	sp, #12
 80013fe:	bd30      	pop	{r4, r5, pc}

08001400 <lsm6dsox_xl_data_rate_set>:
{
 8001400:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8001402:	460d      	mov	r5, r1
  ret =  lsm6dsox_fsm_enable_get(ctx, &fsm_enable);
 8001404:	a903      	add	r1, sp, #12
{
 8001406:	4604      	mov	r4, r0
  ret =  lsm6dsox_fsm_enable_get(ctx, &fsm_enable);
 8001408:	f7ff ff6b 	bl	80012e2 <lsm6dsox_fsm_enable_get>
  if (ret == 0)
 800140c:	2800      	cmp	r0, #0
 800140e:	f040 808a 	bne.w	8001526 <lsm6dsox_xl_data_rate_set+0x126>
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8001412:	f89d 200c 	ldrb.w	r2, [sp, #12]
         fsm_enable.fsm_enable_a.fsm2_en  |
 8001416:	f3c2 0140 	ubfx	r1, r2, #1, #1
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800141a:	f3c2 0300 	ubfx	r3, r2, #0, #1
 800141e:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_a.fsm3_en  |
 8001420:	f3c2 0180 	ubfx	r1, r2, #2, #1
         fsm_enable.fsm_enable_a.fsm2_en  |
 8001424:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_a.fsm4_en  |
 8001426:	f3c2 01c0 	ubfx	r1, r2, #3, #1
         fsm_enable.fsm_enable_a.fsm3_en  |
 800142a:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_a.fsm5_en  |
 800142c:	f3c2 1100 	ubfx	r1, r2, #4, #1
         fsm_enable.fsm_enable_a.fsm4_en  |
 8001430:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_a.fsm6_en  |
 8001432:	f3c2 1140 	ubfx	r1, r2, #5, #1
         fsm_enable.fsm_enable_a.fsm5_en  |
 8001436:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_a.fsm7_en  |
 8001438:	f3c2 1180 	ubfx	r1, r2, #6, #1
         fsm_enable.fsm_enable_a.fsm6_en  |
 800143c:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_a.fsm7_en  |
 800143e:	ea43 13d2 	orr.w	r3, r3, r2, lsr #7
         fsm_enable.fsm_enable_b.fsm9_en  |
 8001442:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8001446:	f3c2 0100 	ubfx	r1, r2, #0, #1
         fsm_enable.fsm_enable_a.fsm8_en  |
 800144a:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm10_en |
 800144c:	f3c2 0140 	ubfx	r1, r2, #1, #1
         fsm_enable.fsm_enable_b.fsm9_en  |
 8001450:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm11_en |
 8001452:	f3c2 0180 	ubfx	r1, r2, #2, #1
         fsm_enable.fsm_enable_b.fsm10_en |
 8001456:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm12_en |
 8001458:	f3c2 01c0 	ubfx	r1, r2, #3, #1
         fsm_enable.fsm_enable_b.fsm11_en |
 800145c:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm13_en |
 800145e:	f3c2 1100 	ubfx	r1, r2, #4, #1
         fsm_enable.fsm_enable_b.fsm12_en |
 8001462:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm14_en |
 8001464:	f3c2 1140 	ubfx	r1, r2, #5, #1
         fsm_enable.fsm_enable_b.fsm13_en |
 8001468:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm15_en |
 800146a:	f3c2 1180 	ubfx	r1, r2, #6, #1
         fsm_enable.fsm_enable_b.fsm14_en |
 800146e:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm15_en |
 8001470:	ea43 13d2 	orr.w	r3, r3, r2, lsr #7
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8001474:	07da      	lsls	r2, r3, #31
 8001476:	d50e      	bpl.n	8001496 <lsm6dsox_xl_data_rate_set+0x96>
      ret =  lsm6dsox_fsm_data_rate_get(ctx, &fsm_odr);
 8001478:	f10d 010a 	add.w	r1, sp, #10
 800147c:	4620      	mov	r0, r4
 800147e:	f7ff ff45 	bl	800130c <lsm6dsox_fsm_data_rate_get>
      if (ret == 0)
 8001482:	2800      	cmp	r0, #0
 8001484:	d14f      	bne.n	8001526 <lsm6dsox_xl_data_rate_set+0x126>
        switch (fsm_odr)
 8001486:	f89d 300a 	ldrb.w	r3, [sp, #10]
 800148a:	2b03      	cmp	r3, #3
 800148c:	d803      	bhi.n	8001496 <lsm6dsox_xl_data_rate_set+0x96>
 800148e:	e8df f003 	tbb	[pc, r3]
 8001492:	241f      	.short	0x241f
 8001494:	2e29      	.short	0x2e29
{
 8001496:	462e      	mov	r6, r5
  emb_sens.mlc = PROPERTY_DISABLE;
 8001498:	f89d 3004 	ldrb.w	r3, [sp, #4]
    lsm6dsox_embedded_sens_get(ctx, &emb_sens);
 800149c:	a901      	add	r1, sp, #4
  emb_sens.mlc = PROPERTY_DISABLE;
 800149e:	f023 0308 	bic.w	r3, r3, #8
    lsm6dsox_embedded_sens_get(ctx, &emb_sens);
 80014a2:	4620      	mov	r0, r4
  emb_sens.mlc = PROPERTY_DISABLE;
 80014a4:	f88d 3004 	strb.w	r3, [sp, #4]
    lsm6dsox_embedded_sens_get(ctx, &emb_sens);
 80014a8:	f7ff ff70 	bl	800138c <lsm6dsox_embedded_sens_get>
    if (emb_sens.mlc == PROPERTY_ENABLE)
 80014ac:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80014b0:	071b      	lsls	r3, r3, #28
 80014b2:	d525      	bpl.n	8001500 <lsm6dsox_xl_data_rate_set+0x100>
      ret =  lsm6dsox_mlc_data_rate_get(ctx, &mlc_odr);
 80014b4:	f10d 010b 	add.w	r1, sp, #11
 80014b8:	4620      	mov	r0, r4
 80014ba:	f7ff ff47 	bl	800134c <lsm6dsox_mlc_data_rate_get>
      if (ret == 0)
 80014be:	bb90      	cbnz	r0, 8001526 <lsm6dsox_xl_data_rate_set+0x126>
        switch (mlc_odr)
 80014c0:	f89d 300b 	ldrb.w	r3, [sp, #11]
 80014c4:	2b03      	cmp	r3, #3
 80014c6:	d81a      	bhi.n	80014fe <lsm6dsox_xl_data_rate_set+0xfe>
 80014c8:	e8df f003 	tbb	[pc, r3]
 80014cc:	37332f16 	.word	0x37332f16
            if (val == LSM6DSOX_XL_ODR_OFF)
 80014d0:	2d01      	cmp	r5, #1
 80014d2:	462e      	mov	r6, r5
 80014d4:	bf38      	it	cc
 80014d6:	2601      	movcc	r6, #1
 80014d8:	e7de      	b.n	8001498 <lsm6dsox_xl_data_rate_set+0x98>
            if (val == LSM6DSOX_XL_ODR_OFF)
 80014da:	2d02      	cmp	r5, #2
 80014dc:	462e      	mov	r6, r5
 80014de:	bf38      	it	cc
 80014e0:	2602      	movcc	r6, #2
 80014e2:	e7d9      	b.n	8001498 <lsm6dsox_xl_data_rate_set+0x98>
            if (val == LSM6DSOX_XL_ODR_OFF)
 80014e4:	2d03      	cmp	r5, #3
 80014e6:	462e      	mov	r6, r5
 80014e8:	bf38      	it	cc
 80014ea:	2603      	movcc	r6, #3
 80014ec:	e7d4      	b.n	8001498 <lsm6dsox_xl_data_rate_set+0x98>
            if (val == LSM6DSOX_XL_ODR_OFF)
 80014ee:	2d04      	cmp	r5, #4
 80014f0:	462e      	mov	r6, r5
 80014f2:	bf38      	it	cc
 80014f4:	2604      	movcc	r6, #4
 80014f6:	e7cf      	b.n	8001498 <lsm6dsox_xl_data_rate_set+0x98>
            if (val == LSM6DSOX_XL_ODR_OFF)
 80014f8:	2d01      	cmp	r5, #1
 80014fa:	bf38      	it	cc
 80014fc:	2501      	movcc	r5, #1
        switch (mlc_odr)
 80014fe:	462e      	mov	r6, r5
    ret = lsm6dsox_read_reg(ctx, LSM6DSOX_CTRL1_XL, (uint8_t *)&reg, 1);
 8001500:	2301      	movs	r3, #1
 8001502:	aa02      	add	r2, sp, #8
 8001504:	2110      	movs	r1, #16
 8001506:	4620      	mov	r0, r4
 8001508:	f7ff fdc2 	bl	8001090 <lsm6dsox_read_reg>
  if (ret == 0)
 800150c:	b958      	cbnz	r0, 8001526 <lsm6dsox_xl_data_rate_set+0x126>
    reg.odr_xl = (uint8_t) odr_xl;
 800150e:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8001512:	f366 1307 	bfi	r3, r6, #4, #4
 8001516:	f88d 3008 	strb.w	r3, [sp, #8]
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_CTRL1_XL, (uint8_t *)&reg, 1);
 800151a:	aa02      	add	r2, sp, #8
 800151c:	2301      	movs	r3, #1
 800151e:	2110      	movs	r1, #16
 8001520:	4620      	mov	r0, r4
 8001522:	f7ff fdc2 	bl	80010aa <lsm6dsox_write_reg>
}
 8001526:	b004      	add	sp, #16
 8001528:	bd70      	pop	{r4, r5, r6, pc}
            if (val == LSM6DSOX_XL_ODR_OFF)
 800152a:	2d02      	cmp	r5, #2
 800152c:	bf38      	it	cc
 800152e:	2502      	movcc	r5, #2
 8001530:	e7e5      	b.n	80014fe <lsm6dsox_xl_data_rate_set+0xfe>
            if (val == LSM6DSOX_XL_ODR_OFF)
 8001532:	2d03      	cmp	r5, #3
 8001534:	bf38      	it	cc
 8001536:	2503      	movcc	r5, #3
 8001538:	e7e1      	b.n	80014fe <lsm6dsox_xl_data_rate_set+0xfe>
            if (val == LSM6DSOX_XL_ODR_OFF)
 800153a:	2d04      	cmp	r5, #4
 800153c:	bf38      	it	cc
 800153e:	2504      	movcc	r5, #4
 8001540:	e7dd      	b.n	80014fe <lsm6dsox_xl_data_rate_set+0xfe>

08001542 <lsm6dsox_gy_data_rate_set>:
{
 8001542:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8001544:	460d      	mov	r5, r1
  ret =  lsm6dsox_fsm_enable_get(ctx, &fsm_enable);
 8001546:	a903      	add	r1, sp, #12
{
 8001548:	4604      	mov	r4, r0
  ret =  lsm6dsox_fsm_enable_get(ctx, &fsm_enable);
 800154a:	f7ff feca 	bl	80012e2 <lsm6dsox_fsm_enable_get>
  if (ret == 0)
 800154e:	2800      	cmp	r0, #0
 8001550:	f040 809a 	bne.w	8001688 <lsm6dsox_gy_data_rate_set+0x146>
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8001554:	f89d 200c 	ldrb.w	r2, [sp, #12]
         fsm_enable.fsm_enable_a.fsm2_en  |
 8001558:	f3c2 0140 	ubfx	r1, r2, #1, #1
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800155c:	f3c2 0300 	ubfx	r3, r2, #0, #1
 8001560:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_a.fsm3_en  |
 8001562:	f3c2 0180 	ubfx	r1, r2, #2, #1
         fsm_enable.fsm_enable_a.fsm2_en  |
 8001566:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_a.fsm4_en  |
 8001568:	f3c2 01c0 	ubfx	r1, r2, #3, #1
         fsm_enable.fsm_enable_a.fsm3_en  |
 800156c:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_a.fsm5_en  |
 800156e:	f3c2 1100 	ubfx	r1, r2, #4, #1
         fsm_enable.fsm_enable_a.fsm4_en  |
 8001572:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_a.fsm6_en  |
 8001574:	f3c2 1140 	ubfx	r1, r2, #5, #1
         fsm_enable.fsm_enable_a.fsm5_en  |
 8001578:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_a.fsm7_en  |
 800157a:	f3c2 1180 	ubfx	r1, r2, #6, #1
         fsm_enable.fsm_enable_a.fsm6_en  |
 800157e:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_a.fsm7_en  |
 8001580:	ea43 13d2 	orr.w	r3, r3, r2, lsr #7
         fsm_enable.fsm_enable_b.fsm9_en  |
 8001584:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8001588:	f3c2 0100 	ubfx	r1, r2, #0, #1
         fsm_enable.fsm_enable_a.fsm8_en  |
 800158c:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm10_en |
 800158e:	f3c2 0140 	ubfx	r1, r2, #1, #1
         fsm_enable.fsm_enable_b.fsm9_en  |
 8001592:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm11_en |
 8001594:	f3c2 0180 	ubfx	r1, r2, #2, #1
         fsm_enable.fsm_enable_b.fsm10_en |
 8001598:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm12_en |
 800159a:	f3c2 01c0 	ubfx	r1, r2, #3, #1
         fsm_enable.fsm_enable_b.fsm11_en |
 800159e:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm13_en |
 80015a0:	f3c2 1100 	ubfx	r1, r2, #4, #1
         fsm_enable.fsm_enable_b.fsm12_en |
 80015a4:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm14_en |
 80015a6:	f3c2 1140 	ubfx	r1, r2, #5, #1
         fsm_enable.fsm_enable_b.fsm13_en |
 80015aa:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm15_en |
 80015ac:	f3c2 1180 	ubfx	r1, r2, #6, #1
         fsm_enable.fsm_enable_b.fsm14_en |
 80015b0:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm15_en |
 80015b2:	ea43 13d2 	orr.w	r3, r3, r2, lsr #7
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80015b6:	07da      	lsls	r2, r3, #31
 80015b8:	d50e      	bpl.n	80015d8 <lsm6dsox_gy_data_rate_set+0x96>
      ret =  lsm6dsox_fsm_data_rate_get(ctx, &fsm_odr);
 80015ba:	f10d 010a 	add.w	r1, sp, #10
 80015be:	4620      	mov	r0, r4
 80015c0:	f7ff fea4 	bl	800130c <lsm6dsox_fsm_data_rate_get>
      if (ret == 0)
 80015c4:	2800      	cmp	r0, #0
 80015c6:	d15f      	bne.n	8001688 <lsm6dsox_gy_data_rate_set+0x146>
        switch (fsm_odr)
 80015c8:	f89d 300a 	ldrb.w	r3, [sp, #10]
 80015cc:	2b03      	cmp	r3, #3
 80015ce:	d803      	bhi.n	80015d8 <lsm6dsox_gy_data_rate_set+0x96>
 80015d0:	e8df f003 	tbb	[pc, r3]
 80015d4:	2f2a2520 	.word	0x2f2a2520
{
 80015d8:	462e      	mov	r6, r5
  emb_sens.mlc = PROPERTY_DISABLE;
 80015da:	f89d 3004 	ldrb.w	r3, [sp, #4]
    ret =  lsm6dsox_embedded_sens_get(ctx, &emb_sens);
 80015de:	a901      	add	r1, sp, #4
  emb_sens.mlc = PROPERTY_DISABLE;
 80015e0:	f023 0308 	bic.w	r3, r3, #8
    ret =  lsm6dsox_embedded_sens_get(ctx, &emb_sens);
 80015e4:	4620      	mov	r0, r4
  emb_sens.mlc = PROPERTY_DISABLE;
 80015e6:	f88d 3004 	strb.w	r3, [sp, #4]
    ret =  lsm6dsox_embedded_sens_get(ctx, &emb_sens);
 80015ea:	f7ff fecf 	bl	800138c <lsm6dsox_embedded_sens_get>
    if (emb_sens.mlc == PROPERTY_ENABLE)
 80015ee:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80015f2:	071b      	lsls	r3, r3, #28
 80015f4:	d546      	bpl.n	8001684 <lsm6dsox_gy_data_rate_set+0x142>
      ret =  lsm6dsox_mlc_data_rate_get(ctx, &mlc_odr);
 80015f6:	f10d 010b 	add.w	r1, sp, #11
 80015fa:	4620      	mov	r0, r4
 80015fc:	f7ff fea6 	bl	800134c <lsm6dsox_mlc_data_rate_get>
      if (ret == 0)
 8001600:	2800      	cmp	r0, #0
 8001602:	d141      	bne.n	8001688 <lsm6dsox_gy_data_rate_set+0x146>
        switch (mlc_odr)
 8001604:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8001608:	2b03      	cmp	r3, #3
 800160a:	d81a      	bhi.n	8001642 <lsm6dsox_gy_data_rate_set+0x100>
 800160c:	e8df f003 	tbb	[pc, r3]
 8001610:	36322e16 	.word	0x36322e16
            if (val == LSM6DSOX_GY_ODR_OFF)
 8001614:	2d01      	cmp	r5, #1
 8001616:	462e      	mov	r6, r5
 8001618:	bf38      	it	cc
 800161a:	2601      	movcc	r6, #1
 800161c:	e7dd      	b.n	80015da <lsm6dsox_gy_data_rate_set+0x98>
            if (val == LSM6DSOX_GY_ODR_OFF)
 800161e:	2d02      	cmp	r5, #2
 8001620:	462e      	mov	r6, r5
 8001622:	bf38      	it	cc
 8001624:	2602      	movcc	r6, #2
 8001626:	e7d8      	b.n	80015da <lsm6dsox_gy_data_rate_set+0x98>
            if (val == LSM6DSOX_GY_ODR_OFF)
 8001628:	2d03      	cmp	r5, #3
 800162a:	462e      	mov	r6, r5
 800162c:	bf38      	it	cc
 800162e:	2603      	movcc	r6, #3
 8001630:	e7d3      	b.n	80015da <lsm6dsox_gy_data_rate_set+0x98>
            if (val == LSM6DSOX_GY_ODR_OFF)
 8001632:	2d04      	cmp	r5, #4
 8001634:	462e      	mov	r6, r5
 8001636:	bf38      	it	cc
 8001638:	2604      	movcc	r6, #4
 800163a:	e7ce      	b.n	80015da <lsm6dsox_gy_data_rate_set+0x98>
            if (val == LSM6DSOX_GY_ODR_OFF)
 800163c:	2d01      	cmp	r5, #1
 800163e:	bf38      	it	cc
 8001640:	2501      	movcc	r5, #1
        switch (mlc_odr)
 8001642:	462e      	mov	r6, r5
    ret = lsm6dsox_read_reg(ctx, LSM6DSOX_CTRL2_G, (uint8_t *)&reg, 1);
 8001644:	2301      	movs	r3, #1
 8001646:	aa02      	add	r2, sp, #8
 8001648:	2111      	movs	r1, #17
 800164a:	4620      	mov	r0, r4
 800164c:	f7ff fd20 	bl	8001090 <lsm6dsox_read_reg>
  if (ret == 0)
 8001650:	b9d0      	cbnz	r0, 8001688 <lsm6dsox_gy_data_rate_set+0x146>
    reg.odr_g = (uint8_t) odr_gy;
 8001652:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8001656:	f366 1307 	bfi	r3, r6, #4, #4
 800165a:	f88d 3008 	strb.w	r3, [sp, #8]
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_CTRL2_G, (uint8_t *)&reg, 1);
 800165e:	aa02      	add	r2, sp, #8
 8001660:	2301      	movs	r3, #1
 8001662:	2111      	movs	r1, #17
 8001664:	4620      	mov	r0, r4
 8001666:	f7ff fd20 	bl	80010aa <lsm6dsox_write_reg>
  return ret;
 800166a:	e00d      	b.n	8001688 <lsm6dsox_gy_data_rate_set+0x146>
            if (val == LSM6DSOX_GY_ODR_OFF)
 800166c:	2d02      	cmp	r5, #2
 800166e:	bf38      	it	cc
 8001670:	2502      	movcc	r5, #2
 8001672:	e7e6      	b.n	8001642 <lsm6dsox_gy_data_rate_set+0x100>
            if (val == LSM6DSOX_GY_ODR_OFF)
 8001674:	2d03      	cmp	r5, #3
 8001676:	bf38      	it	cc
 8001678:	2503      	movcc	r5, #3
 800167a:	e7e2      	b.n	8001642 <lsm6dsox_gy_data_rate_set+0x100>
            if (val == LSM6DSOX_GY_ODR_OFF)
 800167c:	2d04      	cmp	r5, #4
 800167e:	bf38      	it	cc
 8001680:	2504      	movcc	r5, #4
 8001682:	e7de      	b.n	8001642 <lsm6dsox_gy_data_rate_set+0x100>
  if (ret == 0)
 8001684:	2800      	cmp	r0, #0
 8001686:	d0dd      	beq.n	8001644 <lsm6dsox_gy_data_rate_set+0x102>
}
 8001688:	b004      	add	sp, #16
 800168a:	bd70      	pop	{r4, r5, r6, pc}

0800168c <platform_read>:
                              (uint8_t*)bufp, len, 1000) == HAL_OK) ? 0 : 1;
}

static int32_t platform_read(void *handle, uint8_t reg,
                             uint8_t *bufp, uint16_t len)
{
 800168c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return (HAL_I2C_Mem_Read((I2C_HandleTypeDef*)handle,
 800168e:	f44f 747a 	mov.w	r4, #1000	@ 0x3e8
 8001692:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8001696:	9200      	str	r2, [sp, #0]
 8001698:	2301      	movs	r3, #1
 800169a:	460a      	mov	r2, r1
 800169c:	21d6      	movs	r1, #214	@ 0xd6
 800169e:	f001 fa35 	bl	8002b0c <HAL_I2C_Mem_Read>
                             LSM6DSOX_I2C_ADDR8, reg,
                             I2C_MEMADD_SIZE_8BIT,
                             bufp, len, 1000) == HAL_OK) ? 0 : 1;
}
 80016a2:	3800      	subs	r0, #0
 80016a4:	bf18      	it	ne
 80016a6:	2001      	movne	r0, #1
 80016a8:	b004      	add	sp, #16
 80016aa:	bd10      	pop	{r4, pc}

080016ac <platform_write>:
{
 80016ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return (HAL_I2C_Mem_Write((I2C_HandleTypeDef*)handle,
 80016ae:	f44f 747a 	mov.w	r4, #1000	@ 0x3e8
 80016b2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80016b6:	9200      	str	r2, [sp, #0]
 80016b8:	2301      	movs	r3, #1
 80016ba:	460a      	mov	r2, r1
 80016bc:	21d6      	movs	r1, #214	@ 0xd6
 80016be:	f001 f995 	bl	80029ec <HAL_I2C_Mem_Write>
}
 80016c2:	3800      	subs	r0, #0
 80016c4:	bf18      	it	ne
 80016c6:	2001      	movne	r0, #1
 80016c8:	b004      	add	sp, #16
 80016ca:	bd10      	pop	{r4, pc}

080016cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016cc:	b510      	push	{r4, lr}
 80016ce:	b094      	sub	sp, #80	@ 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016d0:	2214      	movs	r2, #20
 80016d2:	2100      	movs	r1, #0
 80016d4:	a809      	add	r0, sp, #36	@ 0x24
 80016d6:	f002 ff78 	bl	80045ca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016da:	2214      	movs	r2, #20
 80016dc:	2100      	movs	r1, #0
 80016de:	a803      	add	r0, sp, #12
 80016e0:	f002 ff73 	bl	80045ca <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80016e4:	4b1f      	ldr	r3, [pc, #124]	@ (8001764 <SystemClock_Config+0x98>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	9201      	str	r2, [sp, #4]
 80016ea:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80016ec:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 80016f0:	6419      	str	r1, [r3, #64]	@ 0x40
 80016f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80016f4:	491c      	ldr	r1, [pc, #112]	@ (8001768 <SystemClock_Config+0x9c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80016f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016fa:	9301      	str	r3, [sp, #4]
 80016fc:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80016fe:	9202      	str	r2, [sp, #8]
 8001700:	680b      	ldr	r3, [r1, #0]
 8001702:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001706:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800170a:	600b      	str	r3, [r1, #0]
 800170c:	680b      	ldr	r3, [r1, #0]
 800170e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001712:	9302      	str	r3, [sp, #8]
 8001714:	9b02      	ldr	r3, [sp, #8]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001716:	2101      	movs	r1, #1
 8001718:	2310      	movs	r3, #16
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 16;
  RCC_OscInitStruct.PLL.PLLN = 336;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800171a:	f44f 70a8 	mov.w	r0, #336	@ 0x150
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800171e:	e9cd 130b 	strd	r1, r3, [sp, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001722:	9310      	str	r3, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001724:	2304      	movs	r3, #4
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001726:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001728:	e9cd 0311 	strd	r0, r3, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800172c:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800172e:	e9cd 420e 	strd	r4, r2, [sp, #56]	@ 0x38
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001732:	9408      	str	r4, [sp, #32]
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001734:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001736:	f001 faf9 	bl	8002d2c <HAL_RCC_OscConfig>
 800173a:	b108      	cbz	r0, 8001740 <SystemClock_Config+0x74>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800173c:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800173e:	e7fe      	b.n	800173e <SystemClock_Config+0x72>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001740:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001742:	e9cd 3403 	strd	r3, r4, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001746:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800174a:	e9cd 3006 	strd	r3, r0, [sp, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800174e:	9005      	str	r0, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001750:	4621      	mov	r1, r4
 8001752:	a803      	add	r0, sp, #12
 8001754:	f001 fcc6 	bl	80030e4 <HAL_RCC_ClockConfig>
 8001758:	b108      	cbz	r0, 800175e <SystemClock_Config+0x92>
 800175a:	b672      	cpsid	i
  while (1)
 800175c:	e7fe      	b.n	800175c <SystemClock_Config+0x90>
}
 800175e:	b014      	add	sp, #80	@ 0x50
 8001760:	bd10      	pop	{r4, pc}
 8001762:	bf00      	nop
 8001764:	40023800 	.word	0x40023800
 8001768:	40007000 	.word	0x40007000
 800176c:	00000000 	.word	0x00000000

08001770 <main>:
{
 8001770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001774:	ed2d 8b02 	vpush	{d8}
  dev_ctx.write_reg = platform_write;
 8001778:	4cad      	ldr	r4, [pc, #692]	@ (8001a30 <main+0x2c0>)
{
 800177a:	f6ad 1dbc 	subw	sp, sp, #2492	@ 0x9bc
  HAL_Init();
 800177e:	f000 fcd1 	bl	8002124 <HAL_Init>
  SystemClock_Config();
 8001782:	f7ff ffa3 	bl	80016cc <SystemClock_Config>
  MX_GPIO_Init();
 8001786:	f7ff fbfd 	bl	8000f84 <MX_GPIO_Init>
  MX_I2C1_Init();
 800178a:	f7ff fc2b 	bl	8000fe4 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 800178e:	f000 fc21 	bl	8001fd4 <MX_USART2_UART_Init>
  dev_ctx.write_reg = platform_write;
 8001792:	4ba8      	ldr	r3, [pc, #672]	@ (8001a34 <main+0x2c4>)
 8001794:	6023      	str	r3, [r4, #0]
  dev_ctx.read_reg  = platform_read;
 8001796:	4ba8      	ldr	r3, [pc, #672]	@ (8001a38 <main+0x2c8>)
 8001798:	6063      	str	r3, [r4, #4]
static void platform_delay(uint32_t ms) { HAL_Delay(ms); }
 800179a:	2064      	movs	r0, #100	@ 0x64
  dev_ctx.handle    = &hi2c1;
 800179c:	4ba7      	ldr	r3, [pc, #668]	@ (8001a3c <main+0x2cc>)
 800179e:	60e3      	str	r3, [r4, #12]
static void platform_delay(uint32_t ms) { HAL_Delay(ms); }
 80017a0:	f000 fcec 	bl	800217c <HAL_Delay>
  uint8_t who_am_i = 0;
 80017a4:	2300      	movs	r3, #0
  int32_t status = lsm6dsox_device_id_get(&dev_ctx, &who_am_i);
 80017a6:	f10d 0116 	add.w	r1, sp, #22
 80017aa:	4620      	mov	r0, r4
  uint8_t who_am_i = 0;
 80017ac:	f88d 3016 	strb.w	r3, [sp, #22]
  int32_t status = lsm6dsox_device_id_get(&dev_ctx, &who_am_i);
 80017b0:	f7ff fd3f 	bl	8001232 <lsm6dsox_device_id_get>
  snprintf(tx_line, sizeof(tx_line), "WHO_AM_I letto: 0x%02X, status: %ld\r\n", who_am_i, status);
 80017b4:	f89d 3016 	ldrb.w	r3, [sp, #22]
 80017b8:	4aa1      	ldr	r2, [pc, #644]	@ (8001a40 <main+0x2d0>)
 80017ba:	9000      	str	r0, [sp, #0]
 80017bc:	2140      	movs	r1, #64	@ 0x40
 80017be:	48a1      	ldr	r0, [pc, #644]	@ (8001a44 <main+0x2d4>)
 80017c0:	f002 fe8a 	bl	80044d8 <sniprintf>
  HAL_UART_Transmit(&huart2, (uint8_t*)tx_line, strlen(tx_line), HAL_MAX_DELAY);
 80017c4:	489f      	ldr	r0, [pc, #636]	@ (8001a44 <main+0x2d4>)
 80017c6:	f7fe fd5b 	bl	8000280 <strlen>
 80017ca:	499e      	ldr	r1, [pc, #632]	@ (8001a44 <main+0x2d4>)
 80017cc:	b282      	uxth	r2, r0
 80017ce:	f04f 33ff 	mov.w	r3, #4294967295
 80017d2:	489d      	ldr	r0, [pc, #628]	@ (8001a48 <main+0x2d8>)
 80017d4:	f001 fe2d 	bl	8003432 <HAL_UART_Transmit>
  lsm6dsox_reset_set(&dev_ctx, PROPERTY_ENABLE);
 80017d8:	2101      	movs	r1, #1
 80017da:	4620      	mov	r0, r4
 80017dc:	f7ff fd30 	bl	8001240 <lsm6dsox_reset_set>
  do { lsm6dsox_reset_get(&dev_ctx, &rst); } while (rst);
 80017e0:	f10d 0117 	add.w	r1, sp, #23
 80017e4:	4620      	mov	r0, r4
 80017e6:	f7ff fd42 	bl	800126e <lsm6dsox_reset_get>
 80017ea:	f89d 3017 	ldrb.w	r3, [sp, #23]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d1f6      	bne.n	80017e0 <main+0x70>
  lsm6dsox_i3c_disable_set(&dev_ctx, LSM6DSOX_I3C_DISABLE);
 80017f2:	2180      	movs	r1, #128	@ 0x80
 80017f4:	488e      	ldr	r0, [pc, #568]	@ (8001a30 <main+0x2c0>)
	float out_rad = in_dps * PI / 180;
 80017f6:	f8df 9278 	ldr.w	r9, [pc, #632]	@ 8001a70 <main+0x300>
  lsm6dsox_i3c_disable_set(&dev_ctx, LSM6DSOX_I3C_DISABLE);
 80017fa:	f7ff fd46 	bl	800128a <lsm6dsox_i3c_disable_set>
  lsm6dsox_block_data_update_set(&dev_ctx, PROPERTY_ENABLE);
 80017fe:	2101      	movs	r1, #1
 8001800:	488b      	ldr	r0, [pc, #556]	@ (8001a30 <main+0x2c0>)
 8001802:	f7ff fca5 	bl	8001150 <lsm6dsox_block_data_update_set>
  lsm6dsox_xl_data_rate_set(&dev_ctx, LSM6DSOX_XL_ODR_52Hz);
 8001806:	2103      	movs	r1, #3
 8001808:	4889      	ldr	r0, [pc, #548]	@ (8001a30 <main+0x2c0>)
 800180a:	f7ff fdf9 	bl	8001400 <lsm6dsox_xl_data_rate_set>
  lsm6dsox_gy_data_rate_set(&dev_ctx, LSM6DSOX_GY_ODR_52Hz);
 800180e:	2103      	movs	r1, #3
 8001810:	4887      	ldr	r0, [pc, #540]	@ (8001a30 <main+0x2c0>)
 8001812:	f7ff fe96 	bl	8001542 <lsm6dsox_gy_data_rate_set>
  lsm6dsox_xl_full_scale_set(&dev_ctx, LSM6DSOX_8g);
 8001816:	2103      	movs	r1, #3
 8001818:	4885      	ldr	r0, [pc, #532]	@ (8001a30 <main+0x2c0>)
 800181a:	f7ff fc6b 	bl	80010f4 <lsm6dsox_xl_full_scale_set>
  lsm6dsox_gy_full_scale_set(&dev_ctx, LSM6DSOX_2000dps);
 800181e:	2106      	movs	r1, #6
 8001820:	4883      	ldr	r0, [pc, #524]	@ (8001a30 <main+0x2c0>)
 8001822:	f7ff fc7e 	bl	8001122 <lsm6dsox_gy_full_scale_set>
  uint32_t t_prev = HAL_GetTick();
 8001826:	f000 fca3 	bl	8002170 <HAL_GetTick>
	float out_rad = in_dps * PI / 180;
 800182a:	f04f 0800 	mov.w	r8, #0
  uint32_t t_prev = HAL_GetTick();
 800182e:	4606      	mov	r6, r0
	  while ((HAL_GetTick() - t_prev) < 20) {}
 8001830:	f000 fc9e 	bl	8002170 <HAL_GetTick>
 8001834:	1b80      	subs	r0, r0, r6
 8001836:	2813      	cmp	r0, #19
 8001838:	d9fa      	bls.n	8001830 <main+0xc0>
	  t_prev = HAL_GetTick();
 800183a:	f000 fc99 	bl	8002170 <HAL_GetTick>
	  lsm6dsox_status_reg_get(&dev_ctx, &status);
 800183e:	a905      	add	r1, sp, #20
	  t_prev = HAL_GetTick();
 8001840:	4606      	mov	r6, r0
	  lsm6dsox_status_reg_get(&dev_ctx, &status);
 8001842:	487b      	ldr	r0, [pc, #492]	@ (8001a30 <main+0x2c0>)
 8001844:	f7ff fc9b 	bl	800117e <lsm6dsox_status_reg_get>
	  if (!(status.xlda && status.gda))
 8001848:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800184c:	f003 0303 	and.w	r3, r3, #3
 8001850:	2b03      	cmp	r3, #3
 8001852:	d1ed      	bne.n	8001830 <main+0xc0>
	  lsm6dsox_acceleration_raw_get(&dev_ctx, acc_raw);
 8001854:	a906      	add	r1, sp, #24
 8001856:	4876      	ldr	r0, [pc, #472]	@ (8001a30 <main+0x2c0>)
 8001858:	f7ff fcb6 	bl	80011c8 <lsm6dsox_acceleration_raw_get>
	  lsm6dsox_angular_rate_raw_get(&dev_ctx, gyr_raw);
 800185c:	4874      	ldr	r0, [pc, #464]	@ (8001a30 <main+0x2c0>)
 800185e:	a908      	add	r1, sp, #32
 8001860:	f7ff fc94 	bl	800118c <lsm6dsox_angular_rate_raw_get>
	  for (int i = 0; i < 3; i++) {
 8001864:	ad0a      	add	r5, sp, #40	@ 0x28
 8001866:	ab0d      	add	r3, sp, #52	@ 0x34
 8001868:	ac08      	add	r4, sp, #32
 800186a:	f04f 0b00 	mov.w	fp, #0
 800186e:	46aa      	mov	sl, r5
 8001870:	461f      	mov	r7, r3
 8001872:	9303      	str	r3, [sp, #12]
		  acc_mg[i]   = lsm6dsox_from_fs8_to_mg(acc_raw[i]);
 8001874:	ab06      	add	r3, sp, #24
 8001876:	f933 001b 	ldrsh.w	r0, [r3, fp, lsl #1]
 800187a:	f7ff fc23 	bl	80010c4 <lsm6dsox_from_fs8_to_mg>
	      gyr_mdps[i] = lsm6dsox_from_fs2000_to_mdps(gyr_raw[i]);
 800187e:	f934 0b02 	ldrsh.w	r0, [r4], #2
		  acc_mg[i]   = lsm6dsox_from_fs8_to_mg(acc_raw[i]);
 8001882:	eca5 0a01 	vstmia	r5!, {s0}
	      gyr_mdps[i] = lsm6dsox_from_fs2000_to_mdps(gyr_raw[i]);
 8001886:	f7ff fc29 	bl	80010dc <lsm6dsox_from_fs2000_to_mdps>
	  for (int i = 0; i < 3; i++) {
 800188a:	f10b 0b01 	add.w	fp, fp, #1
	      gyr_mdps[i] = lsm6dsox_from_fs2000_to_mdps(gyr_raw[i]);
 800188e:	9b03      	ldr	r3, [sp, #12]
	  for (int i = 0; i < 3; i++) {
 8001890:	f1bb 0f03 	cmp.w	fp, #3
	      gyr_mdps[i] = lsm6dsox_from_fs2000_to_mdps(gyr_raw[i]);
 8001894:	eca3 0a01 	vstmia	r3!, {s0}
	  for (int i = 0; i < 3; i++) {
 8001898:	d1eb      	bne.n	8001872 <main+0x102>
	  if (sample_index < 100) {
 800189a:	f8df b1d8 	ldr.w	fp, [pc, #472]	@ 8001a74 <main+0x304>
 800189e:	f89b 4000 	ldrb.w	r4, [fp]
 80018a2:	2c63      	cmp	r4, #99	@ 0x63
 80018a4:	d941      	bls.n	800192a <main+0x1ba>
	       sample_index = 0;  // Reset buffer
 80018a6:	2300      	movs	r3, #0
 80018a8:	4f68      	ldr	r7, [pc, #416]	@ (8001a4c <main+0x2dc>)
 80018aa:	f88b 3000 	strb.w	r3, [fp]
	           for (int j = 0; j < 6; j++) {
 80018ae:	aa16      	add	r2, sp, #88	@ 0x58
 80018b0:	4c67      	ldr	r4, [pc, #412]	@ (8001a50 <main+0x2e0>)
 80018b2:	4868      	ldr	r0, [pc, #416]	@ (8001a54 <main+0x2e4>)
 80018b4:	18d1      	adds	r1, r2, r3
 80018b6:	19dd      	adds	r5, r3, r7
	  for (int i = 0; i < 3; i++) {
 80018b8:	2206      	movs	r2, #6
	        	   normalized_buffer[i][j] = (input_buffer[i][j] - mean[j]) / std[j];
 80018ba:	ecb4 7a01 	vldmia	r4!, {s14}
 80018be:	ecf5 7a01 	vldmia	r5!, {s15}
 80018c2:	ecf0 6a01 	vldmia	r0!, {s13}
 80018c6:	ee77 7ac7 	vsub.f32	s15, s15, s14
	           for (int j = 0; j < 6; j++) {
 80018ca:	3a01      	subs	r2, #1
	        	   normalized_buffer[i][j] = (input_buffer[i][j] - mean[j]) / std[j];
 80018cc:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80018d0:	eca1 7a01 	vstmia	r1!, {s14}
	           for (int j = 0; j < 6; j++) {
 80018d4:	d1f1      	bne.n	80018ba <main+0x14a>
	       for (int i = 0; i < 100; i++) {
 80018d6:	3318      	adds	r3, #24
 80018d8:	f5b3 6f16 	cmp.w	r3, #2400	@ 0x960
 80018dc:	d1e7      	bne.n	80018ae <main+0x13e>
	       const char* class_names[] = {"Downstairs", "Running", "Standing", "Upstairs", "Walking", "Unknown"};
 80018de:	4d5e      	ldr	r5, [pc, #376]	@ (8001a58 <main+0x2e8>)
	       lstm_inference(normalized_buffer);
 80018e0:	a816      	add	r0, sp, #88	@ 0x58
 80018e2:	f000 f903 	bl	8001aec <lstm_inference>
	       const char* class_names[] = {"Downstairs", "Running", "Standing", "Upstairs", "Walking", "Unknown"};
 80018e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018e8:	af10      	add	r7, sp, #64	@ 0x40
 80018ea:	463c      	mov	r4, r7
 80018ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018ee:	e895 0003 	ldmia.w	r5, {r0, r1}
	       if (predicted_class < 5) {
 80018f2:	4b5a      	ldr	r3, [pc, #360]	@ (8001a5c <main+0x2ec>)
	       snprintf(tx_line, sizeof(tx_line),
 80018f4:	4a5a      	ldr	r2, [pc, #360]	@ (8001a60 <main+0x2f0>)
	       if (predicted_class < 5) {
 80018f6:	781b      	ldrb	r3, [r3, #0]
	       snprintf(tx_line, sizeof(tx_line),
 80018f8:	7812      	ldrb	r2, [r2, #0]
	       const char* class_names[] = {"Downstairs", "Running", "Standing", "Upstairs", "Walking", "Unknown"};
 80018fa:	e884 0003 	stmia.w	r4, {r0, r1}
	       if (predicted_class < 5) {
 80018fe:	2b04      	cmp	r3, #4
	    	   current_class_name = class_names[predicted_class];
 8001900:	bf94      	ite	ls
 8001902:	f857 3023 	ldrls.w	r3, [r7, r3, lsl #2]
	           current_class_name = class_names[5];
 8001906:	4b57      	ldrhi	r3, [pc, #348]	@ (8001a64 <main+0x2f4>)
	       snprintf(tx_line, sizeof(tx_line),
 8001908:	9200      	str	r2, [sp, #0]
 800190a:	2140      	movs	r1, #64	@ 0x40
 800190c:	4a56      	ldr	r2, [pc, #344]	@ (8001a68 <main+0x2f8>)
 800190e:	484d      	ldr	r0, [pc, #308]	@ (8001a44 <main+0x2d4>)
 8001910:	f002 fde2 	bl	80044d8 <sniprintf>
	       HAL_UART_Transmit(&huart2, (uint8_t*)tx_line, strlen(tx_line), HAL_MAX_DELAY);
 8001914:	484b      	ldr	r0, [pc, #300]	@ (8001a44 <main+0x2d4>)
 8001916:	f7fe fcb3 	bl	8000280 <strlen>
 800191a:	494a      	ldr	r1, [pc, #296]	@ (8001a44 <main+0x2d4>)
 800191c:	b282      	uxth	r2, r0
 800191e:	f04f 33ff 	mov.w	r3, #4294967295
 8001922:	4849      	ldr	r0, [pc, #292]	@ (8001a48 <main+0x2d8>)
 8001924:	f001 fd85 	bl	8003432 <HAL_UART_Transmit>
		  continue;
 8001928:	e782      	b.n	8001830 <main+0xc0>
		   input_buffer[sample_index][0] = conv_g2ms2(acc_mg[0] / 1000.0f);
 800192a:	ed9f 8a50 	vldr	s16, [pc, #320]	@ 8001a6c <main+0x2fc>
 800192e:	edda 7a00 	vldr	s15, [sl]
 8001932:	4d46      	ldr	r5, [pc, #280]	@ (8001a4c <main+0x2dc>)
	float out_ms2 = in_g * G;
 8001934:	eec7 7a88 	vdiv.f32	s15, s15, s16
		   input_buffer[sample_index][0] = conv_g2ms2(acc_mg[0] / 1000.0f);
 8001938:	2318      	movs	r3, #24
 800193a:	fb03 5504 	mla	r5, r3, r4, r5
		   sample_index++;
 800193e:	3401      	adds	r4, #1
 8001940:	b2e4      	uxtb	r4, r4
	float out_ms2 = in_g * G;
 8001942:	ee17 0a90 	vmov	r0, s15
 8001946:	f7fe fe07 	bl	8000558 <__aeabi_f2d>
 800194a:	a335      	add	r3, pc, #212	@ (adr r3, 8001a20 <main+0x2b0>)
 800194c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001950:	f7fe fe5a 	bl	8000608 <__aeabi_dmul>
 8001954:	f7ff f930 	bl	8000bb8 <__aeabi_d2f>
		   input_buffer[sample_index][1] = conv_g2ms2(acc_mg[1] / 1000.0f);
 8001958:	edda 7a01 	vldr	s15, [sl, #4]
	float out_ms2 = in_g * G;
 800195c:	6028      	str	r0, [r5, #0]
 800195e:	eec7 7a88 	vdiv.f32	s15, s15, s16
 8001962:	ee17 0a90 	vmov	r0, s15
 8001966:	f7fe fdf7 	bl	8000558 <__aeabi_f2d>
 800196a:	a32d      	add	r3, pc, #180	@ (adr r3, 8001a20 <main+0x2b0>)
 800196c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001970:	f7fe fe4a 	bl	8000608 <__aeabi_dmul>
 8001974:	f7ff f920 	bl	8000bb8 <__aeabi_d2f>
		   input_buffer[sample_index][2] = conv_g2ms2(acc_mg[2] / 1000.0f);
 8001978:	edda 7a02 	vldr	s15, [sl, #8]
	float out_ms2 = in_g * G;
 800197c:	6068      	str	r0, [r5, #4]
 800197e:	eec7 7a88 	vdiv.f32	s15, s15, s16
 8001982:	ee17 0a90 	vmov	r0, s15
 8001986:	f7fe fde7 	bl	8000558 <__aeabi_f2d>
 800198a:	a325      	add	r3, pc, #148	@ (adr r3, 8001a20 <main+0x2b0>)
 800198c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001990:	f7fe fe3a 	bl	8000608 <__aeabi_dmul>
 8001994:	f7ff f910 	bl	8000bb8 <__aeabi_d2f>
		   input_buffer[sample_index][3] = conv_dps2rad(gyr_mdps[0] / 1000.0f);
 8001998:	edd7 7a00 	vldr	s15, [r7]
	float out_ms2 = in_g * G;
 800199c:	60a8      	str	r0, [r5, #8]
	float out_rad = in_dps * PI / 180;
 800199e:	eec7 7a88 	vdiv.f32	s15, s15, s16
 80019a2:	ee17 0a90 	vmov	r0, s15
 80019a6:	f7fe fdd7 	bl	8000558 <__aeabi_f2d>
 80019aa:	a31f      	add	r3, pc, #124	@ (adr r3, 8001a28 <main+0x2b8>)
 80019ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019b0:	f7fe fe2a 	bl	8000608 <__aeabi_dmul>
 80019b4:	4642      	mov	r2, r8
 80019b6:	464b      	mov	r3, r9
 80019b8:	f7fe ff50 	bl	800085c <__aeabi_ddiv>
 80019bc:	f7ff f8fc 	bl	8000bb8 <__aeabi_d2f>
		   input_buffer[sample_index][4] = conv_dps2rad(gyr_mdps[1] / 1000.0f);
 80019c0:	edd7 7a01 	vldr	s15, [r7, #4]
	float out_rad = in_dps * PI / 180;
 80019c4:	60e8      	str	r0, [r5, #12]
 80019c6:	eec7 7a88 	vdiv.f32	s15, s15, s16
 80019ca:	ee17 0a90 	vmov	r0, s15
 80019ce:	f7fe fdc3 	bl	8000558 <__aeabi_f2d>
 80019d2:	a315      	add	r3, pc, #84	@ (adr r3, 8001a28 <main+0x2b8>)
 80019d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019d8:	f7fe fe16 	bl	8000608 <__aeabi_dmul>
 80019dc:	4642      	mov	r2, r8
 80019de:	464b      	mov	r3, r9
 80019e0:	f7fe ff3c 	bl	800085c <__aeabi_ddiv>
 80019e4:	f7ff f8e8 	bl	8000bb8 <__aeabi_d2f>
		   input_buffer[sample_index][5] = conv_dps2rad(gyr_mdps[2] / 1000.0f);
 80019e8:	edd7 7a02 	vldr	s15, [r7, #8]
	float out_rad = in_dps * PI / 180;
 80019ec:	6128      	str	r0, [r5, #16]
 80019ee:	eec7 7a88 	vdiv.f32	s15, s15, s16
 80019f2:	ee17 0a90 	vmov	r0, s15
 80019f6:	f7fe fdaf 	bl	8000558 <__aeabi_f2d>
 80019fa:	a30b      	add	r3, pc, #44	@ (adr r3, 8001a28 <main+0x2b8>)
 80019fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a00:	f7fe fe02 	bl	8000608 <__aeabi_dmul>
 8001a04:	4642      	mov	r2, r8
 8001a06:	464b      	mov	r3, r9
 8001a08:	f7fe ff28 	bl	800085c <__aeabi_ddiv>
 8001a0c:	f7ff f8d4 	bl	8000bb8 <__aeabi_d2f>
	   if (sample_index >= 100) {
 8001a10:	2c64      	cmp	r4, #100	@ 0x64
	float out_rad = in_dps * PI / 180;
 8001a12:	6168      	str	r0, [r5, #20]
		   sample_index++;
 8001a14:	f88b 4000 	strb.w	r4, [fp]
	   if (sample_index >= 100) {
 8001a18:	f47f af0a 	bne.w	8001830 <main+0xc0>
 8001a1c:	e743      	b.n	80018a6 <main+0x136>
 8001a1e:	bf00      	nop
 8001a20:	3a92a305 	.word	0x3a92a305
 8001a24:	40239d01 	.word	0x40239d01
 8001a28:	54442d18 	.word	0x54442d18
 8001a2c:	400921fb 	.word	0x400921fb
 8001a30:	20000ba8 	.word	0x20000ba8
 8001a34:	080016ad 	.word	0x080016ad
 8001a38:	0800168d 	.word	0x0800168d
 8001a3c:	200001f0 	.word	0x200001f0
 8001a40:	080071c0 	.word	0x080071c0
 8001a44:	20000bbc 	.word	0x20000bbc
 8001a48:	20001a20 	.word	0x20001a20
 8001a4c:	20000248 	.word	0x20000248
 8001a50:	080073c0 	.word	0x080073c0
 8001a54:	080073a8 	.word	0x080073a8
 8001a58:	080071a0 	.word	0x080071a0
 8001a5c:	20001a19 	.word	0x20001a19
 8001a60:	20001a18 	.word	0x20001a18
 8001a64:	080071b8 	.word	0x080071b8
 8001a68:	080071e6 	.word	0x080071e6
 8001a6c:	447a0000 	.word	0x447a0000
 8001a70:	40668000 	.word	0x40668000
 8001a74:	20000244 	.word	0x20000244

08001a78 <Error_Handler>:
 8001a78:	b672      	cpsid	i
  while (1)
 8001a7a:	e7fe      	b.n	8001a7a <Error_Handler+0x2>

08001a7c <act_sigmoid>:
static float bn1_scale[32];
static float bn1_bias[32];

// Funzione di attivazione sigmoide
void act_sigmoid (float *x, unsigned len)
{
 8001a7c:	b538      	push	{r3, r4, r5, lr}
 8001a7e:	4604      	mov	r4, r0
 8001a80:	ed2d 8b02 	vpush	{d8}
 8001a84:	eb00 0581 	add.w	r5, r0, r1, lsl #2
	for (unsigned i = 0; i < len; ++i) {
		x[i] = 1.0f / (1.0f + expf(-x[i]));
 8001a88:	eeb7 8a00 	vmov.f32	s16, #112	@ 0x3f800000  1.0
	for (unsigned i = 0; i < len; ++i) {
 8001a8c:	42ac      	cmp	r4, r5
 8001a8e:	d102      	bne.n	8001a96 <act_sigmoid+0x1a>
	}
}
 8001a90:	ecbd 8b02 	vpop	{d8}
 8001a94:	bd38      	pop	{r3, r4, r5, pc}
		x[i] = 1.0f / (1.0f + expf(-x[i]));
 8001a96:	ed94 0a00 	vldr	s0, [r4]
 8001a9a:	eeb1 0a40 	vneg.f32	s0, s0
 8001a9e:	f004 feab 	bl	80067f8 <expf>
 8001aa2:	ee30 0a08 	vadd.f32	s0, s0, s16
 8001aa6:	eec8 7a00 	vdiv.f32	s15, s16, s0
 8001aaa:	ece4 7a01 	vstmia	r4!, {s15}
	for (unsigned i = 0; i < len; ++i) {
 8001aae:	e7ed      	b.n	8001a8c <act_sigmoid+0x10>

08001ab0 <act_tanh1>:

// Funzione di attivazione tanh1
void act_tanh1 (float *x, unsigned len)
{
 8001ab0:	b538      	push	{r3, r4, r5, lr}
 8001ab2:	4604      	mov	r4, r0
 8001ab4:	eb00 0581 	add.w	r5, r0, r1, lsl #2
	for (unsigned i = 0; i < len; ++i) {
 8001ab8:	42ac      	cmp	r4, r5
 8001aba:	d100      	bne.n	8001abe <act_tanh1+0xe>
		x[i] = tanhf(x[i]);
	}
}
 8001abc:	bd38      	pop	{r3, r4, r5, pc}
		x[i] = tanhf(x[i]);
 8001abe:	ed94 0a00 	vldr	s0, [r4]
 8001ac2:	f004 feed 	bl	80068a0 <tanhf>
 8001ac6:	eca4 0a01 	vstmia	r4!, {s0}
	for (unsigned i = 0; i < len; ++i) {
 8001aca:	e7f5      	b.n	8001ab8 <act_tanh1+0x8>

08001acc <act_tanh2>:

// Funzione di attivazione tanh2
void act_tanh2 (float const * restrict x, float * restrict y, unsigned len)
{
 8001acc:	b570      	push	{r4, r5, r6, lr}
 8001ace:	4604      	mov	r4, r0
 8001ad0:	460d      	mov	r5, r1
 8001ad2:	eb00 0682 	add.w	r6, r0, r2, lsl #2
	for (unsigned i = 0; i < len; ++i) {
 8001ad6:	42b4      	cmp	r4, r6
 8001ad8:	d100      	bne.n	8001adc <act_tanh2+0x10>
		y[i] = tanhf(x[i]);
	}
}
 8001ada:	bd70      	pop	{r4, r5, r6, pc}
		y[i] = tanhf(x[i]);
 8001adc:	ecb4 0a01 	vldmia	r4!, {s0}
 8001ae0:	f004 fede 	bl	80068a0 <tanhf>
 8001ae4:	eca5 0a01 	vstmia	r5!, {s0}
	for (unsigned i = 0; i < len; ++i) {
 8001ae8:	e7f5      	b.n	8001ad6 <act_tanh2+0xa>
	...

08001aec <lstm_inference>:
}


// FUNZIONE DI INFERENZA
// x[100][6] è il buffer normalizzato passato da main.c (2 secondi di dati a 50 Hz)
void lstm_inference (const float x[100][6]) {
 8001aec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001af0:	ed2d 8b02 	vpush	{d8}
 8001af4:	f8df 8384 	ldr.w	r8, [pc, #900]	@ 8001e7c <lstm_inference+0x390>
 8001af8:	f8df 9384 	ldr.w	r9, [pc, #900]	@ 8001e80 <lstm_inference+0x394>
 8001afc:	4dc5      	ldr	r5, [pc, #788]	@ (8001e14 <lstm_inference+0x328>)
 8001afe:	4bc6      	ldr	r3, [pc, #792]	@ (8001e18 <lstm_inference+0x32c>)
 8001b00:	f8df a380 	ldr.w	sl, [pc, #896]	@ 8001e84 <lstm_inference+0x398>
 8001b04:	4fc5      	ldr	r7, [pc, #788]	@ (8001e1c <lstm_inference+0x330>)
	const float epsilon = 0.001f;

	// Calcolo parametri di BatchNormalization
	for (int i = 0; i < 100; ++i) { // BN0 (dopo LSTM)
		bn0_scale[i] = net_weights.batch_normalization_0_gamma[i] / sqrtf(net_weights.batch_normalization_0_variance[i] + epsilon);
 8001b06:	ed9f 8ac6 	vldr	s16, [pc, #792]	@ 8001e20 <lstm_inference+0x334>
void lstm_inference (const float x[100][6]) {
 8001b0a:	f2ad 6dcc 	subw	sp, sp, #1740	@ 0x6cc
 8001b0e:	4604      	mov	r4, r0
 8001b10:	464e      	mov	r6, r9
 8001b12:	46c3      	mov	fp, r8
		bn0_scale[i] = net_weights.batch_normalization_0_gamma[i] / sqrtf(net_weights.batch_normalization_0_variance[i] + epsilon);
 8001b14:	ecb3 0a01 	vldmia	r3!, {s0}
 8001b18:	ecf5 8a01 	vldmia	r5!, {s17}
 8001b1c:	9301      	str	r3, [sp, #4]
 8001b1e:	ee30 0a08 	vadd.f32	s0, s0, s16
 8001b22:	f004 fe9f 	bl	8006864 <sqrtf>
 8001b26:	ee88 7a80 	vdiv.f32	s14, s17, s0
	for (int i = 0; i < 100; ++i) { // BN0 (dopo LSTM)
 8001b2a:	4abe      	ldr	r2, [pc, #760]	@ (8001e24 <lstm_inference+0x338>)
 8001b2c:	9b01      	ldr	r3, [sp, #4]
 8001b2e:	4295      	cmp	r5, r2
		bn0_bias[i]  = net_weights.batch_normalization_0_beta[i] - net_weights.batch_normalization_0_mean[i] * bn0_scale[i];
 8001b30:	ecfa 7a01 	vldmia	sl!, {s15}
 8001b34:	ecf7 6a01 	vldmia	r7!, {s13}
		bn0_scale[i] = net_weights.batch_normalization_0_gamma[i] / sqrtf(net_weights.batch_normalization_0_variance[i] + epsilon);
 8001b38:	ecab 7a01 	vstmia	fp!, {s14}
		bn0_bias[i]  = net_weights.batch_normalization_0_beta[i] - net_weights.batch_normalization_0_mean[i] * bn0_scale[i];
 8001b3c:	eee7 7a66 	vfms.f32	s15, s14, s13
 8001b40:	ece6 7a01 	vstmia	r6!, {s15}
	for (int i = 0; i < 100; ++i) { // BN0 (dopo LSTM)
 8001b44:	d1e6      	bne.n	8001b14 <lstm_inference+0x28>
 8001b46:	4eb8      	ldr	r6, [pc, #736]	@ (8001e28 <lstm_inference+0x33c>)
 8001b48:	4fb8      	ldr	r7, [pc, #736]	@ (8001e2c <lstm_inference+0x340>)
 8001b4a:	4db9      	ldr	r5, [pc, #740]	@ (8001e30 <lstm_inference+0x344>)
 8001b4c:	49b9      	ldr	r1, [pc, #740]	@ (8001e34 <lstm_inference+0x348>)
 8001b4e:	4bba      	ldr	r3, [pc, #744]	@ (8001e38 <lstm_inference+0x34c>)
 8001b50:	f8df b334 	ldr.w	fp, [pc, #820]	@ 8001e88 <lstm_inference+0x39c>
 8001b54:	46ba      	mov	sl, r7
 8001b56:	4632      	mov	r2, r6
	}
	for (int i = 0; i < 32; ++i) { // BN1 (dopo Dense0)
		bn1_scale[i] = net_weights.batch_normalization_1_gamma[i] / sqrtf(net_weights.batch_normalization_1_variance[i] + epsilon);
 8001b58:	ecb1 0a01 	vldmia	r1!, {s0}
 8001b5c:	ecf5 8a01 	vldmia	r5!, {s17}
 8001b60:	9101      	str	r1, [sp, #4]
 8001b62:	ee30 0a08 	vadd.f32	s0, s0, s16
 8001b66:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001b6a:	f004 fe7b 	bl	8006864 <sqrtf>
 8001b6e:	ee88 7a80 	vdiv.f32	s14, s17, s0
		bn1_bias[i]  = net_weights.batch_normalization_1_beta[i] - net_weights.batch_normalization_1_mean[i] * bn1_scale[i];
 8001b72:	9b03      	ldr	r3, [sp, #12]
	for (int i = 0; i < 32; ++i) { // BN1 (dopo Dense0)
 8001b74:	48b1      	ldr	r0, [pc, #708]	@ (8001e3c <lstm_inference+0x350>)
		bn1_scale[i] = net_weights.batch_normalization_1_gamma[i] / sqrtf(net_weights.batch_normalization_1_variance[i] + epsilon);
 8001b76:	9a02      	ldr	r2, [sp, #8]
	for (int i = 0; i < 32; ++i) { // BN1 (dopo Dense0)
 8001b78:	9901      	ldr	r1, [sp, #4]
 8001b7a:	4285      	cmp	r5, r0
		bn1_bias[i]  = net_weights.batch_normalization_1_beta[i] - net_weights.batch_normalization_1_mean[i] * bn1_scale[i];
 8001b7c:	ecf3 7a01 	vldmia	r3!, {s15}
 8001b80:	ecfb 6a01 	vldmia	fp!, {s13}
		bn1_scale[i] = net_weights.batch_normalization_1_gamma[i] / sqrtf(net_weights.batch_normalization_1_variance[i] + epsilon);
 8001b84:	eca2 7a01 	vstmia	r2!, {s14}
		bn1_bias[i]  = net_weights.batch_normalization_1_beta[i] - net_weights.batch_normalization_1_mean[i] * bn1_scale[i];
 8001b88:	eee7 7a66 	vfms.f32	s15, s14, s13
 8001b8c:	ecea 7a01 	vstmia	sl!, {s15}
	for (int i = 0; i < 32; ++i) { // BN1 (dopo Dense0)
 8001b90:	d1e2      	bne.n	8001b58 <lstm_inference+0x6c>
	}

    // Inizializzazione stati LSTM
	lstm_state_values.one = 1.0f;
 8001b92:	4dab      	ldr	r5, [pc, #684]	@ (8001e40 <lstm_inference+0x354>)
            lstm_activation_buffer[i] += hidden_mul_temp[i] + net_weights.lstm_0_b[i];
        }

        // Applicazione delle funzioni di attivazione ai gate
		act_sigmoid (lstm_activation_buffer +   0, 100);    // I
		act_sigmoid (lstm_activation_buffer + 100, 100);    // F
 8001b94:	f8df a2f4 	ldr.w	sl, [pc, #756]	@ 8001e8c <lstm_inference+0x3a0>
	memset(lstm_state_values.h, 0, sizeof lstm_state_values.h);
 8001b98:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8001b9c:	2100      	movs	r1, #0
 8001b9e:	f105 0018 	add.w	r0, r5, #24
	lstm_state_values.one = 1.0f;
 8001ba2:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 8001ba6:	edc5 8a6a 	vstr	s17, [r5, #424]	@ 0x1a8
	memset(lstm_state_values.h, 0, sizeof lstm_state_values.h);
 8001baa:	f002 fd0e 	bl	80045ca <memset>
	memset(lstm_state_values.c, 0, sizeof lstm_state_values.c);
 8001bae:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8001bb2:	2100      	movs	r1, #0
 8001bb4:	f505 70d6 	add.w	r0, r5, #428	@ 0x1ac
 8001bb8:	f002 fd07 	bl	80045ca <memset>
    arm_mat_init_f32(&mat_lstm0_input_t, 1, 6, lstm_state_values.x);
 8001bbc:	462b      	mov	r3, r5
 8001bbe:	2206      	movs	r2, #6
 8001bc0:	2101      	movs	r1, #1
 8001bc2:	a805      	add	r0, sp, #20
 8001bc4:	f001 fee0 	bl	8003988 <arm_mat_init_f32>
    arm_mat_init_f32(&mat_lstm0_w, 6, 400, (float *)net_weights.lstm_0_w);
 8001bc8:	4b9e      	ldr	r3, [pc, #632]	@ (8001e44 <lstm_inference+0x358>)
 8001bca:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8001bce:	2106      	movs	r1, #6
 8001bd0:	a807      	add	r0, sp, #28
 8001bd2:	f001 fed9 	bl	8003988 <arm_mat_init_f32>
    arm_mat_init_f32(&mat_lstm0_r, 100, 400, (float *)net_weights.lstm_0_r);
 8001bd6:	4b9c      	ldr	r3, [pc, #624]	@ (8001e48 <lstm_inference+0x35c>)
 8001bd8:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8001bdc:	2164      	movs	r1, #100	@ 0x64
 8001bde:	a809      	add	r0, sp, #36	@ 0x24
 8001be0:	f001 fed2 	bl	8003988 <arm_mat_init_f32>
    arm_mat_init_f32(&mat_lstm0_h_t, 1, 100, lstm_state_values.h);
 8001be4:	f105 0318 	add.w	r3, r5, #24
 8001be8:	2264      	movs	r2, #100	@ 0x64
 8001bea:	2101      	movs	r1, #1
 8001bec:	a80b      	add	r0, sp, #44	@ 0x2c
 8001bee:	f001 fecb 	bl	8003988 <arm_mat_init_f32>
    arm_mat_init_f32(&mat_lstm0_activation_out, 1, 400, lstm_activation_buffer);
 8001bf2:	4b96      	ldr	r3, [pc, #600]	@ (8001e4c <lstm_inference+0x360>)
 8001bf4:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8001bf8:	2101      	movs	r1, #1
 8001bfa:	a80d      	add	r0, sp, #52	@ 0x34
 8001bfc:	f001 fec4 	bl	8003988 <arm_mat_init_f32>
    arm_mat_init_f32(&mat_dense0_input, 1, 100, lstm_state_values.h);
 8001c00:	f105 0318 	add.w	r3, r5, #24
 8001c04:	2264      	movs	r2, #100	@ 0x64
 8001c06:	2101      	movs	r1, #1
 8001c08:	a80f      	add	r0, sp, #60	@ 0x3c
 8001c0a:	f001 febd 	bl	8003988 <arm_mat_init_f32>
    arm_mat_init_f32(&mat_dense0_w, 100, 32, (float *)net_weights.dense_0_w);
 8001c0e:	4b90      	ldr	r3, [pc, #576]	@ (8001e50 <lstm_inference+0x364>)
 8001c10:	2220      	movs	r2, #32
 8001c12:	2164      	movs	r1, #100	@ 0x64
 8001c14:	a811      	add	r0, sp, #68	@ 0x44
 8001c16:	f001 feb7 	bl	8003988 <arm_mat_init_f32>
    arm_mat_init_f32(&mat_dense0_output, 1, 32, dense_0_output_buffer);
 8001c1a:	4b8e      	ldr	r3, [pc, #568]	@ (8001e54 <lstm_inference+0x368>)
 8001c1c:	2220      	movs	r2, #32
 8001c1e:	2101      	movs	r1, #1
 8001c20:	a813      	add	r0, sp, #76	@ 0x4c
 8001c22:	f001 feb1 	bl	8003988 <arm_mat_init_f32>
    arm_mat_init_f32(&mat_dense1_input, 1, 32, dense_0_output_buffer);
 8001c26:	4b8b      	ldr	r3, [pc, #556]	@ (8001e54 <lstm_inference+0x368>)
 8001c28:	2220      	movs	r2, #32
 8001c2a:	2101      	movs	r1, #1
 8001c2c:	a815      	add	r0, sp, #84	@ 0x54
 8001c2e:	f001 feab 	bl	8003988 <arm_mat_init_f32>
    arm_mat_init_f32(&mat_dense1_w, 32, 5, (float *)net_weights.dense_1_w);
 8001c32:	4b89      	ldr	r3, [pc, #548]	@ (8001e58 <lstm_inference+0x36c>)
 8001c34:	2205      	movs	r2, #5
 8001c36:	2120      	movs	r1, #32
 8001c38:	a817      	add	r0, sp, #92	@ 0x5c
 8001c3a:	f001 fea5 	bl	8003988 <arm_mat_init_f32>
    arm_mat_init_f32(&mat_dense1_output, 1, 5, final_output_logits);
 8001c3e:	ab1d      	add	r3, sp, #116	@ 0x74
 8001c40:	2205      	movs	r2, #5
 8001c42:	2101      	movs	r1, #1
 8001c44:	a819      	add	r0, sp, #100	@ 0x64
 8001c46:	f001 fe9f 	bl	8003988 <arm_mat_init_f32>
	for (int time = 0; time < 100; ++time) {
 8001c4a:	f504 6b16 	add.w	fp, r4, #2400	@ 0x960
		act_tanh1   (lstm_activation_buffer + 200, 100);    // C
 8001c4e:	f50a 75c8 	add.w	r5, sl, #400	@ 0x190
		memcpy(lstm_state_values.x, x[time], sizeof lstm_state_values.x);
 8001c52:	f8df c1ec 	ldr.w	ip, [pc, #492]	@ 8001e40 <lstm_inference+0x354>
 8001c56:	4623      	mov	r3, r4
 8001c58:	f104 0e18 	add.w	lr, r4, #24
 8001c5c:	6818      	ldr	r0, [r3, #0]
 8001c5e:	6859      	ldr	r1, [r3, #4]
 8001c60:	4662      	mov	r2, ip
 8001c62:	c203      	stmia	r2!, {r0, r1}
 8001c64:	3308      	adds	r3, #8
 8001c66:	4573      	cmp	r3, lr
 8001c68:	4694      	mov	ip, r2
 8001c6a:	d1f7      	bne.n	8001c5c <lstm_inference+0x170>
		arm_mat_mult_f32(&mat_lstm0_input_t, &mat_lstm0_w, &mat_lstm0_activation_out);
 8001c6c:	aa0d      	add	r2, sp, #52	@ 0x34
 8001c6e:	a907      	add	r1, sp, #28
 8001c70:	a805      	add	r0, sp, #20
 8001c72:	f001 fde3 	bl	800383c <arm_mat_mult_f32>
        arm_mat_init_f32(&mat_hidden_mul_temp, 1, 400, hidden_mul_temp);
 8001c76:	ab22      	add	r3, sp, #136	@ 0x88
 8001c78:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8001c7c:	2101      	movs	r1, #1
 8001c7e:	a81b      	add	r0, sp, #108	@ 0x6c
 8001c80:	f001 fe82 	bl	8003988 <arm_mat_init_f32>
        arm_mat_mult_f32(&mat_lstm0_h_t, &mat_lstm0_r, &mat_hidden_mul_temp);
 8001c84:	aa1b      	add	r2, sp, #108	@ 0x6c
 8001c86:	a909      	add	r1, sp, #36	@ 0x24
 8001c88:	a80b      	add	r0, sp, #44	@ 0x2c
 8001c8a:	f001 fdd7 	bl	800383c <arm_mat_mult_f32>
        for (int i = 0; i < 400; ++i) {
 8001c8e:	496f      	ldr	r1, [pc, #444]	@ (8001e4c <lstm_inference+0x360>)
 8001c90:	4872      	ldr	r0, [pc, #456]	@ (8001e5c <lstm_inference+0x370>)
 8001c92:	ab22      	add	r3, sp, #136	@ 0x88
 8001c94:	2200      	movs	r2, #0
            lstm_activation_buffer[i] += hidden_mul_temp[i] + net_weights.lstm_0_b[i];
 8001c96:	ecf3 7a01 	vldmia	r3!, {s15}
 8001c9a:	ecf0 6a01 	vldmia	r0!, {s13}
 8001c9e:	ed91 7a00 	vldr	s14, [r1]
 8001ca2:	ee77 7aa6 	vadd.f32	s15, s15, s13
        for (int i = 0; i < 400; ++i) {
 8001ca6:	3201      	adds	r2, #1
            lstm_activation_buffer[i] += hidden_mul_temp[i] + net_weights.lstm_0_b[i];
 8001ca8:	ee77 7a87 	vadd.f32	s15, s15, s14
        for (int i = 0; i < 400; ++i) {
 8001cac:	f5b2 7fc8 	cmp.w	r2, #400	@ 0x190
            lstm_activation_buffer[i] += hidden_mul_temp[i] + net_weights.lstm_0_b[i];
 8001cb0:	ece1 7a01 	vstmia	r1!, {s15}
        for (int i = 0; i < 400; ++i) {
 8001cb4:	d1ef      	bne.n	8001c96 <lstm_inference+0x1aa>
		act_sigmoid (lstm_activation_buffer +   0, 100);    // I
 8001cb6:	4865      	ldr	r0, [pc, #404]	@ (8001e4c <lstm_inference+0x360>)
 8001cb8:	2164      	movs	r1, #100	@ 0x64
 8001cba:	f7ff fedf 	bl	8001a7c <act_sigmoid>
		act_sigmoid (lstm_activation_buffer + 100, 100);    // F
 8001cbe:	2164      	movs	r1, #100	@ 0x64
 8001cc0:	4650      	mov	r0, sl
 8001cc2:	f7ff fedb 	bl	8001a7c <act_sigmoid>
		act_tanh1   (lstm_activation_buffer + 200, 100);    // C
 8001cc6:	2164      	movs	r1, #100	@ 0x64
 8001cc8:	4628      	mov	r0, r5
 8001cca:	f7ff fef1 	bl	8001ab0 <act_tanh1>
		act_sigmoid (lstm_activation_buffer + 300, 100);    // O
 8001cce:	4864      	ldr	r0, [pc, #400]	@ (8001e60 <lstm_inference+0x374>)
 8001cd0:	2164      	movs	r1, #100	@ 0x64
 8001cd2:	f7ff fed3 	bl	8001a7c <act_sigmoid>

        // Aggiornamento dello stato della cella
		arm_mult_f32(lstm_state_values.c, lstm_activation_buffer + 100, lstm_state_values.c, 100);
 8001cd6:	4a63      	ldr	r2, [pc, #396]	@ (8001e64 <lstm_inference+0x378>)
 8001cd8:	2364      	movs	r3, #100	@ 0x64
 8001cda:	4610      	mov	r0, r2
 8001cdc:	4651      	mov	r1, sl
 8001cde:	f001 fe57 	bl	8003990 <arm_mult_f32>
		arm_mult_f32(lstm_activation_buffer +   0, lstm_activation_buffer + 200, lstm_activation_buffer + 200, 100);
 8001ce2:	4961      	ldr	r1, [pc, #388]	@ (8001e68 <lstm_inference+0x37c>)
 8001ce4:	2364      	movs	r3, #100	@ 0x64
 8001ce6:	f5a1 7048 	sub.w	r0, r1, #800	@ 0x320
 8001cea:	462a      	mov	r2, r5
 8001cec:	f001 fe50 	bl	8003990 <arm_mult_f32>
		arm_add_f32 (lstm_activation_buffer + 200, lstm_state_values.c, lstm_state_values.c, 100);
 8001cf0:	4a5c      	ldr	r2, [pc, #368]	@ (8001e64 <lstm_inference+0x378>)
 8001cf2:	2364      	movs	r3, #100	@ 0x64
 8001cf4:	4611      	mov	r1, r2
 8001cf6:	4628      	mov	r0, r5
 8001cf8:	f001 fe90 	bl	8003a1c <arm_add_f32>

        // Aggiornamento dello stato nascosto
        // H_t = O_t * tanh(C_t)
		act_tanh2   (lstm_state_values.c, lstm_state_values.h, 100);
 8001cfc:	495b      	ldr	r1, [pc, #364]	@ (8001e6c <lstm_inference+0x380>)
 8001cfe:	2264      	movs	r2, #100	@ 0x64
 8001d00:	f501 70ca 	add.w	r0, r1, #404	@ 0x194
 8001d04:	f7ff fee2 	bl	8001acc <act_tanh2>
		arm_mult_f32(lstm_state_values.h, lstm_activation_buffer + 300, lstm_state_values.h, 100);
 8001d08:	4a58      	ldr	r2, [pc, #352]	@ (8001e6c <lstm_inference+0x380>)
 8001d0a:	4955      	ldr	r1, [pc, #340]	@ (8001e60 <lstm_inference+0x374>)
 8001d0c:	2364      	movs	r3, #100	@ 0x64
 8001d0e:	4610      	mov	r0, r2
	for (int time = 0; time < 100; ++time) {
 8001d10:	3418      	adds	r4, #24
		arm_mult_f32(lstm_state_values.h, lstm_activation_buffer + 300, lstm_state_values.h, 100);
 8001d12:	f001 fe3d 	bl	8003990 <arm_mult_f32>
	for (int time = 0; time < 100; ++time) {
 8001d16:	455c      	cmp	r4, fp
 8001d18:	d19b      	bne.n	8001c52 <lstm_inference+0x166>
 8001d1a:	4a54      	ldr	r2, [pc, #336]	@ (8001e6c <lstm_inference+0x380>)
	}

	// BatchNormalization0
	for (int i = 0; i < 100; ++i) {
 8001d1c:	2300      	movs	r3, #0
		lstm_state_values.h[i] = bn0_bias[i] + bn0_scale[i] * lstm_state_values.h[i];
 8001d1e:	ed92 7a00 	vldr	s14, [r2]
 8001d22:	ecf9 7a01 	vldmia	r9!, {s15}
 8001d26:	ecf8 6a01 	vldmia	r8!, {s13}
 8001d2a:	eee6 7a87 	vfma.f32	s15, s13, s14
	for (int i = 0; i < 100; ++i) {
 8001d2e:	3301      	adds	r3, #1
 8001d30:	2b64      	cmp	r3, #100	@ 0x64
		lstm_state_values.h[i] = bn0_bias[i] + bn0_scale[i] * lstm_state_values.h[i];
 8001d32:	ece2 7a01 	vstmia	r2!, {s15}
	for (int i = 0; i < 100; ++i) {
 8001d36:	d1f2      	bne.n	8001d1e <lstm_inference+0x232>
	}

	// Dense 0 (Input 100, Output 32)
	arm_mat_mult_f32(&mat_dense0_input, &mat_dense0_w, &mat_dense0_output);
 8001d38:	aa13      	add	r2, sp, #76	@ 0x4c
 8001d3a:	a911      	add	r1, sp, #68	@ 0x44
 8001d3c:	a80f      	add	r0, sp, #60	@ 0x3c
 8001d3e:	f001 fd7d 	bl	800383c <arm_mat_mult_f32>

    // Bias del Dense0
    for (int i = 0; i < 32; ++i) {
 8001d42:	4b44      	ldr	r3, [pc, #272]	@ (8001e54 <lstm_inference+0x368>)
 8001d44:	484a      	ldr	r0, [pc, #296]	@ (8001e70 <lstm_inference+0x384>)
	arm_mat_mult_f32(&mat_dense0_input, &mat_dense0_w, &mat_dense0_output);
 8001d46:	4619      	mov	r1, r3
    for (int i = 0; i < 32; ++i) {
 8001d48:	2200      	movs	r2, #0
        dense_0_output_buffer[i] += net_weights.dense_0_b[i];
 8001d4a:	edd1 7a00 	vldr	s15, [r1]
 8001d4e:	ecb0 7a01 	vldmia	r0!, {s14}
    for (int i = 0; i < 32; ++i) {
 8001d52:	3201      	adds	r2, #1
        dense_0_output_buffer[i] += net_weights.dense_0_b[i];
 8001d54:	ee77 7a87 	vadd.f32	s15, s15, s14
    for (int i = 0; i < 32; ++i) {
 8001d58:	2a20      	cmp	r2, #32
        dense_0_output_buffer[i] += net_weights.dense_0_b[i];
 8001d5a:	ece1 7a01 	vstmia	r1!, {s15}
    for (int i = 0; i < 32; ++i) {
 8001d5e:	d1f4      	bne.n	8001d4a <lstm_inference+0x25e>
 8001d60:	493c      	ldr	r1, [pc, #240]	@ (8001e54 <lstm_inference+0x368>)
    }

	// Attivazione ReLu
	for (int i = 0; i < 32; ++i) {
 8001d62:	2200      	movs	r2, #0
		if (dense_0_output_buffer[i] < 0) dense_0_output_buffer[i] = 0;
 8001d64:	2500      	movs	r5, #0
 8001d66:	ecf1 7a01 	vldmia	r1!, {s15}
 8001d6a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001d6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	for (int i = 0; i < 32; ++i) {
 8001d72:	f102 0201 	add.w	r2, r2, #1
		if (dense_0_output_buffer[i] < 0) dense_0_output_buffer[i] = 0;
 8001d76:	bf48      	it	mi
 8001d78:	f841 5c04 	strmi.w	r5, [r1, #-4]
	for (int i = 0; i < 32; ++i) {
 8001d7c:	2a20      	cmp	r2, #32
 8001d7e:	d1f2      	bne.n	8001d66 <lstm_inference+0x27a>
	}

	// BatchNormalization1
	for (int i = 0; i < 32; ++i) {
 8001d80:	2200      	movs	r2, #0
		dense_0_output_buffer[i] = bn1_bias[i] + bn1_scale[i] * dense_0_output_buffer[i];
 8001d82:	ed93 7a00 	vldr	s14, [r3]
 8001d86:	ecf7 7a01 	vldmia	r7!, {s15}
 8001d8a:	ecf6 6a01 	vldmia	r6!, {s13}
 8001d8e:	eee6 7a87 	vfma.f32	s15, s13, s14
	for (int i = 0; i < 32; ++i) {
 8001d92:	3201      	adds	r2, #1
 8001d94:	2a20      	cmp	r2, #32
		dense_0_output_buffer[i] = bn1_bias[i] + bn1_scale[i] * dense_0_output_buffer[i];
 8001d96:	ece3 7a01 	vstmia	r3!, {s15}
	for (int i = 0; i < 32; ++i) {
 8001d9a:	d1f2      	bne.n	8001d82 <lstm_inference+0x296>
	}

	// Dense1 (Input 32, Output 5)
	arm_mat_mult_f32(&mat_dense1_input, &mat_dense1_w, &mat_dense1_output);
 8001d9c:	aa19      	add	r2, sp, #100	@ 0x64
 8001d9e:	a917      	add	r1, sp, #92	@ 0x5c
 8001da0:	a815      	add	r0, sp, #84	@ 0x54
 8001da2:	f001 fd4b 	bl	800383c <arm_mat_mult_f32>

    // Bias del Dense 1
    for (int i = 0; i < 5; ++i) {
 8001da6:	ac1d      	add	r4, sp, #116	@ 0x74
 8001da8:	4932      	ldr	r1, [pc, #200]	@ (8001e74 <lstm_inference+0x388>)
	arm_mat_mult_f32(&mat_dense1_input, &mat_dense1_w, &mat_dense1_output);
 8001daa:	4622      	mov	r2, r4
    for (int i = 0; i < 5; ++i) {
 8001dac:	2300      	movs	r3, #0
 8001dae:	4626      	mov	r6, r4
        final_output_logits[i] += net_weights.dense_1_b[i];
 8001db0:	edd2 7a00 	vldr	s15, [r2]
 8001db4:	ecb1 7a01 	vldmia	r1!, {s14}
    for (int i = 0; i < 5; ++i) {
 8001db8:	3301      	adds	r3, #1
        final_output_logits[i] += net_weights.dense_1_b[i];
 8001dba:	ee77 7a87 	vadd.f32	s15, s15, s14
    for (int i = 0; i < 5; ++i) {
 8001dbe:	2b05      	cmp	r3, #5
        final_output_logits[i] += net_weights.dense_1_b[i];
 8001dc0:	ece2 7a01 	vstmia	r2!, {s15}
    for (int i = 0; i < 5; ++i) {
 8001dc4:	d1f4      	bne.n	8001db0 <lstm_inference+0x2c4>
	float sum_exp = 0;
 8001dc6:	ed9f 8a2c 	vldr	s16, [pc, #176]	@ 8001e78 <lstm_inference+0x38c>
 8001dca:	46a0      	mov	r8, r4
	for (unsigned i = 0; i < len; ++i) {
 8001dcc:	2700      	movs	r7, #0
		data[i] = exp(data[i]);
 8001dce:	f8d8 0000 	ldr.w	r0, [r8]
 8001dd2:	f7fe fbc1 	bl	8000558 <__aeabi_f2d>
 8001dd6:	ec41 0b10 	vmov	d0, r0, r1
 8001dda:	f004 fcc5 	bl	8006768 <exp>
 8001dde:	ec51 0b10 	vmov	r0, r1, d0
 8001de2:	f7fe fee9 	bl	8000bb8 <__aeabi_d2f>
	for (unsigned i = 0; i < len; ++i) {
 8001de6:	3701      	adds	r7, #1
		data[i] = exp(data[i]);
 8001de8:	ee07 0a90 	vmov	s15, r0
	for (unsigned i = 0; i < len; ++i) {
 8001dec:	2f05      	cmp	r7, #5
		data[i] = exp(data[i]);
 8001dee:	f848 0b04 	str.w	r0, [r8], #4
		sum_exp += data[i];
 8001df2:	ee38 8a27 	vadd.f32	s16, s16, s15
	for (unsigned i = 0; i < len; ++i) {
 8001df6:	d1ea      	bne.n	8001dce <lstm_inference+0x2e2>
	if (sum_exp != 0) {
 8001df8:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8001dfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e00:	d173      	bne.n	8001eea <lstm_inference+0x3fe>
	        data[i] = 0.0f;
 8001e02:	6025      	str	r5, [r4, #0]
 8001e04:	6065      	str	r5, [r4, #4]
 8001e06:	60a5      	str	r5, [r4, #8]
 8001e08:	60e5      	str	r5, [r4, #12]
 8001e0a:	6125      	str	r5, [r4, #16]
	while (++i < len)
 8001e0c:	a81e      	add	r0, sp, #120	@ 0x78
	unsigned idx = 0;
 8001e0e:	2300      	movs	r3, #0
	while (++i < len)
 8001e10:	2201      	movs	r2, #1
 8001e12:	e03f      	b.n	8001e94 <lstm_inference+0x3a8>
 8001e14:	0800af9c 	.word	0x0800af9c
 8001e18:	0800aaec 	.word	0x0800aaec
 8001e1c:	0800ac7c 	.word	0x0800ac7c
 8001e20:	3a83126f 	.word	0x3a83126f
 8001e24:	0800b12c 	.word	0x0800b12c
 8001e28:	20000c7c 	.word	0x20000c7c
 8001e2c:	20000bfc 	.word	0x20000bfc
 8001e30:	080077ec 	.word	0x080077ec
 8001e34:	0800766c 	.word	0x0800766c
 8001e38:	0800776c 	.word	0x0800776c
 8001e3c:	0800786c 	.word	0x0800786c
 8001e40:	200016dc 	.word	0x200016dc
 8001e44:	0803286c 	.word	0x0803286c
 8001e48:	0800b76c 	.word	0x0800b76c
 8001e4c:	2000109c 	.word	0x2000109c
 8001e50:	080078ec 	.word	0x080078ec
 8001e54:	2000101c 	.word	0x2000101c
 8001e58:	080073ec 	.word	0x080073ec
 8001e5c:	0800b12c 	.word	0x0800b12c
 8001e60:	2000154c 	.word	0x2000154c
 8001e64:	20001888 	.word	0x20001888
 8001e68:	200013bc 	.word	0x200013bc
 8001e6c:	200016f4 	.word	0x200016f4
 8001e70:	0800786c 	.word	0x0800786c
 8001e74:	080073d8 	.word	0x080073d8
 8001e78:	00000000 	.word	0x00000000
 8001e7c:	20000e8c 	.word	0x20000e8c
 8001e80:	20000cfc 	.word	0x20000cfc
 8001e84:	0800ae0c 	.word	0x0800ae0c
 8001e88:	080076ec 	.word	0x080076ec
 8001e8c:	2000122c 	.word	0x2000122c
 8001e90:	42c80000 	.word	0x42c80000
		if (data[i] > data[idx])
 8001e94:	f50d 61d9 	add.w	r1, sp, #1736	@ 0x6c8
 8001e98:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8001e9c:	f2a1 6154 	subw	r1, r1, #1620	@ 0x654
 8001ea0:	ecb0 7a01 	vldmia	r0!, {s14}
 8001ea4:	edd1 7a00 	vldr	s15, [r1]
			idx = i;
 8001ea8:	eeb4 7a67 	vcmp.f32	s14, s15
 8001eac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001eb0:	bfc8      	it	gt
 8001eb2:	4613      	movgt	r3, r2
	while (++i < len)
 8001eb4:	3201      	adds	r2, #1
 8001eb6:	2a05      	cmp	r2, #5
 8001eb8:	d1ec      	bne.n	8001e94 <lstm_inference+0x3a8>
    // Applicazione Softmax
    softmax(final_output_logits, 5);

    // Classe predetta e confidenza
    predicted_class = argmax(final_output_logits, 5);
    confidence = (uint8_t)(final_output_logits[predicted_class] * 100.0f + 0.5f);
 8001eba:	eb06 0683 	add.w	r6, r6, r3, lsl #2
 8001ebe:	edd6 6a00 	vldr	s13, [r6]
 8001ec2:	ed1f 7a0d 	vldr	s14, [pc, #-52]	@ 8001e90 <lstm_inference+0x3a4>
    predicted_class = argmax(final_output_logits, 5);
 8001ec6:	4a0f      	ldr	r2, [pc, #60]	@ (8001f04 <lstm_inference+0x418>)
    confidence = (uint8_t)(final_output_logits[predicted_class] * 100.0f + 0.5f);
 8001ec8:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8001ecc:	eee6 7a87 	vfma.f32	s15, s13, s14
    predicted_class = argmax(final_output_logits, 5);
 8001ed0:	7013      	strb	r3, [r2, #0]
    confidence = (uint8_t)(final_output_logits[predicted_class] * 100.0f + 0.5f);
 8001ed2:	4a0d      	ldr	r2, [pc, #52]	@ (8001f08 <lstm_inference+0x41c>)
 8001ed4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ed8:	ee17 3a90 	vmov	r3, s15
 8001edc:	7013      	strb	r3, [r2, #0]
}
 8001ede:	f20d 6dcc 	addw	sp, sp, #1740	@ 0x6cc
 8001ee2:	ecbd 8b02 	vpop	{d8}
 8001ee6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		float inv_sum_exp = 1.0f / sum_exp;
 8001eea:	ee88 7a88 	vdiv.f32	s14, s17, s16
		for (unsigned i = 0; i < len; ++i) {
 8001eee:	2300      	movs	r3, #0
 8001ef0:	3301      	adds	r3, #1
 8001ef2:	2b05      	cmp	r3, #5
			data[i] *= inv_sum_exp;
 8001ef4:	edd4 7a00 	vldr	s15, [r4]
 8001ef8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001efc:	ece4 7a01 	vstmia	r4!, {s15}
		for (unsigned i = 0; i < len; ++i) {
 8001f00:	d1f6      	bne.n	8001ef0 <lstm_inference+0x404>
 8001f02:	e783      	b.n	8001e0c <lstm_inference+0x320>
 8001f04:	20001a19 	.word	0x20001a19
 8001f08:	20001a18 	.word	0x20001a18

08001f0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f0c:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f0e:	4b0c      	ldr	r3, [pc, #48]	@ (8001f40 <HAL_MspInit+0x34>)
 8001f10:	2100      	movs	r1, #0
 8001f12:	9100      	str	r1, [sp, #0]
 8001f14:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001f16:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001f1a:	645a      	str	r2, [r3, #68]	@ 0x44
 8001f1c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001f1e:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8001f22:	9200      	str	r2, [sp, #0]
 8001f24:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f26:	9101      	str	r1, [sp, #4]
 8001f28:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001f2a:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001f2e:	641a      	str	r2, [r3, #64]	@ 0x40
 8001f30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f36:	9301      	str	r3, [sp, #4]
 8001f38:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f3a:	b002      	add	sp, #8
 8001f3c:	4770      	bx	lr
 8001f3e:	bf00      	nop
 8001f40:	40023800 	.word	0x40023800

08001f44 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001f44:	e7fe      	b.n	8001f44 <NMI_Handler>

08001f46 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f46:	e7fe      	b.n	8001f46 <HardFault_Handler>

08001f48 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f48:	e7fe      	b.n	8001f48 <MemManage_Handler>

08001f4a <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f4a:	e7fe      	b.n	8001f4a <BusFault_Handler>

08001f4c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f4c:	e7fe      	b.n	8001f4c <UsageFault_Handler>

08001f4e <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f4e:	4770      	bx	lr

08001f50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 8001f50:	4770      	bx	lr

08001f52 <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 8001f52:	4770      	bx	lr

08001f54 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f54:	f000 b900 	b.w	8002158 <HAL_IncTick>

08001f58 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001f58:	4801      	ldr	r0, [pc, #4]	@ (8001f60 <USART2_IRQHandler+0x8>)
 8001f5a:	f001 bb1f 	b.w	800359c <HAL_UART_IRQHandler>
 8001f5e:	bf00      	nop
 8001f60:	20001a20 	.word	0x20001a20

08001f64 <_write>:
int _write(int file, char *ptr, int len) {
  // Redirect to UART, or just return len to ignore
  return len;
}
 8001f64:	4610      	mov	r0, r2
 8001f66:	4770      	bx	lr

08001f68 <_read>:

int _read(int file, char *ptr, int len) {
  return 0;
}
 8001f68:	2000      	movs	r0, #0
 8001f6a:	4770      	bx	lr

08001f6c <_close>:

int _close(int file) {
  return -1;
}
 8001f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f70:	4770      	bx	lr

08001f72 <_fstat>:

int _fstat(int file, void *st) {
  return 0;
}
 8001f72:	2000      	movs	r0, #0
 8001f74:	4770      	bx	lr

08001f76 <_isatty>:

int _isatty(int file) {
  return 1;
}
 8001f76:	2001      	movs	r0, #1
 8001f78:	4770      	bx	lr

08001f7a <_lseek>:

int _lseek(int file, int ptr, int dir) {
  return 0;
}
 8001f7a:	2000      	movs	r0, #0
 8001f7c:	4770      	bx	lr
	...

08001f80 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f80:	4a0b      	ldr	r2, [pc, #44]	@ (8001fb0 <_sbrk+0x30>)
 8001f82:	6811      	ldr	r1, [r2, #0]
{
 8001f84:	b510      	push	{r4, lr}
 8001f86:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8001f88:	b909      	cbnz	r1, 8001f8e <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 8001f8a:	490a      	ldr	r1, [pc, #40]	@ (8001fb4 <_sbrk+0x34>)
 8001f8c:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f8e:	6810      	ldr	r0, [r2, #0]
 8001f90:	4909      	ldr	r1, [pc, #36]	@ (8001fb8 <_sbrk+0x38>)
 8001f92:	4c0a      	ldr	r4, [pc, #40]	@ (8001fbc <_sbrk+0x3c>)
 8001f94:	4403      	add	r3, r0
 8001f96:	1b09      	subs	r1, r1, r4
 8001f98:	428b      	cmp	r3, r1
 8001f9a:	d906      	bls.n	8001faa <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8001f9c:	f002 fb68 	bl	8004670 <__errno>
 8001fa0:	230c      	movs	r3, #12
 8001fa2:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001fa4:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8001fa8:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8001faa:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8001fac:	e7fc      	b.n	8001fa8 <_sbrk+0x28>
 8001fae:	bf00      	nop
 8001fb0:	20001a1c 	.word	0x20001a1c
 8001fb4:	20001bb8 	.word	0x20001bb8
 8001fb8:	20018000 	.word	0x20018000
 8001fbc:	00000800 	.word	0x00000800

08001fc0 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001fc0:	4a03      	ldr	r2, [pc, #12]	@ (8001fd0 <SystemInit+0x10>)
 8001fc2:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8001fc6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001fca:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001fce:	4770      	bx	lr
 8001fd0:	e000ed00 	.word	0xe000ed00

08001fd4 <MX_USART2_UART_Init>:
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001fd4:	480b      	ldr	r0, [pc, #44]	@ (8002004 <MX_USART2_UART_Init+0x30>)
  huart2.Init.BaudRate = 115200;
 8001fd6:	4a0c      	ldr	r2, [pc, #48]	@ (8002008 <MX_USART2_UART_Init+0x34>)
{
 8001fd8:	b508      	push	{r3, lr}
  huart2.Init.BaudRate = 115200;
 8001fda:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8001fde:	e9c0 2300 	strd	r2, r3, [r0]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001fe2:	2300      	movs	r3, #0
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001fe4:	220c      	movs	r2, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001fe6:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fea:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001fee:	6103      	str	r3, [r0, #16]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ff0:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001ff2:	f001 f9ef 	bl	80033d4 <HAL_UART_Init>
 8001ff6:	b118      	cbz	r0, 8002000 <MX_USART2_UART_Init+0x2c>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001ff8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8001ffc:	f7ff bd3c 	b.w	8001a78 <Error_Handler>
}
 8002000:	bd08      	pop	{r3, pc}
 8002002:	bf00      	nop
 8002004:	20001a20 	.word	0x20001a20
 8002008:	40004400 	.word	0x40004400

0800200c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800200c:	b510      	push	{r4, lr}
 800200e:	4604      	mov	r4, r0
 8002010:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002012:	2214      	movs	r2, #20
 8002014:	2100      	movs	r1, #0
 8002016:	a803      	add	r0, sp, #12
 8002018:	f002 fad7 	bl	80045ca <memset>
  if(uartHandle->Instance==USART2)
 800201c:	6822      	ldr	r2, [r4, #0]
 800201e:	4b18      	ldr	r3, [pc, #96]	@ (8002080 <HAL_UART_MspInit+0x74>)
 8002020:	429a      	cmp	r2, r3
 8002022:	d12a      	bne.n	800207a <HAL_UART_MspInit+0x6e>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002024:	f503 33fa 	add.w	r3, r3, #128000	@ 0x1f400
 8002028:	2400      	movs	r4, #0
 800202a:	9401      	str	r4, [sp, #4]
 800202c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800202e:	4815      	ldr	r0, [pc, #84]	@ (8002084 <HAL_UART_MspInit+0x78>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8002030:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8002034:	641a      	str	r2, [r3, #64]	@ 0x40
 8002036:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002038:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 800203c:	9201      	str	r2, [sp, #4]
 800203e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002040:	9402      	str	r4, [sp, #8]
 8002042:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002044:	f042 0201 	orr.w	r2, r2, #1
 8002048:	631a      	str	r2, [r3, #48]	@ 0x30
 800204a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800204c:	f003 0301 	and.w	r3, r3, #1
 8002050:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002052:	220c      	movs	r2, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002054:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002056:	2302      	movs	r3, #2
 8002058:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800205c:	2103      	movs	r1, #3
 800205e:	2307      	movs	r3, #7
 8002060:	e9cd 1306 	strd	r1, r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002064:	a903      	add	r1, sp, #12
 8002066:	f000 f953 	bl	8002310 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800206a:	2026      	movs	r0, #38	@ 0x26
 800206c:	4622      	mov	r2, r4
 800206e:	4621      	mov	r1, r4
 8002070:	f000 f8aa 	bl	80021c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002074:	2026      	movs	r0, #38	@ 0x26
 8002076:	f000 f8d9 	bl	800222c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800207a:	b008      	add	sp, #32
 800207c:	bd10      	pop	{r4, pc}
 800207e:	bf00      	nop
 8002080:	40004400 	.word	0x40004400
 8002084:	40020000 	.word	0x40020000

08002088 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002088:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80020c0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 800208c:	f7ff ff98 	bl	8001fc0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002090:	480c      	ldr	r0, [pc, #48]	@ (80020c4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002092:	490d      	ldr	r1, [pc, #52]	@ (80020c8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002094:	4a0d      	ldr	r2, [pc, #52]	@ (80020cc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002096:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002098:	e002      	b.n	80020a0 <LoopCopyDataInit>

0800209a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800209a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800209c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800209e:	3304      	adds	r3, #4

080020a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020a4:	d3f9      	bcc.n	800209a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020a6:	4a0a      	ldr	r2, [pc, #40]	@ (80020d0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80020a8:	4c0a      	ldr	r4, [pc, #40]	@ (80020d4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80020aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020ac:	e001      	b.n	80020b2 <LoopFillZerobss>

080020ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020b0:	3204      	adds	r2, #4

080020b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020b4:	d3fb      	bcc.n	80020ae <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80020b6:	f002 fae1 	bl	800467c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80020ba:	f7ff fb59 	bl	8001770 <main>
  bx  lr    
 80020be:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80020c0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80020c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020c8:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80020cc:	08035068 	.word	0x08035068
  ldr r2, =_sbss
 80020d0:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80020d4:	20001bb8 	.word	0x20001bb8

080020d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80020d8:	e7fe      	b.n	80020d8 <ADC_IRQHandler>
	...

080020dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020dc:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80020de:	4b0e      	ldr	r3, [pc, #56]	@ (8002118 <HAL_InitTick+0x3c>)
 80020e0:	781a      	ldrb	r2, [r3, #0]
 80020e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80020e6:	fbb3 f3f2 	udiv	r3, r3, r2
 80020ea:	4a0c      	ldr	r2, [pc, #48]	@ (800211c <HAL_InitTick+0x40>)
{
 80020ec:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80020ee:	6810      	ldr	r0, [r2, #0]
 80020f0:	fbb0 f0f3 	udiv	r0, r0, r3
 80020f4:	f000 f8a8 	bl	8002248 <HAL_SYSTICK_Config>
 80020f8:	4604      	mov	r4, r0
 80020fa:	b958      	cbnz	r0, 8002114 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020fc:	2d0f      	cmp	r5, #15
 80020fe:	d809      	bhi.n	8002114 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002100:	4602      	mov	r2, r0
 8002102:	4629      	mov	r1, r5
 8002104:	f04f 30ff 	mov.w	r0, #4294967295
 8002108:	f000 f85e 	bl	80021c8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800210c:	4b04      	ldr	r3, [pc, #16]	@ (8002120 <HAL_InitTick+0x44>)
 800210e:	4620      	mov	r0, r4
 8002110:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8002112:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8002114:	2001      	movs	r0, #1
 8002116:	e7fc      	b.n	8002112 <HAL_InitTick+0x36>
 8002118:	20000004 	.word	0x20000004
 800211c:	20000000 	.word	0x20000000
 8002120:	20000008 	.word	0x20000008

08002124 <HAL_Init>:
{
 8002124:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002126:	4b0b      	ldr	r3, [pc, #44]	@ (8002154 <HAL_Init+0x30>)
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800212e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002136:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002138:	681a      	ldr	r2, [r3, #0]
 800213a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800213e:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002140:	2003      	movs	r0, #3
 8002142:	f000 f82f 	bl	80021a4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8002146:	200f      	movs	r0, #15
 8002148:	f7ff ffc8 	bl	80020dc <HAL_InitTick>
  HAL_MspInit();
 800214c:	f7ff fede 	bl	8001f0c <HAL_MspInit>
}
 8002150:	2000      	movs	r0, #0
 8002152:	bd08      	pop	{r3, pc}
 8002154:	40023c00 	.word	0x40023c00

08002158 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002158:	4a03      	ldr	r2, [pc, #12]	@ (8002168 <HAL_IncTick+0x10>)
 800215a:	4b04      	ldr	r3, [pc, #16]	@ (800216c <HAL_IncTick+0x14>)
 800215c:	6811      	ldr	r1, [r2, #0]
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	440b      	add	r3, r1
 8002162:	6013      	str	r3, [r2, #0]
}
 8002164:	4770      	bx	lr
 8002166:	bf00      	nop
 8002168:	20001a68 	.word	0x20001a68
 800216c:	20000004 	.word	0x20000004

08002170 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002170:	4b01      	ldr	r3, [pc, #4]	@ (8002178 <HAL_GetTick+0x8>)
 8002172:	6818      	ldr	r0, [r3, #0]
}
 8002174:	4770      	bx	lr
 8002176:	bf00      	nop
 8002178:	20001a68 	.word	0x20001a68

0800217c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800217c:	b538      	push	{r3, r4, r5, lr}
 800217e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002180:	f7ff fff6 	bl	8002170 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002184:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8002186:	bf1c      	itt	ne
 8002188:	4b05      	ldrne	r3, [pc, #20]	@ (80021a0 <HAL_Delay+0x24>)
 800218a:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 800218c:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 800218e:	bf18      	it	ne
 8002190:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002192:	f7ff ffed 	bl	8002170 <HAL_GetTick>
 8002196:	1b43      	subs	r3, r0, r5
 8002198:	42a3      	cmp	r3, r4
 800219a:	d3fa      	bcc.n	8002192 <HAL_Delay+0x16>
  {
  }
}
 800219c:	bd38      	pop	{r3, r4, r5, pc}
 800219e:	bf00      	nop
 80021a0:	20000004 	.word	0x20000004

080021a4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021a4:	4907      	ldr	r1, [pc, #28]	@ (80021c4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80021a6:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021a8:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021ac:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021ae:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021b0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021b4:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021b8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80021bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 80021c0:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80021c2:	4770      	bx	lr
 80021c4:	e000ed00 	.word	0xe000ed00

080021c8 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021c8:	4b16      	ldr	r3, [pc, #88]	@ (8002224 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021ca:	b530      	push	{r4, r5, lr}
 80021cc:	68dc      	ldr	r4, [r3, #12]
 80021ce:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021d2:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021d6:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021d8:	2b04      	cmp	r3, #4
 80021da:	bf28      	it	cs
 80021dc:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021de:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021e0:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021e4:	bf8c      	ite	hi
 80021e6:	3c03      	subhi	r4, #3
 80021e8:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021ea:	fa05 f303 	lsl.w	r3, r5, r3
 80021ee:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021f2:	40a5      	lsls	r5, r4
 80021f4:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021f8:	40a3      	lsls	r3, r4
  if ((int32_t)(IRQn) >= 0)
 80021fa:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021fc:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002200:	bfac      	ite	ge
 8002202:	f100 4060 	addge.w	r0, r0, #3758096384	@ 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002206:	4a08      	ldrlt	r2, [pc, #32]	@ (8002228 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002208:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800220c:	bfb8      	it	lt
 800220e:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002212:	b2db      	uxtb	r3, r3
 8002214:	bfaa      	itet	ge
 8002216:	f500 4061 	addge.w	r0, r0, #57600	@ 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800221a:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800221c:	f880 3300 	strbge.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002220:	bd30      	pop	{r4, r5, pc}
 8002222:	bf00      	nop
 8002224:	e000ed00 	.word	0xe000ed00
 8002228:	e000ed14 	.word	0xe000ed14

0800222c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800222c:	2800      	cmp	r0, #0
 800222e:	db07      	blt.n	8002240 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002230:	4a04      	ldr	r2, [pc, #16]	@ (8002244 <HAL_NVIC_EnableIRQ+0x18>)
 8002232:	0941      	lsrs	r1, r0, #5
 8002234:	2301      	movs	r3, #1
 8002236:	f000 001f 	and.w	r0, r0, #31
 800223a:	4083      	lsls	r3, r0
 800223c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002240:	4770      	bx	lr
 8002242:	bf00      	nop
 8002244:	e000e100 	.word	0xe000e100

08002248 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002248:	3801      	subs	r0, #1
 800224a:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 800224e:	d20b      	bcs.n	8002268 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002250:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002254:	4a05      	ldr	r2, [pc, #20]	@ (800226c <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002256:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002258:	21f0      	movs	r1, #240	@ 0xf0
 800225a:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800225e:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002260:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002262:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002264:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002266:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8002268:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800226a:	4770      	bx	lr
 800226c:	e000ed00 	.word	0xe000ed00

08002270 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002270:	b570      	push	{r4, r5, r6, lr}
 8002272:	4604      	mov	r4, r0
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002274:	6d86      	ldr	r6, [r0, #88]	@ 0x58
  
  uint32_t tickstart = HAL_GetTick();
 8002276:	f7ff ff7b 	bl	8002170 <HAL_GetTick>
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800227a:	f894 3035 	ldrb.w	r3, [r4, #53]	@ 0x35
 800227e:	2b02      	cmp	r3, #2
  uint32_t tickstart = HAL_GetTick();
 8002280:	4605      	mov	r5, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002282:	d006      	beq.n	8002292 <HAL_DMA_Abort+0x22>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002284:	2380      	movs	r3, #128	@ 0x80
 8002286:	6563      	str	r3, [r4, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
    
    return HAL_ERROR;
 8002288:	2001      	movs	r0, #1
    __HAL_UNLOCK(hdma);
 800228a:	2300      	movs	r3, #0
 800228c:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
  }
  return HAL_OK;
}
 8002290:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002292:	6823      	ldr	r3, [r4, #0]
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	f022 0216 	bic.w	r2, r2, #22
 800229a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800229c:	695a      	ldr	r2, [r3, #20]
 800229e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80022a2:	615a      	str	r2, [r3, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80022a4:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80022a6:	b90a      	cbnz	r2, 80022ac <HAL_DMA_Abort+0x3c>
 80022a8:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 80022aa:	b11a      	cbz	r2, 80022b4 <HAL_DMA_Abort+0x44>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	f022 0208 	bic.w	r2, r2, #8
 80022b2:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	f022 0201 	bic.w	r2, r2, #1
 80022ba:	601a      	str	r2, [r3, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022bc:	6823      	ldr	r3, [r4, #0]
 80022be:	6818      	ldr	r0, [r3, #0]
 80022c0:	f010 0001 	ands.w	r0, r0, #1
 80022c4:	d107      	bne.n	80022d6 <HAL_DMA_Abort+0x66>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022c6:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 80022c8:	233f      	movs	r3, #63	@ 0x3f
 80022ca:	4093      	lsls	r3, r2
 80022cc:	60b3      	str	r3, [r6, #8]
    hdma->State = HAL_DMA_STATE_READY;
 80022ce:	2301      	movs	r3, #1
 80022d0:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  return HAL_OK;
 80022d4:	e7d9      	b.n	800228a <HAL_DMA_Abort+0x1a>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80022d6:	f7ff ff4b 	bl	8002170 <HAL_GetTick>
 80022da:	1b40      	subs	r0, r0, r5
 80022dc:	2805      	cmp	r0, #5
 80022de:	d9ed      	bls.n	80022bc <HAL_DMA_Abort+0x4c>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80022e0:	2320      	movs	r3, #32
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80022e2:	2003      	movs	r0, #3
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80022e4:	6563      	str	r3, [r4, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80022e6:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
        return HAL_TIMEOUT;
 80022ea:	e7ce      	b.n	800228a <HAL_DMA_Abort+0x1a>

080022ec <HAL_DMA_Abort_IT>:
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80022ec:	f890 3035 	ldrb.w	r3, [r0, #53]	@ 0x35
 80022f0:	2b02      	cmp	r3, #2
 80022f2:	d003      	beq.n	80022fc <HAL_DMA_Abort_IT+0x10>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022f4:	2380      	movs	r3, #128	@ 0x80
 80022f6:	6543      	str	r3, [r0, #84]	@ 0x54
    return HAL_ERROR;
 80022f8:	2001      	movs	r0, #1
 80022fa:	4770      	bx	lr
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80022fc:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 80022fe:	2305      	movs	r3, #5
 8002300:	f880 3035 	strb.w	r3, [r0, #53]	@ 0x35
    __HAL_DMA_DISABLE(hdma);
 8002304:	6813      	ldr	r3, [r2, #0]
 8002306:	f023 0301 	bic.w	r3, r3, #1
 800230a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800230c:	2000      	movs	r0, #0
}
 800230e:	4770      	bx	lr

08002310 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002310:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002314:	f8df 9180 	ldr.w	r9, [pc, #384]	@ 8002498 <HAL_GPIO_Init+0x188>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002318:	4a5d      	ldr	r2, [pc, #372]	@ (8002490 <HAL_GPIO_Init+0x180>)
  for(position = 0U; position < GPIO_NUMBER; position++)
 800231a:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800231c:	680d      	ldr	r5, [r1, #0]
    ioposition = 0x01U << position;
 800231e:	2401      	movs	r4, #1
 8002320:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002322:	ea04 0605 	and.w	r6, r4, r5
    if(iocurrent == ioposition)
 8002326:	43ac      	bics	r4, r5
 8002328:	f040 80a3 	bne.w	8002472 <HAL_GPIO_Init+0x162>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800232c:	684d      	ldr	r5, [r1, #4]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800232e:	2703      	movs	r7, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002330:	f005 0403 	and.w	r4, r5, #3
 8002334:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002338:	fa07 fc08 	lsl.w	ip, r7, r8
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800233c:	1e67      	subs	r7, r4, #1
 800233e:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002340:	ea6f 0c0c 	mvn.w	ip, ip
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002344:	d834      	bhi.n	80023b0 <HAL_GPIO_Init+0xa0>
        temp = GPIOx->OSPEEDR; 
 8002346:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002348:	ea07 0e0c 	and.w	lr, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2U));
 800234c:	68cf      	ldr	r7, [r1, #12]
 800234e:	fa07 f708 	lsl.w	r7, r7, r8
 8002352:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 8002356:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8002358:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800235a:	ea27 0e06 	bic.w	lr, r7, r6
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800235e:	f3c5 1700 	ubfx	r7, r5, #4, #1
 8002362:	409f      	lsls	r7, r3
 8002364:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8002368:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 800236a:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800236c:	ea07 0e0c 	and.w	lr, r7, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002370:	688f      	ldr	r7, [r1, #8]
 8002372:	fa07 f708 	lsl.w	r7, r7, r8
 8002376:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800237a:	2c02      	cmp	r4, #2
        GPIOx->PUPDR = temp;
 800237c:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800237e:	d119      	bne.n	80023b4 <HAL_GPIO_Init+0xa4>
        temp = GPIOx->AFR[position >> 3U];
 8002380:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8002384:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002388:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 800238c:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002390:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8002394:	f04f 0e0f 	mov.w	lr, #15
 8002398:	fa0e fe0b 	lsl.w	lr, lr, fp
 800239c:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80023a0:	690f      	ldr	r7, [r1, #16]
 80023a2:	fa07 f70b 	lsl.w	r7, r7, fp
 80023a6:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 80023aa:	f8ca 7020 	str.w	r7, [sl, #32]
 80023ae:	e001      	b.n	80023b4 <HAL_GPIO_Init+0xa4>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023b0:	2c03      	cmp	r4, #3
 80023b2:	d1da      	bne.n	800236a <HAL_GPIO_Init+0x5a>
      temp = GPIOx->MODER;
 80023b4:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023b6:	fa04 f408 	lsl.w	r4, r4, r8
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80023ba:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023be:	433c      	orrs	r4, r7
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80023c0:	f415 3f40 	tst.w	r5, #196608	@ 0x30000
      GPIOx->MODER = temp;
 80023c4:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80023c6:	d054      	beq.n	8002472 <HAL_GPIO_Init+0x162>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023c8:	2400      	movs	r4, #0
 80023ca:	9401      	str	r4, [sp, #4]
 80023cc:	f8d9 4044 	ldr.w	r4, [r9, #68]	@ 0x44
 80023d0:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 80023d4:	f8c9 4044 	str.w	r4, [r9, #68]	@ 0x44
 80023d8:	f8d9 4044 	ldr.w	r4, [r9, #68]	@ 0x44
 80023dc:	f023 0703 	bic.w	r7, r3, #3
 80023e0:	f107 4780 	add.w	r7, r7, #1073741824	@ 0x40000000
 80023e4:	f404 4480 	and.w	r4, r4, #16384	@ 0x4000
 80023e8:	f507 379c 	add.w	r7, r7, #79872	@ 0x13800
 80023ec:	9401      	str	r4, [sp, #4]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80023ee:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023f2:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 80023f4:	f8d7 e008 	ldr.w	lr, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80023f8:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80023fc:	240f      	movs	r4, #15
 80023fe:	fa04 f40c 	lsl.w	r4, r4, ip
 8002402:	ea2e 0e04 	bic.w	lr, lr, r4
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002406:	4c23      	ldr	r4, [pc, #140]	@ (8002494 <HAL_GPIO_Init+0x184>)
 8002408:	42a0      	cmp	r0, r4
 800240a:	d039      	beq.n	8002480 <HAL_GPIO_Init+0x170>
 800240c:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8002410:	42a0      	cmp	r0, r4
 8002412:	d037      	beq.n	8002484 <HAL_GPIO_Init+0x174>
 8002414:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8002418:	42a0      	cmp	r0, r4
 800241a:	d035      	beq.n	8002488 <HAL_GPIO_Init+0x178>
 800241c:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8002420:	42a0      	cmp	r0, r4
 8002422:	d033      	beq.n	800248c <HAL_GPIO_Init+0x17c>
 8002424:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8002428:	42a0      	cmp	r0, r4
 800242a:	bf14      	ite	ne
 800242c:	2407      	movne	r4, #7
 800242e:	2404      	moveq	r4, #4
 8002430:	fa04 f40c 	lsl.w	r4, r4, ip
 8002434:	ea44 040e 	orr.w	r4, r4, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002438:	60bc      	str	r4, [r7, #8]
        temp = EXTI->RTSR;
 800243a:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 800243c:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800243e:	f415 1f80 	tst.w	r5, #1048576	@ 0x100000
        temp &= ~((uint32_t)iocurrent);
 8002442:	bf0c      	ite	eq
 8002444:	403c      	andeq	r4, r7
        {
          temp |= iocurrent;
 8002446:	4334      	orrne	r4, r6
        }
        EXTI->RTSR = temp;
 8002448:	6094      	str	r4, [r2, #8]

        temp = EXTI->FTSR;
 800244a:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800244c:	f415 1f00 	tst.w	r5, #2097152	@ 0x200000
        temp &= ~((uint32_t)iocurrent);
 8002450:	bf0c      	ite	eq
 8002452:	403c      	andeq	r4, r7
        {
          temp |= iocurrent;
 8002454:	4334      	orrne	r4, r6
        }
        EXTI->FTSR = temp;
 8002456:	60d4      	str	r4, [r2, #12]

        temp = EXTI->EMR;
 8002458:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800245a:	f415 3f00 	tst.w	r5, #131072	@ 0x20000
        temp &= ~((uint32_t)iocurrent);
 800245e:	bf0c      	ite	eq
 8002460:	403c      	andeq	r4, r7
        {
          temp |= iocurrent;
 8002462:	4334      	orrne	r4, r6
        }
        EXTI->EMR = temp;
 8002464:	6054      	str	r4, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002466:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002468:	03ed      	lsls	r5, r5, #15
        temp &= ~((uint32_t)iocurrent);
 800246a:	bf54      	ite	pl
 800246c:	403c      	andpl	r4, r7
        {
          temp |= iocurrent;
 800246e:	4334      	orrmi	r4, r6
        }
        EXTI->IMR = temp;
 8002470:	6014      	str	r4, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002472:	3301      	adds	r3, #1
 8002474:	2b10      	cmp	r3, #16
 8002476:	f47f af51 	bne.w	800231c <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 800247a:	b003      	add	sp, #12
 800247c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002480:	2400      	movs	r4, #0
 8002482:	e7d5      	b.n	8002430 <HAL_GPIO_Init+0x120>
 8002484:	2401      	movs	r4, #1
 8002486:	e7d3      	b.n	8002430 <HAL_GPIO_Init+0x120>
 8002488:	2402      	movs	r4, #2
 800248a:	e7d1      	b.n	8002430 <HAL_GPIO_Init+0x120>
 800248c:	2403      	movs	r4, #3
 800248e:	e7cf      	b.n	8002430 <HAL_GPIO_Init+0x120>
 8002490:	40013c00 	.word	0x40013c00
 8002494:	40020000 	.word	0x40020000
 8002498:	40023800 	.word	0x40023800

0800249c <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800249c:	6801      	ldr	r1, [r0, #0]
 800249e:	694b      	ldr	r3, [r1, #20]
 80024a0:	f413 6380 	ands.w	r3, r3, #1024	@ 0x400
 80024a4:	f04f 0200 	mov.w	r2, #0
 80024a8:	d010      	beq.n	80024cc <I2C_IsAcknowledgeFailed+0x30>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024aa:	f46f 6380 	mvn.w	r3, #1024	@ 0x400
 80024ae:	614b      	str	r3, [r1, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 80024b0:	2320      	movs	r3, #32
    hi2c->PreviousState       = I2C_STATE_NONE;
 80024b2:	6302      	str	r2, [r0, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80024b4:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024b8:	f880 203e 	strb.w	r2, [r0, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80024bc:	6c03      	ldr	r3, [r0, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024be:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80024c2:	f043 0304 	orr.w	r3, r3, #4
 80024c6:	6403      	str	r3, [r0, #64]	@ 0x40

    return HAL_ERROR;
 80024c8:	2001      	movs	r0, #1
 80024ca:	4770      	bx	lr
  }
  return HAL_OK;
 80024cc:	4618      	mov	r0, r3
}
 80024ce:	4770      	bx	lr

080024d0 <I2C_WaitOnFlagUntilTimeout>:
{
 80024d0:	e92d 46f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r9, sl, lr}
 80024d4:	4606      	mov	r6, r0
 80024d6:	460f      	mov	r7, r1
 80024d8:	4691      	mov	r9, r2
 80024da:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80024dc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80024e0:	6833      	ldr	r3, [r6, #0]
 80024e2:	f1ba 0f01 	cmp.w	sl, #1
 80024e6:	bf0c      	ite	eq
 80024e8:	695c      	ldreq	r4, [r3, #20]
 80024ea:	699c      	ldrne	r4, [r3, #24]
 80024ec:	ea27 0404 	bic.w	r4, r7, r4
 80024f0:	b2a4      	uxth	r4, r4
 80024f2:	fab4 f484 	clz	r4, r4
 80024f6:	0964      	lsrs	r4, r4, #5
 80024f8:	45a1      	cmp	r9, r4
 80024fa:	d001      	beq.n	8002500 <I2C_WaitOnFlagUntilTimeout+0x30>
  return HAL_OK;
 80024fc:	2000      	movs	r0, #0
 80024fe:	e025      	b.n	800254c <I2C_WaitOnFlagUntilTimeout+0x7c>
    if (Timeout != HAL_MAX_DELAY)
 8002500:	1c6a      	adds	r2, r5, #1
 8002502:	d0ee      	beq.n	80024e2 <I2C_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002504:	f7ff fe34 	bl	8002170 <HAL_GetTick>
 8002508:	9b08      	ldr	r3, [sp, #32]
 800250a:	1ac0      	subs	r0, r0, r3
 800250c:	42a8      	cmp	r0, r5
 800250e:	d801      	bhi.n	8002514 <I2C_WaitOnFlagUntilTimeout+0x44>
 8002510:	2d00      	cmp	r5, #0
 8002512:	d1e5      	bne.n	80024e0 <I2C_WaitOnFlagUntilTimeout+0x10>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002514:	6833      	ldr	r3, [r6, #0]
 8002516:	f1ba 0f01 	cmp.w	sl, #1
 800251a:	bf0c      	ite	eq
 800251c:	695b      	ldreq	r3, [r3, #20]
 800251e:	699b      	ldrne	r3, [r3, #24]
 8002520:	ea27 0303 	bic.w	r3, r7, r3
 8002524:	b29b      	uxth	r3, r3
 8002526:	fab3 f383 	clz	r3, r3
 800252a:	095b      	lsrs	r3, r3, #5
 800252c:	4599      	cmp	r9, r3
 800252e:	d1d7      	bne.n	80024e0 <I2C_WaitOnFlagUntilTimeout+0x10>
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002530:	2300      	movs	r3, #0
          hi2c->State             = HAL_I2C_STATE_READY;
 8002532:	2220      	movs	r2, #32
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002534:	6333      	str	r3, [r6, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002536:	f886 203d 	strb.w	r2, [r6, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800253a:	f886 303e 	strb.w	r3, [r6, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800253e:	6c32      	ldr	r2, [r6, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8002540:	f886 303c 	strb.w	r3, [r6, #60]	@ 0x3c
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002544:	f042 0220 	orr.w	r2, r2, #32
 8002548:	6432      	str	r2, [r6, #64]	@ 0x40
          return HAL_ERROR;
 800254a:	2001      	movs	r0, #1
}
 800254c:	e8bd 86f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r9, sl, pc}

08002550 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8002550:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002554:	4604      	mov	r4, r0
 8002556:	460f      	mov	r7, r1
 8002558:	4616      	mov	r6, r2
 800255a:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800255c:	6825      	ldr	r5, [r4, #0]
 800255e:	6968      	ldr	r0, [r5, #20]
 8002560:	ea27 0000 	bic.w	r0, r7, r0
 8002564:	b280      	uxth	r0, r0
 8002566:	b1c0      	cbz	r0, 800259a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4a>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002568:	696b      	ldr	r3, [r5, #20]
 800256a:	055a      	lsls	r2, r3, #21
 800256c:	d517      	bpl.n	800259e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800256e:	682b      	ldr	r3, [r5, #0]
 8002570:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002574:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002576:	f46f 6380 	mvn.w	r3, #1024	@ 0x400
 800257a:	616b      	str	r3, [r5, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 800257c:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 800257e:	2300      	movs	r3, #0
 8002580:	6323      	str	r3, [r4, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002582:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002586:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800258a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800258c:	f043 0304 	orr.w	r3, r3, #4
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002590:	6423      	str	r3, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8002592:	2300      	movs	r3, #0
 8002594:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
      return HAL_ERROR;
 8002598:	2001      	movs	r0, #1
}
 800259a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 800259e:	1c73      	adds	r3, r6, #1
 80025a0:	d0dd      	beq.n	800255e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025a2:	f7ff fde5 	bl	8002170 <HAL_GetTick>
 80025a6:	eba0 0008 	sub.w	r0, r0, r8
 80025aa:	42b0      	cmp	r0, r6
 80025ac:	d801      	bhi.n	80025b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x62>
 80025ae:	2e00      	cmp	r6, #0
 80025b0:	d1d4      	bne.n	800255c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80025b2:	6823      	ldr	r3, [r4, #0]
 80025b4:	695a      	ldr	r2, [r3, #20]
 80025b6:	ea27 0202 	bic.w	r2, r7, r2
 80025ba:	b292      	uxth	r2, r2
 80025bc:	2a00      	cmp	r2, #0
 80025be:	d0cd      	beq.n	800255c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
          hi2c->PreviousState       = I2C_STATE_NONE;
 80025c0:	2300      	movs	r3, #0
          hi2c->State               = HAL_I2C_STATE_READY;
 80025c2:	2220      	movs	r2, #32
          hi2c->PreviousState       = I2C_STATE_NONE;
 80025c4:	6323      	str	r3, [r4, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80025c6:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025ca:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80025ce:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80025d0:	4313      	orrs	r3, r2
 80025d2:	e7dd      	b.n	8002590 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x40>

080025d4 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 80025d4:	b570      	push	{r4, r5, r6, lr}
 80025d6:	4604      	mov	r4, r0
 80025d8:	460d      	mov	r5, r1
 80025da:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80025dc:	6823      	ldr	r3, [r4, #0]
 80025de:	695b      	ldr	r3, [r3, #20]
 80025e0:	061b      	lsls	r3, r3, #24
 80025e2:	d501      	bpl.n	80025e8 <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;
 80025e4:	2000      	movs	r0, #0
 80025e6:	e01e      	b.n	8002626 <I2C_WaitOnTXEFlagUntilTimeout+0x52>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80025e8:	4620      	mov	r0, r4
 80025ea:	f7ff ff57 	bl	800249c <I2C_IsAcknowledgeFailed>
 80025ee:	b9c8      	cbnz	r0, 8002624 <I2C_WaitOnTXEFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 80025f0:	1c6a      	adds	r2, r5, #1
 80025f2:	d0f3      	beq.n	80025dc <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025f4:	f7ff fdbc 	bl	8002170 <HAL_GetTick>
 80025f8:	1b80      	subs	r0, r0, r6
 80025fa:	42a8      	cmp	r0, r5
 80025fc:	d801      	bhi.n	8002602 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 80025fe:	2d00      	cmp	r5, #0
 8002600:	d1ec      	bne.n	80025dc <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002602:	6823      	ldr	r3, [r4, #0]
 8002604:	695b      	ldr	r3, [r3, #20]
 8002606:	f013 0380 	ands.w	r3, r3, #128	@ 0x80
 800260a:	d1e7      	bne.n	80025dc <I2C_WaitOnTXEFlagUntilTimeout+0x8>
          hi2c->State               = HAL_I2C_STATE_READY;
 800260c:	2220      	movs	r2, #32
          hi2c->PreviousState       = I2C_STATE_NONE;
 800260e:	6323      	str	r3, [r4, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002610:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002614:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002618:	6c22      	ldr	r2, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 800261a:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800261e:	f042 0220 	orr.w	r2, r2, #32
 8002622:	6422      	str	r2, [r4, #64]	@ 0x40
      return HAL_ERROR;
 8002624:	2001      	movs	r0, #1
}
 8002626:	bd70      	pop	{r4, r5, r6, pc}

08002628 <I2C_RequestMemoryWrite>:
{
 8002628:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800262c:	4615      	mov	r5, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800262e:	6802      	ldr	r2, [r0, #0]
{
 8002630:	b085      	sub	sp, #20
 8002632:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	@ 0x30
 8002636:	4699      	mov	r9, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002638:	6813      	ldr	r3, [r2, #0]
 800263a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800263e:	6013      	str	r3, [r2, #0]
{
 8002640:	460e      	mov	r6, r1
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002642:	463b      	mov	r3, r7
 8002644:	f8cd 8000 	str.w	r8, [sp]
 8002648:	2200      	movs	r2, #0
 800264a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
{
 800264e:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002650:	f7ff ff3e 	bl	80024d0 <I2C_WaitOnFlagUntilTimeout>
 8002654:	6823      	ldr	r3, [r4, #0]
 8002656:	b138      	cbz	r0, 8002668 <I2C_RequestMemoryWrite+0x40>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	05db      	lsls	r3, r3, #23
 800265c:	d502      	bpl.n	8002664 <I2C_RequestMemoryWrite+0x3c>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800265e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002662:	6423      	str	r3, [r4, #64]	@ 0x40
    return HAL_TIMEOUT;
 8002664:	2603      	movs	r6, #3
 8002666:	e020      	b.n	80026aa <I2C_RequestMemoryWrite+0x82>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002668:	f006 06fe 	and.w	r6, r6, #254	@ 0xfe
 800266c:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800266e:	491a      	ldr	r1, [pc, #104]	@ (80026d8 <I2C_RequestMemoryWrite+0xb0>)
 8002670:	4643      	mov	r3, r8
 8002672:	463a      	mov	r2, r7
 8002674:	4620      	mov	r0, r4
 8002676:	f7ff ff6b 	bl	8002550 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800267a:	b9a8      	cbnz	r0, 80026a8 <I2C_RequestMemoryWrite+0x80>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800267c:	6823      	ldr	r3, [r4, #0]
 800267e:	9003      	str	r0, [sp, #12]
 8002680:	695a      	ldr	r2, [r3, #20]
 8002682:	9203      	str	r2, [sp, #12]
 8002684:	699b      	ldr	r3, [r3, #24]
 8002686:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002688:	4642      	mov	r2, r8
 800268a:	4639      	mov	r1, r7
 800268c:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800268e:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002690:	f7ff ffa0 	bl	80025d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002694:	4606      	mov	r6, r0
 8002696:	b160      	cbz	r0, 80026b2 <I2C_RequestMemoryWrite+0x8a>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002698:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800269a:	2b04      	cmp	r3, #4
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800269c:	bf01      	itttt	eq
 800269e:	6822      	ldreq	r2, [r4, #0]
 80026a0:	6813      	ldreq	r3, [r2, #0]
 80026a2:	f443 7300 	orreq.w	r3, r3, #512	@ 0x200
 80026a6:	6013      	streq	r3, [r2, #0]
    return HAL_ERROR;
 80026a8:	2601      	movs	r6, #1
}
 80026aa:	4630      	mov	r0, r6
 80026ac:	b005      	add	sp, #20
 80026ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80026b2:	f1b9 0f01 	cmp.w	r9, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026b6:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80026b8:	d102      	bne.n	80026c0 <I2C_RequestMemoryWrite+0x98>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80026ba:	b2ed      	uxtb	r5, r5
 80026bc:	611d      	str	r5, [r3, #16]
 80026be:	e7f4      	b.n	80026aa <I2C_RequestMemoryWrite+0x82>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80026c0:	0a2a      	lsrs	r2, r5, #8
 80026c2:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80026c4:	4639      	mov	r1, r7
 80026c6:	4642      	mov	r2, r8
 80026c8:	4620      	mov	r0, r4
 80026ca:	f7ff ff83 	bl	80025d4 <I2C_WaitOnTXEFlagUntilTimeout>
 80026ce:	2800      	cmp	r0, #0
 80026d0:	d1e2      	bne.n	8002698 <I2C_RequestMemoryWrite+0x70>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80026d2:	6823      	ldr	r3, [r4, #0]
 80026d4:	e7f1      	b.n	80026ba <I2C_RequestMemoryWrite+0x92>
 80026d6:	bf00      	nop
 80026d8:	00010002 	.word	0x00010002

080026dc <I2C_RequestMemoryRead>:
{
 80026dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80026e0:	469a      	mov	sl, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026e2:	6803      	ldr	r3, [r0, #0]
{
 80026e4:	4615      	mov	r5, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80026ec:	601a      	str	r2, [r3, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80026ee:	681a      	ldr	r2, [r3, #0]
{
 80026f0:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	@ 0x30
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80026f4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80026f8:	601a      	str	r2, [r3, #0]
{
 80026fa:	460e      	mov	r6, r1
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80026fc:	463b      	mov	r3, r7
 80026fe:	f8cd 8000 	str.w	r8, [sp]
 8002702:	2200      	movs	r2, #0
 8002704:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
{
 8002708:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800270a:	f7ff fee1 	bl	80024d0 <I2C_WaitOnFlagUntilTimeout>
 800270e:	6823      	ldr	r3, [r4, #0]
 8002710:	b138      	cbz	r0, 8002722 <I2C_RequestMemoryRead+0x46>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002712:	681b      	ldr	r3, [r3, #0]
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002714:	05db      	lsls	r3, r3, #23
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002716:	bf44      	itt	mi
 8002718:	f44f 7300 	movmi.w	r3, #512	@ 0x200
 800271c:	6423      	strmi	r3, [r4, #64]	@ 0x40
    return HAL_TIMEOUT;
 800271e:	2003      	movs	r0, #3
 8002720:	e021      	b.n	8002766 <I2C_RequestMemoryRead+0x8a>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002722:	fa5f f986 	uxtb.w	r9, r6
 8002726:	f006 06fe 	and.w	r6, r6, #254	@ 0xfe
 800272a:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800272c:	492b      	ldr	r1, [pc, #172]	@ (80027dc <I2C_RequestMemoryRead+0x100>)
 800272e:	4643      	mov	r3, r8
 8002730:	463a      	mov	r2, r7
 8002732:	4620      	mov	r0, r4
 8002734:	f7ff ff0c 	bl	8002550 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002738:	b9a0      	cbnz	r0, 8002764 <I2C_RequestMemoryRead+0x88>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800273a:	6823      	ldr	r3, [r4, #0]
 800273c:	9003      	str	r0, [sp, #12]
 800273e:	695a      	ldr	r2, [r3, #20]
 8002740:	9203      	str	r2, [sp, #12]
 8002742:	699b      	ldr	r3, [r3, #24]
 8002744:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002746:	4642      	mov	r2, r8
 8002748:	4639      	mov	r1, r7
 800274a:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800274c:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800274e:	f7ff ff41 	bl	80025d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002752:	b158      	cbz	r0, 800276c <I2C_RequestMemoryRead+0x90>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002754:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002756:	2b04      	cmp	r3, #4
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002758:	bf01      	itttt	eq
 800275a:	6822      	ldreq	r2, [r4, #0]
 800275c:	6813      	ldreq	r3, [r2, #0]
 800275e:	f443 7300 	orreq.w	r3, r3, #512	@ 0x200
 8002762:	6013      	streq	r3, [r2, #0]
    return HAL_ERROR;
 8002764:	2001      	movs	r0, #1
}
 8002766:	b004      	add	sp, #16
 8002768:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800276c:	f1ba 0f01 	cmp.w	sl, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002770:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002772:	d11a      	bne.n	80027aa <I2C_RequestMemoryRead+0xce>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002774:	b2ed      	uxtb	r5, r5
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002776:	4642      	mov	r2, r8
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002778:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800277a:	4639      	mov	r1, r7
 800277c:	4620      	mov	r0, r4
 800277e:	f7ff ff29 	bl	80025d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002782:	4602      	mov	r2, r0
 8002784:	2800      	cmp	r0, #0
 8002786:	d1e5      	bne.n	8002754 <I2C_RequestMemoryRead+0x78>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002788:	6821      	ldr	r1, [r4, #0]
 800278a:	680b      	ldr	r3, [r1, #0]
 800278c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002790:	600b      	str	r3, [r1, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002792:	4620      	mov	r0, r4
 8002794:	f8cd 8000 	str.w	r8, [sp]
 8002798:	463b      	mov	r3, r7
 800279a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800279e:	f7ff fe97 	bl	80024d0 <I2C_WaitOnFlagUntilTimeout>
 80027a2:	6822      	ldr	r2, [r4, #0]
 80027a4:	b160      	cbz	r0, 80027c0 <I2C_RequestMemoryRead+0xe4>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80027a6:	6813      	ldr	r3, [r2, #0]
 80027a8:	e7b4      	b.n	8002714 <I2C_RequestMemoryRead+0x38>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80027aa:	0a2a      	lsrs	r2, r5, #8
 80027ac:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80027ae:	4639      	mov	r1, r7
 80027b0:	4642      	mov	r2, r8
 80027b2:	4620      	mov	r0, r4
 80027b4:	f7ff ff0e 	bl	80025d4 <I2C_WaitOnTXEFlagUntilTimeout>
 80027b8:	2800      	cmp	r0, #0
 80027ba:	d1cb      	bne.n	8002754 <I2C_RequestMemoryRead+0x78>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80027bc:	6823      	ldr	r3, [r4, #0]
 80027be:	e7d9      	b.n	8002774 <I2C_RequestMemoryRead+0x98>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80027c0:	f049 0301 	orr.w	r3, r9, #1
 80027c4:	6113      	str	r3, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80027c6:	4905      	ldr	r1, [pc, #20]	@ (80027dc <I2C_RequestMemoryRead+0x100>)
 80027c8:	4643      	mov	r3, r8
 80027ca:	463a      	mov	r2, r7
 80027cc:	4620      	mov	r0, r4
 80027ce:	f7ff febf 	bl	8002550 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80027d2:	3800      	subs	r0, #0
 80027d4:	bf18      	it	ne
 80027d6:	2001      	movne	r0, #1
 80027d8:	e7c5      	b.n	8002766 <I2C_RequestMemoryRead+0x8a>
 80027da:	bf00      	nop
 80027dc:	00010002 	.word	0x00010002

080027e0 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 80027e0:	b570      	push	{r4, r5, r6, lr}
 80027e2:	4604      	mov	r4, r0
 80027e4:	460d      	mov	r5, r1
 80027e6:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80027e8:	6823      	ldr	r3, [r4, #0]
 80027ea:	695b      	ldr	r3, [r3, #20]
 80027ec:	075b      	lsls	r3, r3, #29
 80027ee:	d501      	bpl.n	80027f4 <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 80027f0:	2000      	movs	r0, #0
 80027f2:	e01e      	b.n	8002832 <I2C_WaitOnBTFFlagUntilTimeout+0x52>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80027f4:	4620      	mov	r0, r4
 80027f6:	f7ff fe51 	bl	800249c <I2C_IsAcknowledgeFailed>
 80027fa:	b9c8      	cbnz	r0, 8002830 <I2C_WaitOnBTFFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 80027fc:	1c6a      	adds	r2, r5, #1
 80027fe:	d0f3      	beq.n	80027e8 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002800:	f7ff fcb6 	bl	8002170 <HAL_GetTick>
 8002804:	1b80      	subs	r0, r0, r6
 8002806:	42a8      	cmp	r0, r5
 8002808:	d801      	bhi.n	800280e <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 800280a:	2d00      	cmp	r5, #0
 800280c:	d1ec      	bne.n	80027e8 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800280e:	6823      	ldr	r3, [r4, #0]
 8002810:	695b      	ldr	r3, [r3, #20]
 8002812:	f013 0304 	ands.w	r3, r3, #4
 8002816:	d1e7      	bne.n	80027e8 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
          hi2c->State               = HAL_I2C_STATE_READY;
 8002818:	2220      	movs	r2, #32
          hi2c->PreviousState       = I2C_STATE_NONE;
 800281a:	6323      	str	r3, [r4, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800281c:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002820:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002824:	6c22      	ldr	r2, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8002826:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800282a:	f042 0220 	orr.w	r2, r2, #32
 800282e:	6422      	str	r2, [r4, #64]	@ 0x40
      return HAL_ERROR;
 8002830:	2001      	movs	r0, #1
}
 8002832:	bd70      	pop	{r4, r5, r6, pc}

08002834 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8002834:	b570      	push	{r4, r5, r6, lr}
 8002836:	4604      	mov	r4, r0
 8002838:	460d      	mov	r5, r1
 800283a:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800283c:	6821      	ldr	r1, [r4, #0]
 800283e:	694b      	ldr	r3, [r1, #20]
 8002840:	f013 0340 	ands.w	r3, r3, #64	@ 0x40
 8002844:	d001      	beq.n	800284a <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
  return HAL_OK;
 8002846:	2000      	movs	r0, #0
 8002848:	e011      	b.n	800286e <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800284a:	694a      	ldr	r2, [r1, #20]
 800284c:	06d2      	lsls	r2, r2, #27
 800284e:	d50f      	bpl.n	8002870 <I2C_WaitOnRXNEFlagUntilTimeout+0x3c>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002850:	f06f 0210 	mvn.w	r2, #16
 8002854:	614a      	str	r2, [r1, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 8002856:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002858:	6323      	str	r3, [r4, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800285a:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800285e:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002862:	6c23      	ldr	r3, [r4, #64]	@ 0x40
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002864:	6423      	str	r3, [r4, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8002866:	2300      	movs	r3, #0
 8002868:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
      return HAL_ERROR;
 800286c:	2001      	movs	r0, #1
}
 800286e:	bd70      	pop	{r4, r5, r6, pc}
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002870:	f7ff fc7e 	bl	8002170 <HAL_GetTick>
 8002874:	1b80      	subs	r0, r0, r6
 8002876:	42a8      	cmp	r0, r5
 8002878:	d801      	bhi.n	800287e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800287a:	2d00      	cmp	r5, #0
 800287c:	d1de      	bne.n	800283c <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800287e:	6823      	ldr	r3, [r4, #0]
 8002880:	695b      	ldr	r3, [r3, #20]
 8002882:	f013 0340 	ands.w	r3, r3, #64	@ 0x40
 8002886:	d1d9      	bne.n	800283c <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
        hi2c->State               = HAL_I2C_STATE_READY;
 8002888:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 800288a:	6323      	str	r3, [r4, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800288c:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002890:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002894:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002896:	4313      	orrs	r3, r2
 8002898:	e7e4      	b.n	8002864 <I2C_WaitOnRXNEFlagUntilTimeout+0x30>
	...

0800289c <HAL_I2C_Init>:
{
 800289c:	b570      	push	{r4, r5, r6, lr}
  if (hi2c == NULL)
 800289e:	4604      	mov	r4, r0
 80028a0:	b908      	cbnz	r0, 80028a6 <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 80028a2:	2001      	movs	r0, #1
}
 80028a4:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80028a6:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80028aa:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80028ae:	b91b      	cbnz	r3, 80028b8 <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 80028b0:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_I2C_MspInit(hi2c);
 80028b4:	f7fe fbb4 	bl	8001020 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80028b8:	2324      	movs	r3, #36	@ 0x24
 80028ba:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_I2C_DISABLE(hi2c);
 80028be:	6823      	ldr	r3, [r4, #0]
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	f022 0201 	bic.w	r2, r2, #1
 80028c6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80028ce:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80028d6:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80028d8:	f000 fc9e 	bl	8003218 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80028dc:	4b3f      	ldr	r3, [pc, #252]	@ (80029dc <HAL_I2C_Init+0x140>)
 80028de:	6865      	ldr	r5, [r4, #4]
 80028e0:	429d      	cmp	r5, r3
 80028e2:	bf94      	ite	ls
 80028e4:	4b3e      	ldrls	r3, [pc, #248]	@ (80029e0 <HAL_I2C_Init+0x144>)
 80028e6:	4b3f      	ldrhi	r3, [pc, #252]	@ (80029e4 <HAL_I2C_Init+0x148>)
 80028e8:	4298      	cmp	r0, r3
 80028ea:	bf8c      	ite	hi
 80028ec:	2300      	movhi	r3, #0
 80028ee:	2301      	movls	r3, #1
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d1d6      	bne.n	80028a2 <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80028f4:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80028f6:	4e39      	ldr	r6, [pc, #228]	@ (80029dc <HAL_I2C_Init+0x140>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80028f8:	6851      	ldr	r1, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 80028fa:	4b3b      	ldr	r3, [pc, #236]	@ (80029e8 <HAL_I2C_Init+0x14c>)
 80028fc:	fbb0 f3f3 	udiv	r3, r0, r3
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002900:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 8002904:	4319      	orrs	r1, r3
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002906:	42b5      	cmp	r5, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002908:	6051      	str	r1, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800290a:	bf88      	it	hi
 800290c:	f44f 7696 	movhi.w	r6, #300	@ 0x12c
 8002910:	6a11      	ldr	r1, [r2, #32]
 8002912:	bf88      	it	hi
 8002914:	4373      	mulhi	r3, r6
 8002916:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 800291a:	bf84      	itt	hi
 800291c:	f44f 767a 	movhi.w	r6, #1000	@ 0x3e8
 8002920:	fbb3 f3f6 	udivhi	r3, r3, r6
 8002924:	3301      	adds	r3, #1
 8002926:	430b      	orrs	r3, r1
 8002928:	6213      	str	r3, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800292a:	69d1      	ldr	r1, [r2, #28]
 800292c:	1e43      	subs	r3, r0, #1
 800292e:	482b      	ldr	r0, [pc, #172]	@ (80029dc <HAL_I2C_Init+0x140>)
 8002930:	f421 414f 	bic.w	r1, r1, #52992	@ 0xcf00
 8002934:	4285      	cmp	r5, r0
 8002936:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 800293a:	d832      	bhi.n	80029a2 <HAL_I2C_Init+0x106>
 800293c:	006d      	lsls	r5, r5, #1
 800293e:	f640 70fc 	movw	r0, #4092	@ 0xffc
 8002942:	fbb3 f3f5 	udiv	r3, r3, r5
 8002946:	3301      	adds	r3, #1
 8002948:	4203      	tst	r3, r0
 800294a:	d042      	beq.n	80029d2 <HAL_I2C_Init+0x136>
 800294c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002950:	4319      	orrs	r1, r3
 8002952:	61d1      	str	r1, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002954:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 8002958:	6811      	ldr	r1, [r2, #0]
 800295a:	4303      	orrs	r3, r0
 800295c:	f021 01c0 	bic.w	r1, r1, #192	@ 0xc0
 8002960:	430b      	orrs	r3, r1
 8002962:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002964:	6891      	ldr	r1, [r2, #8]
 8002966:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 800296a:	f421 4103 	bic.w	r1, r1, #33536	@ 0x8300
 800296e:	4303      	orrs	r3, r0
 8002970:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 8002974:	430b      	orrs	r3, r1
 8002976:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002978:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 800297c:	68d1      	ldr	r1, [r2, #12]
 800297e:	4303      	orrs	r3, r0
 8002980:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 8002984:	430b      	orrs	r3, r1
 8002986:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 8002988:	6813      	ldr	r3, [r2, #0]
 800298a:	f043 0301 	orr.w	r3, r3, #1
 800298e:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002990:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8002992:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002994:	6420      	str	r0, [r4, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002996:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800299a:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800299c:	f884 003e 	strb.w	r0, [r4, #62]	@ 0x3e
  return HAL_OK;
 80029a0:	e780      	b.n	80028a4 <HAL_I2C_Init+0x8>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80029a2:	68a0      	ldr	r0, [r4, #8]
 80029a4:	b950      	cbnz	r0, 80029bc <HAL_I2C_Init+0x120>
 80029a6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80029aa:	fbb3 f3f5 	udiv	r3, r3, r5
 80029ae:	3301      	adds	r3, #1
 80029b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029b4:	b17b      	cbz	r3, 80029d6 <HAL_I2C_Init+0x13a>
 80029b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80029ba:	e7c9      	b.n	8002950 <HAL_I2C_Init+0xb4>
 80029bc:	2019      	movs	r0, #25
 80029be:	4368      	muls	r0, r5
 80029c0:	fbb3 f3f0 	udiv	r3, r3, r0
 80029c4:	3301      	adds	r3, #1
 80029c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029ca:	b123      	cbz	r3, 80029d6 <HAL_I2C_Init+0x13a>
 80029cc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80029d0:	e7be      	b.n	8002950 <HAL_I2C_Init+0xb4>
 80029d2:	2304      	movs	r3, #4
 80029d4:	e7bc      	b.n	8002950 <HAL_I2C_Init+0xb4>
 80029d6:	2301      	movs	r3, #1
 80029d8:	e7ba      	b.n	8002950 <HAL_I2C_Init+0xb4>
 80029da:	bf00      	nop
 80029dc:	000186a0 	.word	0x000186a0
 80029e0:	001e847f 	.word	0x001e847f
 80029e4:	003d08ff 	.word	0x003d08ff
 80029e8:	000f4240 	.word	0x000f4240

080029ec <HAL_I2C_Mem_Write>:
{
 80029ec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80029f0:	4604      	mov	r4, r0
 80029f2:	4699      	mov	r9, r3
 80029f4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80029f6:	460f      	mov	r7, r1
 80029f8:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 80029fa:	f7ff fbb9 	bl	8002170 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80029fe:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
 8002a02:	2b20      	cmp	r3, #32
  uint32_t tickstart = HAL_GetTick();
 8002a04:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a06:	d003      	beq.n	8002a10 <HAL_I2C_Mem_Write+0x24>
      return HAL_BUSY;
 8002a08:	2002      	movs	r0, #2
}
 8002a0a:	b003      	add	sp, #12
 8002a0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a10:	9000      	str	r0, [sp, #0]
 8002a12:	493c      	ldr	r1, [pc, #240]	@ (8002b04 <HAL_I2C_Mem_Write+0x118>)
 8002a14:	2319      	movs	r3, #25
 8002a16:	2201      	movs	r2, #1
 8002a18:	4620      	mov	r0, r4
 8002a1a:	f7ff fd59 	bl	80024d0 <I2C_WaitOnFlagUntilTimeout>
 8002a1e:	2800      	cmp	r0, #0
 8002a20:	d1f2      	bne.n	8002a08 <HAL_I2C_Mem_Write+0x1c>
    __HAL_LOCK(hi2c);
 8002a22:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 8002a26:	2b01      	cmp	r3, #1
 8002a28:	d0ee      	beq.n	8002a08 <HAL_I2C_Mem_Write+0x1c>
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a2a:	6820      	ldr	r0, [r4, #0]
    __HAL_LOCK(hi2c);
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a32:	6803      	ldr	r3, [r0, #0]
 8002a34:	07d9      	lsls	r1, r3, #31
      __HAL_I2C_ENABLE(hi2c);
 8002a36:	bf5e      	ittt	pl
 8002a38:	6803      	ldrpl	r3, [r0, #0]
 8002a3a:	f043 0301 	orrpl.w	r3, r3, #1
 8002a3e:	6003      	strpl	r3, [r0, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a40:	6803      	ldr	r3, [r0, #0]
 8002a42:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002a46:	6003      	str	r3, [r0, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002a48:	2321      	movs	r3, #33	@ 0x21
 8002a4a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002a4e:	2340      	movs	r3, #64	@ 0x40
 8002a50:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a54:	2300      	movs	r3, #0
 8002a56:	6423      	str	r3, [r4, #64]	@ 0x40
    hi2c->pBuffPtr    = pData;
 8002a58:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8002a5a:	6263      	str	r3, [r4, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002a5c:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 8002a60:	8563      	strh	r3, [r4, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002a62:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002a64:	8523      	strh	r3, [r4, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a66:	4b28      	ldr	r3, [pc, #160]	@ (8002b08 <HAL_I2C_Mem_Write+0x11c>)
 8002a68:	62e3      	str	r3, [r4, #44]	@ 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002a6a:	4642      	mov	r2, r8
 8002a6c:	e9cd 6500 	strd	r6, r5, [sp]
 8002a70:	464b      	mov	r3, r9
 8002a72:	4639      	mov	r1, r7
 8002a74:	4620      	mov	r0, r4
 8002a76:	f7ff fdd7 	bl	8002628 <I2C_RequestMemoryWrite>
 8002a7a:	2800      	cmp	r0, #0
 8002a7c:	d02a      	beq.n	8002ad4 <HAL_I2C_Mem_Write+0xe8>
      return HAL_ERROR;
 8002a7e:	2001      	movs	r0, #1
 8002a80:	e7c3      	b.n	8002a0a <HAL_I2C_Mem_Write+0x1e>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a82:	f7ff fda7 	bl	80025d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a86:	b140      	cbz	r0, 8002a9a <HAL_I2C_Mem_Write+0xae>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a88:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002a8a:	2b04      	cmp	r3, #4
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a8c:	bf01      	itttt	eq
 8002a8e:	6822      	ldreq	r2, [r4, #0]
 8002a90:	6813      	ldreq	r3, [r2, #0]
 8002a92:	f443 7300 	orreq.w	r3, r3, #512	@ 0x200
 8002a96:	6013      	streq	r3, [r2, #0]
 8002a98:	e7f1      	b.n	8002a7e <HAL_I2C_Mem_Write+0x92>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a9a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002a9c:	6827      	ldr	r7, [r4, #0]
 8002a9e:	461a      	mov	r2, r3
 8002aa0:	f812 1b01 	ldrb.w	r1, [r2], #1
 8002aa4:	6139      	str	r1, [r7, #16]
      hi2c->pBuffPtr++;
 8002aa6:	6262      	str	r2, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8002aa8:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8002aaa:	8d21      	ldrh	r1, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 8002aac:	3a01      	subs	r2, #1
 8002aae:	b292      	uxth	r2, r2
 8002ab0:	8562      	strh	r2, [r4, #42]	@ 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002ab2:	697a      	ldr	r2, [r7, #20]
      hi2c->XferSize--;
 8002ab4:	1e48      	subs	r0, r1, #1
 8002ab6:	b280      	uxth	r0, r0
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002ab8:	0752      	lsls	r2, r2, #29
      hi2c->XferSize--;
 8002aba:	8520      	strh	r0, [r4, #40]	@ 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002abc:	d50a      	bpl.n	8002ad4 <HAL_I2C_Mem_Write+0xe8>
 8002abe:	b148      	cbz	r0, 8002ad4 <HAL_I2C_Mem_Write+0xe8>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ac0:	785a      	ldrb	r2, [r3, #1]
 8002ac2:	613a      	str	r2, [r7, #16]
        hi2c->pBuffPtr++;
 8002ac4:	3302      	adds	r3, #2
 8002ac6:	6263      	str	r3, [r4, #36]	@ 0x24
        hi2c->XferCount--;
 8002ac8:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002aca:	3b01      	subs	r3, #1
        hi2c->XferSize--;
 8002acc:	3902      	subs	r1, #2
        hi2c->XferCount--;
 8002ace:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 8002ad0:	8521      	strh	r1, [r4, #40]	@ 0x28
        hi2c->XferCount--;
 8002ad2:	8563      	strh	r3, [r4, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002ad4:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ad6:	462a      	mov	r2, r5
 8002ad8:	4631      	mov	r1, r6
 8002ada:	4620      	mov	r0, r4
    while (hi2c->XferSize > 0U)
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d1d0      	bne.n	8002a82 <HAL_I2C_Mem_Write+0x96>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ae0:	f7ff fe7e 	bl	80027e0 <I2C_WaitOnBTFFlagUntilTimeout>
 8002ae4:	2800      	cmp	r0, #0
 8002ae6:	d1cf      	bne.n	8002a88 <HAL_I2C_Mem_Write+0x9c>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ae8:	6822      	ldr	r2, [r4, #0]
 8002aea:	6813      	ldr	r3, [r2, #0]
 8002aec:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002af0:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8002af2:	2320      	movs	r3, #32
 8002af4:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    __HAL_UNLOCK(hi2c);
 8002af8:	f884 003c 	strb.w	r0, [r4, #60]	@ 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002afc:	f884 003e 	strb.w	r0, [r4, #62]	@ 0x3e
    return HAL_OK;
 8002b00:	e783      	b.n	8002a0a <HAL_I2C_Mem_Write+0x1e>
 8002b02:	bf00      	nop
 8002b04:	00100002 	.word	0x00100002
 8002b08:	ffff0000 	.word	0xffff0000

08002b0c <HAL_I2C_Mem_Read>:
{
 8002b0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002b10:	4604      	mov	r4, r0
 8002b12:	b087      	sub	sp, #28
 8002b14:	4699      	mov	r9, r3
 8002b16:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8002b18:	460d      	mov	r5, r1
 8002b1a:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 8002b1c:	f7ff fb28 	bl	8002170 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b20:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
 8002b24:	2b20      	cmp	r3, #32
  uint32_t tickstart = HAL_GetTick();
 8002b26:	4606      	mov	r6, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b28:	d004      	beq.n	8002b34 <HAL_I2C_Mem_Read+0x28>
      return HAL_BUSY;
 8002b2a:	2502      	movs	r5, #2
}
 8002b2c:	4628      	mov	r0, r5
 8002b2e:	b007      	add	sp, #28
 8002b30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b34:	9000      	str	r0, [sp, #0]
 8002b36:	497a      	ldr	r1, [pc, #488]	@ (8002d20 <HAL_I2C_Mem_Read+0x214>)
 8002b38:	2319      	movs	r3, #25
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	4620      	mov	r0, r4
 8002b3e:	f7ff fcc7 	bl	80024d0 <I2C_WaitOnFlagUntilTimeout>
 8002b42:	2800      	cmp	r0, #0
 8002b44:	d1f1      	bne.n	8002b2a <HAL_I2C_Mem_Read+0x1e>
    __HAL_LOCK(hi2c);
 8002b46:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 8002b4a:	2b01      	cmp	r3, #1
 8002b4c:	d0ed      	beq.n	8002b2a <HAL_I2C_Mem_Read+0x1e>
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b4e:	6820      	ldr	r0, [r4, #0]
    __HAL_LOCK(hi2c);
 8002b50:	2301      	movs	r3, #1
 8002b52:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b56:	6803      	ldr	r3, [r0, #0]
 8002b58:	07db      	lsls	r3, r3, #31
      __HAL_I2C_ENABLE(hi2c);
 8002b5a:	bf5e      	ittt	pl
 8002b5c:	6803      	ldrpl	r3, [r0, #0]
 8002b5e:	f043 0301 	orrpl.w	r3, r3, #1
 8002b62:	6003      	strpl	r3, [r0, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b64:	6803      	ldr	r3, [r0, #0]
 8002b66:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002b6a:	6003      	str	r3, [r0, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002b6c:	2322      	movs	r3, #34	@ 0x22
 8002b6e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002b72:	2340      	movs	r3, #64	@ 0x40
 8002b74:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	6423      	str	r3, [r4, #64]	@ 0x40
    hi2c->pBuffPtr    = pData;
 8002b7c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8002b7e:	6263      	str	r3, [r4, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002b80:	f8bd 303c 	ldrh.w	r3, [sp, #60]	@ 0x3c
 8002b84:	8563      	strh	r3, [r4, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002b86:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002b88:	8523      	strh	r3, [r4, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b8a:	4b66      	ldr	r3, [pc, #408]	@ (8002d24 <HAL_I2C_Mem_Read+0x218>)
 8002b8c:	62e3      	str	r3, [r4, #44]	@ 0x2c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002b8e:	4629      	mov	r1, r5
 8002b90:	e9cd 7600 	strd	r7, r6, [sp]
 8002b94:	464b      	mov	r3, r9
 8002b96:	4642      	mov	r2, r8
 8002b98:	4620      	mov	r0, r4
 8002b9a:	f7ff fd9f 	bl	80026dc <I2C_RequestMemoryRead>
 8002b9e:	4605      	mov	r5, r0
 8002ba0:	b108      	cbz	r0, 8002ba6 <HAL_I2C_Mem_Read+0x9a>
      return HAL_ERROR;
 8002ba2:	2501      	movs	r5, #1
 8002ba4:	e7c2      	b.n	8002b2c <HAL_I2C_Mem_Read+0x20>
    if (hi2c->XferSize == 0U)
 8002ba6:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ba8:	6823      	ldr	r3, [r4, #0]
    if (hi2c->XferSize == 0U)
 8002baa:	b9b2      	cbnz	r2, 8002bda <HAL_I2C_Mem_Read+0xce>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bac:	9002      	str	r0, [sp, #8]
 8002bae:	695a      	ldr	r2, [r3, #20]
 8002bb0:	9202      	str	r2, [sp, #8]
 8002bb2:	699a      	ldr	r2, [r3, #24]
 8002bb4:	9202      	str	r2, [sp, #8]
 8002bb6:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bb8:	681a      	ldr	r2, [r3, #0]
 8002bba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002bbe:	601a      	str	r2, [r3, #0]
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002bc0:	f8df 8164 	ldr.w	r8, [pc, #356]	@ 8002d28 <HAL_I2C_Mem_Read+0x21c>
    while (hi2c->XferSize > 0U)
 8002bc4:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d12c      	bne.n	8002c24 <HAL_I2C_Mem_Read+0x118>
    hi2c->State = HAL_I2C_STATE_READY;
 8002bca:	2220      	movs	r2, #32
 8002bcc:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
    __HAL_UNLOCK(hi2c);
 8002bd0:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bd4:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    return HAL_OK;
 8002bd8:	e7a8      	b.n	8002b2c <HAL_I2C_Mem_Read+0x20>
    else if (hi2c->XferSize == 1U)
 8002bda:	2a01      	cmp	r2, #1
 8002bdc:	d10a      	bne.n	8002bf4 <HAL_I2C_Mem_Read+0xe8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bde:	681a      	ldr	r2, [r3, #0]
 8002be0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002be4:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002be6:	9003      	str	r0, [sp, #12]
 8002be8:	695a      	ldr	r2, [r3, #20]
 8002bea:	9203      	str	r2, [sp, #12]
 8002bec:	699a      	ldr	r2, [r3, #24]
 8002bee:	9203      	str	r2, [sp, #12]
 8002bf0:	9a03      	ldr	r2, [sp, #12]
 8002bf2:	e7e1      	b.n	8002bb8 <HAL_I2C_Mem_Read+0xac>
    else if (hi2c->XferSize == 2U)
 8002bf4:	2a02      	cmp	r2, #2
 8002bf6:	d10e      	bne.n	8002c16 <HAL_I2C_Mem_Read+0x10a>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002bfe:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002c06:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c08:	9004      	str	r0, [sp, #16]
 8002c0a:	695a      	ldr	r2, [r3, #20]
 8002c0c:	9204      	str	r2, [sp, #16]
 8002c0e:	699b      	ldr	r3, [r3, #24]
 8002c10:	9304      	str	r3, [sp, #16]
 8002c12:	9b04      	ldr	r3, [sp, #16]
 8002c14:	e7d4      	b.n	8002bc0 <HAL_I2C_Mem_Read+0xb4>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c16:	9005      	str	r0, [sp, #20]
 8002c18:	695a      	ldr	r2, [r3, #20]
 8002c1a:	9205      	str	r2, [sp, #20]
 8002c1c:	699b      	ldr	r3, [r3, #24]
 8002c1e:	9305      	str	r3, [sp, #20]
 8002c20:	9b05      	ldr	r3, [sp, #20]
 8002c22:	e7cd      	b.n	8002bc0 <HAL_I2C_Mem_Read+0xb4>
      if (hi2c->XferSize <= 3U)
 8002c24:	2b03      	cmp	r3, #3
 8002c26:	d856      	bhi.n	8002cd6 <HAL_I2C_Mem_Read+0x1ca>
        if (hi2c->XferSize == 1U)
 8002c28:	2b01      	cmp	r3, #1
 8002c2a:	d115      	bne.n	8002c58 <HAL_I2C_Mem_Read+0x14c>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c2c:	4632      	mov	r2, r6
 8002c2e:	4639      	mov	r1, r7
 8002c30:	4620      	mov	r0, r4
 8002c32:	f7ff fdff 	bl	8002834 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002c36:	2800      	cmp	r0, #0
 8002c38:	d1b3      	bne.n	8002ba2 <HAL_I2C_Mem_Read+0x96>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c3a:	6823      	ldr	r3, [r4, #0]
 8002c3c:	691a      	ldr	r2, [r3, #16]
 8002c3e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002c40:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8002c42:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002c44:	3301      	adds	r3, #1
 8002c46:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 8002c48:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8002c4a:	3b01      	subs	r3, #1
 8002c4c:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 8002c4e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002c50:	3b01      	subs	r3, #1
 8002c52:	b29b      	uxth	r3, r3
 8002c54:	8563      	strh	r3, [r4, #42]	@ 0x2a
 8002c56:	e7b5      	b.n	8002bc4 <HAL_I2C_Mem_Read+0xb8>
        else if (hi2c->XferSize == 2U)
 8002c58:	2b02      	cmp	r3, #2
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002c5a:	9600      	str	r6, [sp, #0]
 8002c5c:	463b      	mov	r3, r7
 8002c5e:	f04f 0200 	mov.w	r2, #0
 8002c62:	4641      	mov	r1, r8
 8002c64:	4620      	mov	r0, r4
        else if (hi2c->XferSize == 2U)
 8002c66:	d119      	bne.n	8002c9c <HAL_I2C_Mem_Read+0x190>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002c68:	f7ff fc32 	bl	80024d0 <I2C_WaitOnFlagUntilTimeout>
 8002c6c:	2800      	cmp	r0, #0
 8002c6e:	d198      	bne.n	8002ba2 <HAL_I2C_Mem_Read+0x96>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c70:	6823      	ldr	r3, [r4, #0]
 8002c72:	681a      	ldr	r2, [r3, #0]
 8002c74:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c78:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c7a:	691a      	ldr	r2, [r3, #16]
 8002c7c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002c7e:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8002c80:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8002c82:	1c53      	adds	r3, r2, #1
 8002c84:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 8002c86:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8002c88:	3b01      	subs	r3, #1
 8002c8a:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 8002c8c:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002c8e:	3b01      	subs	r3, #1
 8002c90:	b29b      	uxth	r3, r3
 8002c92:	8563      	strh	r3, [r4, #42]	@ 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c94:	6823      	ldr	r3, [r4, #0]
 8002c96:	691b      	ldr	r3, [r3, #16]
 8002c98:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 8002c9a:	e7d2      	b.n	8002c42 <HAL_I2C_Mem_Read+0x136>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002c9c:	f7ff fc18 	bl	80024d0 <I2C_WaitOnFlagUntilTimeout>
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	2800      	cmp	r0, #0
 8002ca4:	f47f af7d 	bne.w	8002ba2 <HAL_I2C_Mem_Read+0x96>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ca8:	6823      	ldr	r3, [r4, #0]
 8002caa:	6819      	ldr	r1, [r3, #0]
 8002cac:	f421 6180 	bic.w	r1, r1, #1024	@ 0x400
 8002cb0:	6019      	str	r1, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cb2:	6919      	ldr	r1, [r3, #16]
 8002cb4:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002cb6:	7019      	strb	r1, [r3, #0]
          hi2c->pBuffPtr++;
 8002cb8:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002cba:	3301      	adds	r3, #1
 8002cbc:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 8002cbe:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8002cc0:	3b01      	subs	r3, #1
 8002cc2:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 8002cc4:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002cc6:	3b01      	subs	r3, #1
 8002cc8:	b29b      	uxth	r3, r3
 8002cca:	8563      	strh	r3, [r4, #42]	@ 0x2a
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002ccc:	4641      	mov	r1, r8
 8002cce:	9600      	str	r6, [sp, #0]
 8002cd0:	463b      	mov	r3, r7
 8002cd2:	4620      	mov	r0, r4
 8002cd4:	e7c8      	b.n	8002c68 <HAL_I2C_Mem_Read+0x15c>
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cd6:	4632      	mov	r2, r6
 8002cd8:	4639      	mov	r1, r7
 8002cda:	4620      	mov	r0, r4
 8002cdc:	f7ff fdaa 	bl	8002834 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002ce0:	2800      	cmp	r0, #0
 8002ce2:	f47f af5e 	bne.w	8002ba2 <HAL_I2C_Mem_Read+0x96>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ce6:	6823      	ldr	r3, [r4, #0]
 8002ce8:	691a      	ldr	r2, [r3, #16]
 8002cea:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002cec:	701a      	strb	r2, [r3, #0]
        hi2c->XferCount--;
 8002cee:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
        hi2c->pBuffPtr++;
 8002cf0:	6a61      	ldr	r1, [r4, #36]	@ 0x24
        hi2c->XferCount--;
 8002cf2:	3a01      	subs	r2, #1
 8002cf4:	b292      	uxth	r2, r2
        hi2c->pBuffPtr++;
 8002cf6:	1c4b      	adds	r3, r1, #1
        hi2c->XferCount--;
 8002cf8:	8562      	strh	r2, [r4, #42]	@ 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002cfa:	6822      	ldr	r2, [r4, #0]
        hi2c->pBuffPtr++;
 8002cfc:	6263      	str	r3, [r4, #36]	@ 0x24
        hi2c->XferSize--;
 8002cfe:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002d00:	6950      	ldr	r0, [r2, #20]
        hi2c->XferSize--;
 8002d02:	3b01      	subs	r3, #1
 8002d04:	b29b      	uxth	r3, r3
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002d06:	0740      	lsls	r0, r0, #29
        hi2c->XferSize--;
 8002d08:	8523      	strh	r3, [r4, #40]	@ 0x28
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002d0a:	f57f af5b 	bpl.w	8002bc4 <HAL_I2C_Mem_Read+0xb8>
          if (hi2c->XferSize == 3U)
 8002d0e:	2b03      	cmp	r3, #3
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d10:	bf02      	ittt	eq
 8002d12:	6813      	ldreq	r3, [r2, #0]
 8002d14:	f423 6380 	biceq.w	r3, r3, #1024	@ 0x400
 8002d18:	6013      	streq	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d1a:	6913      	ldr	r3, [r2, #16]
 8002d1c:	704b      	strb	r3, [r1, #1]
 8002d1e:	e790      	b.n	8002c42 <HAL_I2C_Mem_Read+0x136>
 8002d20:	00100002 	.word	0x00100002
 8002d24:	ffff0000 	.word	0xffff0000
 8002d28:	00010004 	.word	0x00010004

08002d2c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d2c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d30:	4604      	mov	r4, r0
 8002d32:	b340      	cbz	r0, 8002d86 <HAL_RCC_OscConfig+0x5a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d34:	6803      	ldr	r3, [r0, #0]
 8002d36:	07de      	lsls	r6, r3, #31
 8002d38:	d410      	bmi.n	8002d5c <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d3a:	6823      	ldr	r3, [r4, #0]
 8002d3c:	079d      	lsls	r5, r3, #30
 8002d3e:	d45b      	bmi.n	8002df8 <HAL_RCC_OscConfig+0xcc>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d40:	6823      	ldr	r3, [r4, #0]
 8002d42:	0719      	lsls	r1, r3, #28
 8002d44:	f100 809d 	bmi.w	8002e82 <HAL_RCC_OscConfig+0x156>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d48:	6823      	ldr	r3, [r4, #0]
 8002d4a:	075a      	lsls	r2, r3, #29
 8002d4c:	f100 80bd 	bmi.w	8002eca <HAL_RCC_OscConfig+0x19e>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d50:	69a3      	ldr	r3, [r4, #24]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	f040 8124 	bne.w	8002fa0 <HAL_RCC_OscConfig+0x274>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8002d58:	2000      	movs	r0, #0
 8002d5a:	e02c      	b.n	8002db6 <HAL_RCC_OscConfig+0x8a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002d5c:	4b8d      	ldr	r3, [pc, #564]	@ (8002f94 <HAL_RCC_OscConfig+0x268>)
 8002d5e:	689a      	ldr	r2, [r3, #8]
 8002d60:	f002 020c 	and.w	r2, r2, #12
 8002d64:	2a04      	cmp	r2, #4
 8002d66:	d007      	beq.n	8002d78 <HAL_RCC_OscConfig+0x4c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d68:	689a      	ldr	r2, [r3, #8]
 8002d6a:	f002 020c 	and.w	r2, r2, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002d6e:	2a08      	cmp	r2, #8
 8002d70:	d10b      	bne.n	8002d8a <HAL_RCC_OscConfig+0x5e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	0259      	lsls	r1, r3, #9
 8002d76:	d508      	bpl.n	8002d8a <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d78:	4b86      	ldr	r3, [pc, #536]	@ (8002f94 <HAL_RCC_OscConfig+0x268>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	039a      	lsls	r2, r3, #14
 8002d7e:	d5dc      	bpl.n	8002d3a <HAL_RCC_OscConfig+0xe>
 8002d80:	6863      	ldr	r3, [r4, #4]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d1d9      	bne.n	8002d3a <HAL_RCC_OscConfig+0xe>
    return HAL_ERROR;
 8002d86:	2001      	movs	r0, #1
 8002d88:	e015      	b.n	8002db6 <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d8a:	6863      	ldr	r3, [r4, #4]
 8002d8c:	4d81      	ldr	r5, [pc, #516]	@ (8002f94 <HAL_RCC_OscConfig+0x268>)
 8002d8e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d92:	d113      	bne.n	8002dbc <HAL_RCC_OscConfig+0x90>
 8002d94:	682b      	ldr	r3, [r5, #0]
 8002d96:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d9a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002d9c:	f7ff f9e8 	bl	8002170 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002da0:	4e7c      	ldr	r6, [pc, #496]	@ (8002f94 <HAL_RCC_OscConfig+0x268>)
        tickstart = HAL_GetTick();
 8002da2:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002da4:	6833      	ldr	r3, [r6, #0]
 8002da6:	039b      	lsls	r3, r3, #14
 8002da8:	d4c7      	bmi.n	8002d3a <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002daa:	f7ff f9e1 	bl	8002170 <HAL_GetTick>
 8002dae:	1b40      	subs	r0, r0, r5
 8002db0:	2864      	cmp	r0, #100	@ 0x64
 8002db2:	d9f7      	bls.n	8002da4 <HAL_RCC_OscConfig+0x78>
            return HAL_TIMEOUT;
 8002db4:	2003      	movs	r0, #3
}
 8002db6:	b002      	add	sp, #8
 8002db8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002dbc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002dc0:	d104      	bne.n	8002dcc <HAL_RCC_OscConfig+0xa0>
 8002dc2:	682b      	ldr	r3, [r5, #0]
 8002dc4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002dc8:	602b      	str	r3, [r5, #0]
 8002dca:	e7e3      	b.n	8002d94 <HAL_RCC_OscConfig+0x68>
 8002dcc:	682a      	ldr	r2, [r5, #0]
 8002dce:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002dd2:	602a      	str	r2, [r5, #0]
 8002dd4:	682a      	ldr	r2, [r5, #0]
 8002dd6:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002dda:	602a      	str	r2, [r5, #0]
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d1dd      	bne.n	8002d9c <HAL_RCC_OscConfig+0x70>
        tickstart = HAL_GetTick();
 8002de0:	f7ff f9c6 	bl	8002170 <HAL_GetTick>
 8002de4:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002de6:	682b      	ldr	r3, [r5, #0]
 8002de8:	039f      	lsls	r7, r3, #14
 8002dea:	d5a6      	bpl.n	8002d3a <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002dec:	f7ff f9c0 	bl	8002170 <HAL_GetTick>
 8002df0:	1b80      	subs	r0, r0, r6
 8002df2:	2864      	cmp	r0, #100	@ 0x64
 8002df4:	d9f7      	bls.n	8002de6 <HAL_RCC_OscConfig+0xba>
 8002df6:	e7dd      	b.n	8002db4 <HAL_RCC_OscConfig+0x88>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002df8:	4b66      	ldr	r3, [pc, #408]	@ (8002f94 <HAL_RCC_OscConfig+0x268>)
 8002dfa:	689a      	ldr	r2, [r3, #8]
 8002dfc:	f012 0f0c 	tst.w	r2, #12
 8002e00:	d007      	beq.n	8002e12 <HAL_RCC_OscConfig+0xe6>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e02:	689a      	ldr	r2, [r3, #8]
 8002e04:	f002 020c 	and.w	r2, r2, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002e08:	2a08      	cmp	r2, #8
 8002e0a:	d111      	bne.n	8002e30 <HAL_RCC_OscConfig+0x104>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	025d      	lsls	r5, r3, #9
 8002e10:	d40e      	bmi.n	8002e30 <HAL_RCC_OscConfig+0x104>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e12:	4a60      	ldr	r2, [pc, #384]	@ (8002f94 <HAL_RCC_OscConfig+0x268>)
 8002e14:	6813      	ldr	r3, [r2, #0]
 8002e16:	0799      	lsls	r1, r3, #30
 8002e18:	d502      	bpl.n	8002e20 <HAL_RCC_OscConfig+0xf4>
 8002e1a:	68e3      	ldr	r3, [r4, #12]
 8002e1c:	2b01      	cmp	r3, #1
 8002e1e:	d1b2      	bne.n	8002d86 <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e20:	6813      	ldr	r3, [r2, #0]
 8002e22:	6921      	ldr	r1, [r4, #16]
 8002e24:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8002e28:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002e2c:	6013      	str	r3, [r2, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e2e:	e787      	b.n	8002d40 <HAL_RCC_OscConfig+0x14>
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002e30:	68e2      	ldr	r2, [r4, #12]
 8002e32:	4b59      	ldr	r3, [pc, #356]	@ (8002f98 <HAL_RCC_OscConfig+0x26c>)
 8002e34:	b1b2      	cbz	r2, 8002e64 <HAL_RCC_OscConfig+0x138>
        __HAL_RCC_HSI_ENABLE();
 8002e36:	2201      	movs	r2, #1
 8002e38:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002e3a:	f7ff f999 	bl	8002170 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e3e:	4d55      	ldr	r5, [pc, #340]	@ (8002f94 <HAL_RCC_OscConfig+0x268>)
        tickstart = HAL_GetTick();
 8002e40:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e42:	682b      	ldr	r3, [r5, #0]
 8002e44:	079b      	lsls	r3, r3, #30
 8002e46:	d507      	bpl.n	8002e58 <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e48:	682b      	ldr	r3, [r5, #0]
 8002e4a:	6922      	ldr	r2, [r4, #16]
 8002e4c:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8002e50:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002e54:	602b      	str	r3, [r5, #0]
 8002e56:	e773      	b.n	8002d40 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e58:	f7ff f98a 	bl	8002170 <HAL_GetTick>
 8002e5c:	1b80      	subs	r0, r0, r6
 8002e5e:	2802      	cmp	r0, #2
 8002e60:	d9ef      	bls.n	8002e42 <HAL_RCC_OscConfig+0x116>
 8002e62:	e7a7      	b.n	8002db4 <HAL_RCC_OscConfig+0x88>
        __HAL_RCC_HSI_DISABLE();
 8002e64:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002e66:	f7ff f983 	bl	8002170 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e6a:	4e4a      	ldr	r6, [pc, #296]	@ (8002f94 <HAL_RCC_OscConfig+0x268>)
        tickstart = HAL_GetTick();
 8002e6c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e6e:	6833      	ldr	r3, [r6, #0]
 8002e70:	079f      	lsls	r7, r3, #30
 8002e72:	f57f af65 	bpl.w	8002d40 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e76:	f7ff f97b 	bl	8002170 <HAL_GetTick>
 8002e7a:	1b40      	subs	r0, r0, r5
 8002e7c:	2802      	cmp	r0, #2
 8002e7e:	d9f6      	bls.n	8002e6e <HAL_RCC_OscConfig+0x142>
 8002e80:	e798      	b.n	8002db4 <HAL_RCC_OscConfig+0x88>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002e82:	6962      	ldr	r2, [r4, #20]
 8002e84:	4b44      	ldr	r3, [pc, #272]	@ (8002f98 <HAL_RCC_OscConfig+0x26c>)
 8002e86:	b182      	cbz	r2, 8002eaa <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 8002e88:	2201      	movs	r2, #1
 8002e8a:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80
      tickstart = HAL_GetTick();
 8002e8e:	f7ff f96f 	bl	8002170 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e92:	4e40      	ldr	r6, [pc, #256]	@ (8002f94 <HAL_RCC_OscConfig+0x268>)
      tickstart = HAL_GetTick();
 8002e94:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e96:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 8002e98:	079b      	lsls	r3, r3, #30
 8002e9a:	f53f af55 	bmi.w	8002d48 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e9e:	f7ff f967 	bl	8002170 <HAL_GetTick>
 8002ea2:	1b40      	subs	r0, r0, r5
 8002ea4:	2802      	cmp	r0, #2
 8002ea6:	d9f6      	bls.n	8002e96 <HAL_RCC_OscConfig+0x16a>
 8002ea8:	e784      	b.n	8002db4 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_LSI_DISABLE();
 8002eaa:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80
      tickstart = HAL_GetTick();
 8002eae:	f7ff f95f 	bl	8002170 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002eb2:	4e38      	ldr	r6, [pc, #224]	@ (8002f94 <HAL_RCC_OscConfig+0x268>)
      tickstart = HAL_GetTick();
 8002eb4:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002eb6:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 8002eb8:	079f      	lsls	r7, r3, #30
 8002eba:	f57f af45 	bpl.w	8002d48 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ebe:	f7ff f957 	bl	8002170 <HAL_GetTick>
 8002ec2:	1b40      	subs	r0, r0, r5
 8002ec4:	2802      	cmp	r0, #2
 8002ec6:	d9f6      	bls.n	8002eb6 <HAL_RCC_OscConfig+0x18a>
 8002ec8:	e774      	b.n	8002db4 <HAL_RCC_OscConfig+0x88>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002eca:	4b32      	ldr	r3, [pc, #200]	@ (8002f94 <HAL_RCC_OscConfig+0x268>)
 8002ecc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002ece:	f012 5280 	ands.w	r2, r2, #268435456	@ 0x10000000
 8002ed2:	d128      	bne.n	8002f26 <HAL_RCC_OscConfig+0x1fa>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ed4:	9201      	str	r2, [sp, #4]
 8002ed6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002ed8:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8002edc:	641a      	str	r2, [r3, #64]	@ 0x40
 8002ede:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ee0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ee4:	9301      	str	r3, [sp, #4]
 8002ee6:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002ee8:	2701      	movs	r7, #1
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eea:	4d2c      	ldr	r5, [pc, #176]	@ (8002f9c <HAL_RCC_OscConfig+0x270>)
 8002eec:	682b      	ldr	r3, [r5, #0]
 8002eee:	05d8      	lsls	r0, r3, #23
 8002ef0:	d51b      	bpl.n	8002f2a <HAL_RCC_OscConfig+0x1fe>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ef2:	68a3      	ldr	r3, [r4, #8]
 8002ef4:	4d27      	ldr	r5, [pc, #156]	@ (8002f94 <HAL_RCC_OscConfig+0x268>)
 8002ef6:	2b01      	cmp	r3, #1
 8002ef8:	d127      	bne.n	8002f4a <HAL_RCC_OscConfig+0x21e>
 8002efa:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8002efc:	f043 0301 	orr.w	r3, r3, #1
 8002f00:	672b      	str	r3, [r5, #112]	@ 0x70
      tickstart = HAL_GetTick();
 8002f02:	f7ff f935 	bl	8002170 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f06:	4e23      	ldr	r6, [pc, #140]	@ (8002f94 <HAL_RCC_OscConfig+0x268>)
      tickstart = HAL_GetTick();
 8002f08:	4605      	mov	r5, r0
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f0a:	f241 3888 	movw	r8, #5000	@ 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f0e:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 8002f10:	079a      	lsls	r2, r3, #30
 8002f12:	d539      	bpl.n	8002f88 <HAL_RCC_OscConfig+0x25c>
    if (pwrclkchanged == SET)
 8002f14:	2f00      	cmp	r7, #0
 8002f16:	f43f af1b 	beq.w	8002d50 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f1a:	4a1e      	ldr	r2, [pc, #120]	@ (8002f94 <HAL_RCC_OscConfig+0x268>)
 8002f1c:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8002f1e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f22:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f24:	e714      	b.n	8002d50 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8002f26:	2700      	movs	r7, #0
 8002f28:	e7df      	b.n	8002eea <HAL_RCC_OscConfig+0x1be>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f2a:	682b      	ldr	r3, [r5, #0]
 8002f2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f30:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8002f32:	f7ff f91d 	bl	8002170 <HAL_GetTick>
 8002f36:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f38:	682b      	ldr	r3, [r5, #0]
 8002f3a:	05d9      	lsls	r1, r3, #23
 8002f3c:	d4d9      	bmi.n	8002ef2 <HAL_RCC_OscConfig+0x1c6>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f3e:	f7ff f917 	bl	8002170 <HAL_GetTick>
 8002f42:	1b80      	subs	r0, r0, r6
 8002f44:	2802      	cmp	r0, #2
 8002f46:	d9f7      	bls.n	8002f38 <HAL_RCC_OscConfig+0x20c>
 8002f48:	e734      	b.n	8002db4 <HAL_RCC_OscConfig+0x88>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f4a:	2b05      	cmp	r3, #5
 8002f4c:	d104      	bne.n	8002f58 <HAL_RCC_OscConfig+0x22c>
 8002f4e:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8002f50:	f043 0304 	orr.w	r3, r3, #4
 8002f54:	672b      	str	r3, [r5, #112]	@ 0x70
 8002f56:	e7d0      	b.n	8002efa <HAL_RCC_OscConfig+0x1ce>
 8002f58:	6f2a      	ldr	r2, [r5, #112]	@ 0x70
 8002f5a:	f022 0201 	bic.w	r2, r2, #1
 8002f5e:	672a      	str	r2, [r5, #112]	@ 0x70
 8002f60:	6f2a      	ldr	r2, [r5, #112]	@ 0x70
 8002f62:	f022 0204 	bic.w	r2, r2, #4
 8002f66:	672a      	str	r2, [r5, #112]	@ 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d1ca      	bne.n	8002f02 <HAL_RCC_OscConfig+0x1d6>
      tickstart = HAL_GetTick();
 8002f6c:	f7ff f900 	bl	8002170 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f70:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8002f74:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f76:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8002f78:	079b      	lsls	r3, r3, #30
 8002f7a:	d5cb      	bpl.n	8002f14 <HAL_RCC_OscConfig+0x1e8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f7c:	f7ff f8f8 	bl	8002170 <HAL_GetTick>
 8002f80:	1b80      	subs	r0, r0, r6
 8002f82:	4540      	cmp	r0, r8
 8002f84:	d9f7      	bls.n	8002f76 <HAL_RCC_OscConfig+0x24a>
 8002f86:	e715      	b.n	8002db4 <HAL_RCC_OscConfig+0x88>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f88:	f7ff f8f2 	bl	8002170 <HAL_GetTick>
 8002f8c:	1b40      	subs	r0, r0, r5
 8002f8e:	4540      	cmp	r0, r8
 8002f90:	d9bd      	bls.n	8002f0e <HAL_RCC_OscConfig+0x1e2>
 8002f92:	e70f      	b.n	8002db4 <HAL_RCC_OscConfig+0x88>
 8002f94:	40023800 	.word	0x40023800
 8002f98:	42470000 	.word	0x42470000
 8002f9c:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002fa0:	4d37      	ldr	r5, [pc, #220]	@ (8003080 <HAL_RCC_OscConfig+0x354>)
 8002fa2:	68aa      	ldr	r2, [r5, #8]
 8002fa4:	f002 020c 	and.w	r2, r2, #12
 8002fa8:	2a08      	cmp	r2, #8
 8002faa:	d03e      	beq.n	800302a <HAL_RCC_OscConfig+0x2fe>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fac:	2b02      	cmp	r3, #2
 8002fae:	4b35      	ldr	r3, [pc, #212]	@ (8003084 <HAL_RCC_OscConfig+0x358>)
 8002fb0:	f04f 0200 	mov.w	r2, #0
        __HAL_RCC_PLL_DISABLE();
 8002fb4:	661a      	str	r2, [r3, #96]	@ 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fb6:	d12b      	bne.n	8003010 <HAL_RCC_OscConfig+0x2e4>
        tickstart = HAL_GetTick();
 8002fb8:	f7ff f8da 	bl	8002170 <HAL_GetTick>
 8002fbc:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fbe:	682b      	ldr	r3, [r5, #0]
 8002fc0:	0199      	lsls	r1, r3, #6
 8002fc2:	d41f      	bmi.n	8003004 <HAL_RCC_OscConfig+0x2d8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002fc4:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8002fcc:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002fd0:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8002fd2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002fd6:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8002fd8:	0852      	lsrs	r2, r2, #1
 8002fda:	3a01      	subs	r2, #1
 8002fdc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002fe0:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8002fe2:	4b28      	ldr	r3, [pc, #160]	@ (8003084 <HAL_RCC_OscConfig+0x358>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fe4:	4d26      	ldr	r5, [pc, #152]	@ (8003080 <HAL_RCC_OscConfig+0x354>)
        __HAL_RCC_PLL_ENABLE();
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8002fea:	f7ff f8c1 	bl	8002170 <HAL_GetTick>
 8002fee:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ff0:	682b      	ldr	r3, [r5, #0]
 8002ff2:	019a      	lsls	r2, r3, #6
 8002ff4:	f53f aeb0 	bmi.w	8002d58 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ff8:	f7ff f8ba 	bl	8002170 <HAL_GetTick>
 8002ffc:	1b00      	subs	r0, r0, r4
 8002ffe:	2802      	cmp	r0, #2
 8003000:	d9f6      	bls.n	8002ff0 <HAL_RCC_OscConfig+0x2c4>
 8003002:	e6d7      	b.n	8002db4 <HAL_RCC_OscConfig+0x88>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003004:	f7ff f8b4 	bl	8002170 <HAL_GetTick>
 8003008:	1b80      	subs	r0, r0, r6
 800300a:	2802      	cmp	r0, #2
 800300c:	d9d7      	bls.n	8002fbe <HAL_RCC_OscConfig+0x292>
 800300e:	e6d1      	b.n	8002db4 <HAL_RCC_OscConfig+0x88>
        tickstart = HAL_GetTick();
 8003010:	f7ff f8ae 	bl	8002170 <HAL_GetTick>
 8003014:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003016:	682b      	ldr	r3, [r5, #0]
 8003018:	019b      	lsls	r3, r3, #6
 800301a:	f57f ae9d 	bpl.w	8002d58 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800301e:	f7ff f8a7 	bl	8002170 <HAL_GetTick>
 8003022:	1b00      	subs	r0, r0, r4
 8003024:	2802      	cmp	r0, #2
 8003026:	d9f6      	bls.n	8003016 <HAL_RCC_OscConfig+0x2ea>
 8003028:	e6c4      	b.n	8002db4 <HAL_RCC_OscConfig+0x88>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800302a:	2b01      	cmp	r3, #1
 800302c:	f43f aeab 	beq.w	8002d86 <HAL_RCC_OscConfig+0x5a>
        pll_config = RCC->PLLCFGR;
 8003030:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003032:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003034:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003038:	4291      	cmp	r1, r2
 800303a:	f47f aea4 	bne.w	8002d86 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800303e:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003040:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003044:	428a      	cmp	r2, r1
 8003046:	f47f ae9e 	bne.w	8002d86 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800304a:	6a61      	ldr	r1, [r4, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800304c:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 8003050:	401a      	ands	r2, r3
 8003052:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8003056:	f47f ae96 	bne.w	8002d86 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800305a:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800305c:	0852      	lsrs	r2, r2, #1
 800305e:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 8003062:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003064:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8003068:	f47f ae8d 	bne.w	8002d86 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800306c:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800306e:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003072:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8003076:	bf14      	ite	ne
 8003078:	2001      	movne	r0, #1
 800307a:	2000      	moveq	r0, #0
 800307c:	e69b      	b.n	8002db6 <HAL_RCC_OscConfig+0x8a>
 800307e:	bf00      	nop
 8003080:	40023800 	.word	0x40023800
 8003084:	42470000 	.word	0x42470000

08003088 <HAL_RCC_GetSysClockFreq>:
  uint32_t pllvco = 0U;
  uint32_t pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003088:	4913      	ldr	r1, [pc, #76]	@ (80030d8 <HAL_RCC_GetSysClockFreq+0x50>)
{
 800308a:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800308c:	688b      	ldr	r3, [r1, #8]
 800308e:	f003 030c 	and.w	r3, r3, #12
 8003092:	2b04      	cmp	r3, #4
 8003094:	d01c      	beq.n	80030d0 <HAL_RCC_GetSysClockFreq+0x48>
 8003096:	2b08      	cmp	r3, #8
 8003098:	d11c      	bne.n	80030d4 <HAL_RCC_GetSysClockFreq+0x4c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800309a:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800309c:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800309e:	6849      	ldr	r1, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80030a0:	f413 0380 	ands.w	r3, r3, #4194304	@ 0x400000
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030a4:	bf14      	ite	ne
 80030a6:	480d      	ldrne	r0, [pc, #52]	@ (80030dc <HAL_RCC_GetSysClockFreq+0x54>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030a8:	480d      	ldreq	r0, [pc, #52]	@ (80030e0 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030aa:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80030ae:	bf18      	it	ne
 80030b0:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80030b2:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030b6:	fba1 0100 	umull	r0, r1, r1, r0
 80030ba:	f7fd fdcd 	bl	8000c58 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80030be:	4b06      	ldr	r3, [pc, #24]	@ (80030d8 <HAL_RCC_GetSysClockFreq+0x50>)
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80030c6:	3301      	adds	r3, #1
 80030c8:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 80030ca:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80030ce:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80030d0:	4802      	ldr	r0, [pc, #8]	@ (80030dc <HAL_RCC_GetSysClockFreq+0x54>)
 80030d2:	e7fc      	b.n	80030ce <HAL_RCC_GetSysClockFreq+0x46>
      sysclockfreq = HSI_VALUE;
 80030d4:	4802      	ldr	r0, [pc, #8]	@ (80030e0 <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 80030d6:	e7fa      	b.n	80030ce <HAL_RCC_GetSysClockFreq+0x46>
 80030d8:	40023800 	.word	0x40023800
 80030dc:	017d7840 	.word	0x017d7840
 80030e0:	00f42400 	.word	0x00f42400

080030e4 <HAL_RCC_ClockConfig>:
{
 80030e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80030e8:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 80030ea:	4604      	mov	r4, r0
 80030ec:	b910      	cbnz	r0, 80030f4 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80030ee:	2001      	movs	r0, #1
}
 80030f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80030f4:	4b43      	ldr	r3, [pc, #268]	@ (8003204 <HAL_RCC_ClockConfig+0x120>)
 80030f6:	681a      	ldr	r2, [r3, #0]
 80030f8:	f002 0207 	and.w	r2, r2, #7
 80030fc:	428a      	cmp	r2, r1
 80030fe:	d328      	bcc.n	8003152 <HAL_RCC_ClockConfig+0x6e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003100:	6821      	ldr	r1, [r4, #0]
 8003102:	078f      	lsls	r7, r1, #30
 8003104:	d42d      	bmi.n	8003162 <HAL_RCC_ClockConfig+0x7e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003106:	07c8      	lsls	r0, r1, #31
 8003108:	d440      	bmi.n	800318c <HAL_RCC_ClockConfig+0xa8>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800310a:	4b3e      	ldr	r3, [pc, #248]	@ (8003204 <HAL_RCC_ClockConfig+0x120>)
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	f002 0207 	and.w	r2, r2, #7
 8003112:	42aa      	cmp	r2, r5
 8003114:	d865      	bhi.n	80031e2 <HAL_RCC_ClockConfig+0xfe>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003116:	6822      	ldr	r2, [r4, #0]
 8003118:	0751      	lsls	r1, r2, #29
 800311a:	d46b      	bmi.n	80031f4 <HAL_RCC_ClockConfig+0x110>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800311c:	0713      	lsls	r3, r2, #28
 800311e:	d507      	bpl.n	8003130 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003120:	4a39      	ldr	r2, [pc, #228]	@ (8003208 <HAL_RCC_ClockConfig+0x124>)
 8003122:	6921      	ldr	r1, [r4, #16]
 8003124:	6893      	ldr	r3, [r2, #8]
 8003126:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 800312a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800312e:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003130:	f7ff ffaa 	bl	8003088 <HAL_RCC_GetSysClockFreq>
 8003134:	4b34      	ldr	r3, [pc, #208]	@ (8003208 <HAL_RCC_ClockConfig+0x124>)
 8003136:	4a35      	ldr	r2, [pc, #212]	@ (800320c <HAL_RCC_ClockConfig+0x128>)
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800313e:	5cd3      	ldrb	r3, [r2, r3]
 8003140:	40d8      	lsrs	r0, r3
 8003142:	4b33      	ldr	r3, [pc, #204]	@ (8003210 <HAL_RCC_ClockConfig+0x12c>)
 8003144:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8003146:	4b33      	ldr	r3, [pc, #204]	@ (8003214 <HAL_RCC_ClockConfig+0x130>)
 8003148:	6818      	ldr	r0, [r3, #0]
 800314a:	f7fe ffc7 	bl	80020dc <HAL_InitTick>
  return HAL_OK;
 800314e:	2000      	movs	r0, #0
 8003150:	e7ce      	b.n	80030f0 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003152:	b2ca      	uxtb	r2, r1
 8003154:	701a      	strb	r2, [r3, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f003 0307 	and.w	r3, r3, #7
 800315c:	428b      	cmp	r3, r1
 800315e:	d1c6      	bne.n	80030ee <HAL_RCC_ClockConfig+0xa>
 8003160:	e7ce      	b.n	8003100 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003162:	4b29      	ldr	r3, [pc, #164]	@ (8003208 <HAL_RCC_ClockConfig+0x124>)
 8003164:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003168:	bf1e      	ittt	ne
 800316a:	689a      	ldrne	r2, [r3, #8]
 800316c:	f442 52e0 	orrne.w	r2, r2, #7168	@ 0x1c00
 8003170:	609a      	strne	r2, [r3, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003172:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003174:	bf42      	ittt	mi
 8003176:	689a      	ldrmi	r2, [r3, #8]
 8003178:	f442 4260 	orrmi.w	r2, r2, #57344	@ 0xe000
 800317c:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800317e:	689a      	ldr	r2, [r3, #8]
 8003180:	68a0      	ldr	r0, [r4, #8]
 8003182:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8003186:	4302      	orrs	r2, r0
 8003188:	609a      	str	r2, [r3, #8]
 800318a:	e7bc      	b.n	8003106 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800318c:	6862      	ldr	r2, [r4, #4]
 800318e:	4b1e      	ldr	r3, [pc, #120]	@ (8003208 <HAL_RCC_ClockConfig+0x124>)
 8003190:	2a01      	cmp	r2, #1
 8003192:	d11c      	bne.n	80031ce <HAL_RCC_ClockConfig+0xea>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800319a:	d0a8      	beq.n	80030ee <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800319c:	4e1a      	ldr	r6, [pc, #104]	@ (8003208 <HAL_RCC_ClockConfig+0x124>)
 800319e:	68b3      	ldr	r3, [r6, #8]
 80031a0:	f023 0303 	bic.w	r3, r3, #3
 80031a4:	4313      	orrs	r3, r2
 80031a6:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80031a8:	f7fe ffe2 	bl	8002170 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031ac:	f241 3888 	movw	r8, #5000	@ 0x1388
    tickstart = HAL_GetTick();
 80031b0:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031b2:	68b3      	ldr	r3, [r6, #8]
 80031b4:	6862      	ldr	r2, [r4, #4]
 80031b6:	f003 030c 	and.w	r3, r3, #12
 80031ba:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80031be:	d0a4      	beq.n	800310a <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031c0:	f7fe ffd6 	bl	8002170 <HAL_GetTick>
 80031c4:	1bc0      	subs	r0, r0, r7
 80031c6:	4540      	cmp	r0, r8
 80031c8:	d9f3      	bls.n	80031b2 <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 80031ca:	2003      	movs	r0, #3
 80031cc:	e790      	b.n	80030f0 <HAL_RCC_ClockConfig+0xc>
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031ce:	1e91      	subs	r1, r2, #2
 80031d0:	2901      	cmp	r1, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031d2:	681b      	ldr	r3, [r3, #0]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031d4:	d802      	bhi.n	80031dc <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031d6:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80031da:	e7de      	b.n	800319a <HAL_RCC_ClockConfig+0xb6>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031dc:	f013 0f02 	tst.w	r3, #2
 80031e0:	e7db      	b.n	800319a <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031e2:	b2ea      	uxtb	r2, r5
 80031e4:	701a      	strb	r2, [r3, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f003 0307 	and.w	r3, r3, #7
 80031ec:	42ab      	cmp	r3, r5
 80031ee:	f47f af7e 	bne.w	80030ee <HAL_RCC_ClockConfig+0xa>
 80031f2:	e790      	b.n	8003116 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031f4:	4904      	ldr	r1, [pc, #16]	@ (8003208 <HAL_RCC_ClockConfig+0x124>)
 80031f6:	68e0      	ldr	r0, [r4, #12]
 80031f8:	688b      	ldr	r3, [r1, #8]
 80031fa:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 80031fe:	4303      	orrs	r3, r0
 8003200:	608b      	str	r3, [r1, #8]
 8003202:	e78b      	b.n	800311c <HAL_RCC_ClockConfig+0x38>
 8003204:	40023c00 	.word	0x40023c00
 8003208:	40023800 	.word	0x40023800
 800320c:	08034df4 	.word	0x08034df4
 8003210:	20000000 	.word	0x20000000
 8003214:	20000008 	.word	0x20000008

08003218 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003218:	4b04      	ldr	r3, [pc, #16]	@ (800322c <HAL_RCC_GetPCLK1Freq+0x14>)
 800321a:	4a05      	ldr	r2, [pc, #20]	@ (8003230 <HAL_RCC_GetPCLK1Freq+0x18>)
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8003222:	5cd3      	ldrb	r3, [r2, r3]
 8003224:	4a03      	ldr	r2, [pc, #12]	@ (8003234 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8003226:	6810      	ldr	r0, [r2, #0]
}
 8003228:	40d8      	lsrs	r0, r3
 800322a:	4770      	bx	lr
 800322c:	40023800 	.word	0x40023800
 8003230:	08034dec 	.word	0x08034dec
 8003234:	20000000 	.word	0x20000000

08003238 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003238:	4b04      	ldr	r3, [pc, #16]	@ (800324c <HAL_RCC_GetPCLK2Freq+0x14>)
 800323a:	4a05      	ldr	r2, [pc, #20]	@ (8003250 <HAL_RCC_GetPCLK2Freq+0x18>)
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8003242:	5cd3      	ldrb	r3, [r2, r3]
 8003244:	4a03      	ldr	r2, [pc, #12]	@ (8003254 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8003246:	6810      	ldr	r0, [r2, #0]
}
 8003248:	40d8      	lsrs	r0, r3
 800324a:	4770      	bx	lr
 800324c:	40023800 	.word	0x40023800
 8003250:	08034dec 	.word	0x08034dec
 8003254:	20000000 	.word	0x20000000

08003258 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003258:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800325a:	f102 030c 	add.w	r3, r2, #12
 800325e:	e853 3f00 	ldrex	r3, [r3]
 8003262:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003266:	320c      	adds	r2, #12
 8003268:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 800326c:	6802      	ldr	r2, [r0, #0]
 800326e:	2900      	cmp	r1, #0
 8003270:	d1f2      	bne.n	8003258 <UART_EndRxTransfer>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003272:	f102 0314 	add.w	r3, r2, #20
 8003276:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800327a:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800327e:	f102 0c14 	add.w	ip, r2, #20
 8003282:	e84c 3100 	strex	r1, r3, [ip]
 8003286:	2900      	cmp	r1, #0
 8003288:	d1f3      	bne.n	8003272 <UART_EndRxTransfer+0x1a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800328a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800328c:	2b01      	cmp	r3, #1
 800328e:	d10b      	bne.n	80032a8 <UART_EndRxTransfer+0x50>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003290:	f102 030c 	add.w	r3, r2, #12
 8003294:	e853 3f00 	ldrex	r3, [r3]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003298:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800329c:	f102 0c0c 	add.w	ip, r2, #12
 80032a0:	e84c 3100 	strex	r1, r3, [ip]
 80032a4:	2900      	cmp	r1, #0
 80032a6:	d1f3      	bne.n	8003290 <UART_EndRxTransfer+0x38>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80032a8:	2320      	movs	r3, #32
 80032aa:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032ae:	2300      	movs	r3, #0
 80032b0:	6303      	str	r3, [r0, #48]	@ 0x30
}
 80032b2:	4770      	bx	lr

080032b4 <UART_SetConfig>:
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80032b4:	6802      	ldr	r2, [r0, #0]
 80032b6:	68c1      	ldr	r1, [r0, #12]
{
 80032b8:	b538      	push	{r3, r4, r5, lr}
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80032ba:	6913      	ldr	r3, [r2, #16]
 80032bc:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80032c0:	430b      	orrs	r3, r1
 80032c2:	6113      	str	r3, [r2, #16]
{
 80032c4:	4605      	mov	r5, r0
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80032c6:	6883      	ldr	r3, [r0, #8]
 80032c8:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 80032ca:	68d1      	ldr	r1, [r2, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80032cc:	4303      	orrs	r3, r0
 80032ce:	6968      	ldr	r0, [r5, #20]
 80032d0:	4303      	orrs	r3, r0
 80032d2:	69e8      	ldr	r0, [r5, #28]
  MODIFY_REG(huart->Instance->CR1,
 80032d4:	f421 4116 	bic.w	r1, r1, #38400	@ 0x9600
 80032d8:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80032dc:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 80032de:	430b      	orrs	r3, r1
 80032e0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80032e2:	6953      	ldr	r3, [r2, #20]
 80032e4:	69a9      	ldr	r1, [r5, #24]
 80032e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80032ea:	430b      	orrs	r3, r1
 80032ec:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80032ee:	4b1f      	ldr	r3, [pc, #124]	@ (800336c <UART_SetConfig+0xb8>)
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d003      	beq.n	80032fc <UART_SetConfig+0x48>
 80032f4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80032f8:	429a      	cmp	r2, r3
 80032fa:	d124      	bne.n	8003346 <UART_SetConfig+0x92>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80032fc:	f7ff ff9c 	bl	8003238 <HAL_RCC_GetPCLK2Freq>
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003300:	69ea      	ldr	r2, [r5, #28]
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003302:	2119      	movs	r1, #25
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003304:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003308:	e9d5 4300 	ldrd	r4, r3, [r5]
 800330c:	fba0 0101 	umull	r0, r1, r0, r1
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003310:	d11c      	bne.n	800334c <UART_SetConfig+0x98>
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003312:	18da      	adds	r2, r3, r3
 8003314:	f04f 0500 	mov.w	r5, #0
 8003318:	eb45 0305 	adc.w	r3, r5, r5
 800331c:	f7fd fc9c 	bl	8000c58 <__aeabi_uldivmod>
 8003320:	2264      	movs	r2, #100	@ 0x64
 8003322:	fbb0 f1f2 	udiv	r1, r0, r2
 8003326:	fb02 0311 	mls	r3, r2, r1, r0
 800332a:	00db      	lsls	r3, r3, #3
 800332c:	3332      	adds	r3, #50	@ 0x32
 800332e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003332:	f003 0207 	and.w	r2, r3, #7
 8003336:	005b      	lsls	r3, r3, #1
 8003338:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800333c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003340:	4413      	add	r3, r2
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003342:	60a3      	str	r3, [r4, #8]
  }
}
 8003344:	bd38      	pop	{r3, r4, r5, pc}
      pclk = HAL_RCC_GetPCLK1Freq();
 8003346:	f7ff ff67 	bl	8003218 <HAL_RCC_GetPCLK1Freq>
 800334a:	e7d9      	b.n	8003300 <UART_SetConfig+0x4c>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800334c:	009a      	lsls	r2, r3, #2
 800334e:	0f9b      	lsrs	r3, r3, #30
 8003350:	f7fd fc82 	bl	8000c58 <__aeabi_uldivmod>
 8003354:	2264      	movs	r2, #100	@ 0x64
 8003356:	fbb0 f1f2 	udiv	r1, r0, r2
 800335a:	fb02 0311 	mls	r3, r2, r1, r0
 800335e:	011b      	lsls	r3, r3, #4
 8003360:	3332      	adds	r3, #50	@ 0x32
 8003362:	fbb3 f3f2 	udiv	r3, r3, r2
 8003366:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 800336a:	e7ea      	b.n	8003342 <UART_SetConfig+0x8e>
 800336c:	40011000 	.word	0x40011000

08003370 <UART_WaitOnFlagUntilTimeout.constprop.0>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
 8003370:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003372:	4605      	mov	r5, r0
 8003374:	460c      	mov	r4, r1
 8003376:	4617      	mov	r7, r2
 8003378:	461e      	mov	r6, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800337a:	682a      	ldr	r2, [r5, #0]
 800337c:	6813      	ldr	r3, [r2, #0]
 800337e:	ea34 0303 	bics.w	r3, r4, r3
 8003382:	d101      	bne.n	8003388 <UART_WaitOnFlagUntilTimeout.constprop.0+0x18>
  return HAL_OK;
 8003384:	2000      	movs	r0, #0
 8003386:	e021      	b.n	80033cc <UART_WaitOnFlagUntilTimeout.constprop.0+0x5c>
    if (Timeout != HAL_MAX_DELAY)
 8003388:	1c70      	adds	r0, r6, #1
 800338a:	d0f7      	beq.n	800337c <UART_WaitOnFlagUntilTimeout.constprop.0+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800338c:	f7fe fef0 	bl	8002170 <HAL_GetTick>
 8003390:	1bc0      	subs	r0, r0, r7
 8003392:	4286      	cmp	r6, r0
 8003394:	d31c      	bcc.n	80033d0 <UART_WaitOnFlagUntilTimeout.constprop.0+0x60>
 8003396:	b1de      	cbz	r6, 80033d0 <UART_WaitOnFlagUntilTimeout.constprop.0+0x60>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003398:	682b      	ldr	r3, [r5, #0]
 800339a:	68da      	ldr	r2, [r3, #12]
 800339c:	0751      	lsls	r1, r2, #29
 800339e:	d5ec      	bpl.n	800337a <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
 80033a0:	2c80      	cmp	r4, #128	@ 0x80
 80033a2:	d0ea      	beq.n	800337a <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
 80033a4:	2c40      	cmp	r4, #64	@ 0x40
 80033a6:	d0e8      	beq.n	800337a <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80033a8:	681a      	ldr	r2, [r3, #0]
 80033aa:	0712      	lsls	r2, r2, #28
 80033ac:	d5e5      	bpl.n	800337a <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
          __HAL_UART_CLEAR_OREFLAG(huart);
 80033ae:	2400      	movs	r4, #0
 80033b0:	9401      	str	r4, [sp, #4]
 80033b2:	681a      	ldr	r2, [r3, #0]
 80033b4:	9201      	str	r2, [sp, #4]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	9301      	str	r3, [sp, #4]
          UART_EndRxTransfer(huart);
 80033ba:	4628      	mov	r0, r5
          __HAL_UART_CLEAR_OREFLAG(huart);
 80033bc:	9b01      	ldr	r3, [sp, #4]
          UART_EndRxTransfer(huart);
 80033be:	f7ff ff4b 	bl	8003258 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80033c2:	2308      	movs	r3, #8
 80033c4:	646b      	str	r3, [r5, #68]	@ 0x44
          __HAL_UNLOCK(huart);
 80033c6:	f885 4040 	strb.w	r4, [r5, #64]	@ 0x40
          return HAL_ERROR;
 80033ca:	2001      	movs	r0, #1
}
 80033cc:	b003      	add	sp, #12
 80033ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 80033d0:	2003      	movs	r0, #3
 80033d2:	e7fb      	b.n	80033cc <UART_WaitOnFlagUntilTimeout.constprop.0+0x5c>

080033d4 <HAL_UART_Init>:
{
 80033d4:	b510      	push	{r4, lr}
  if (huart == NULL)
 80033d6:	4604      	mov	r4, r0
 80033d8:	b348      	cbz	r0, 800342e <HAL_UART_Init+0x5a>
  if (huart->gState == HAL_UART_STATE_RESET)
 80033da:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 80033de:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80033e2:	b91b      	cbnz	r3, 80033ec <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80033e4:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 80033e8:	f7fe fe10 	bl	800200c <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 80033ec:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80033ee:	2324      	movs	r3, #36	@ 0x24
 80033f0:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 80033f4:	68d3      	ldr	r3, [r2, #12]
 80033f6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80033fa:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80033fc:	4620      	mov	r0, r4
 80033fe:	f7ff ff59 	bl	80032b4 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003402:	6823      	ldr	r3, [r4, #0]
 8003404:	691a      	ldr	r2, [r3, #16]
 8003406:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800340a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800340c:	695a      	ldr	r2, [r3, #20]
 800340e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003412:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8003414:	68da      	ldr	r2, [r3, #12]
 8003416:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800341a:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800341c:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 800341e:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003420:	6460      	str	r0, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003422:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003426:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800342a:	6360      	str	r0, [r4, #52]	@ 0x34
}
 800342c:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800342e:	2001      	movs	r0, #1
 8003430:	e7fc      	b.n	800342c <HAL_UART_Init+0x58>

08003432 <HAL_UART_Transmit>:
{
 8003432:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003436:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8003438:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 800343c:	2b20      	cmp	r3, #32
{
 800343e:	4604      	mov	r4, r0
 8003440:	460e      	mov	r6, r1
 8003442:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8003444:	d13f      	bne.n	80034c6 <HAL_UART_Transmit+0x94>
    if ((pData == NULL) || (Size == 0U))
 8003446:	2900      	cmp	r1, #0
 8003448:	d03f      	beq.n	80034ca <HAL_UART_Transmit+0x98>
 800344a:	2a00      	cmp	r2, #0
 800344c:	d03d      	beq.n	80034ca <HAL_UART_Transmit+0x98>
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800344e:	2321      	movs	r3, #33	@ 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003450:	2500      	movs	r5, #0
 8003452:	6445      	str	r5, [r0, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003454:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
    tickstart = HAL_GetTick();
 8003458:	f7fe fe8a 	bl	8002170 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800345c:	68a3      	ldr	r3, [r4, #8]
    huart->TxXferSize = Size;
 800345e:	84a7      	strh	r7, [r4, #36]	@ 0x24
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003460:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
    tickstart = HAL_GetTick();
 8003464:	4681      	mov	r9, r0
    huart->TxXferCount = Size;
 8003466:	84e7      	strh	r7, [r4, #38]	@ 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003468:	d103      	bne.n	8003472 <HAL_UART_Transmit+0x40>
 800346a:	6923      	ldr	r3, [r4, #16]
 800346c:	b90b      	cbnz	r3, 8003472 <HAL_UART_Transmit+0x40>
      pdata16bits = (const uint16_t *) pData;
 800346e:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 8003470:	461e      	mov	r6, r3
    while (huart->TxXferCount > 0U)
 8003472:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 8003474:	b29b      	uxth	r3, r3
 8003476:	b953      	cbnz	r3, 800348e <HAL_UART_Transmit+0x5c>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003478:	4643      	mov	r3, r8
 800347a:	464a      	mov	r2, r9
 800347c:	2140      	movs	r1, #64	@ 0x40
 800347e:	4620      	mov	r0, r4
 8003480:	f7ff ff76 	bl	8003370 <UART_WaitOnFlagUntilTimeout.constprop.0>
 8003484:	2320      	movs	r3, #32
 8003486:	b950      	cbnz	r0, 800349e <HAL_UART_Transmit+0x6c>
    huart->gState = HAL_UART_STATE_READY;
 8003488:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    return HAL_OK;
 800348c:	e00a      	b.n	80034a4 <HAL_UART_Transmit+0x72>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800348e:	4643      	mov	r3, r8
 8003490:	464a      	mov	r2, r9
 8003492:	2180      	movs	r1, #128	@ 0x80
 8003494:	4620      	mov	r0, r4
 8003496:	f7ff ff6b 	bl	8003370 <UART_WaitOnFlagUntilTimeout.constprop.0>
 800349a:	b128      	cbz	r0, 80034a8 <HAL_UART_Transmit+0x76>
        huart->gState = HAL_UART_STATE_READY;
 800349c:	2320      	movs	r3, #32
 800349e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        return HAL_TIMEOUT;
 80034a2:	2003      	movs	r0, #3
}
 80034a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80034a8:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 80034aa:	b94e      	cbnz	r6, 80034c0 <HAL_UART_Transmit+0x8e>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80034ac:	f835 3b02 	ldrh.w	r3, [r5], #2
 80034b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80034b4:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 80034b6:	8ce1      	ldrh	r1, [r4, #38]	@ 0x26
 80034b8:	3901      	subs	r1, #1
 80034ba:	b289      	uxth	r1, r1
 80034bc:	84e1      	strh	r1, [r4, #38]	@ 0x26
 80034be:	e7d8      	b.n	8003472 <HAL_UART_Transmit+0x40>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80034c0:	f816 3b01 	ldrb.w	r3, [r6], #1
 80034c4:	e7f6      	b.n	80034b4 <HAL_UART_Transmit+0x82>
    return HAL_BUSY;
 80034c6:	2002      	movs	r0, #2
 80034c8:	e7ec      	b.n	80034a4 <HAL_UART_Transmit+0x72>
      return  HAL_ERROR;
 80034ca:	2001      	movs	r0, #1
 80034cc:	e7ea      	b.n	80034a4 <HAL_UART_Transmit+0x72>

080034ce <HAL_UART_TxCpltCallback>:
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
 80034ce:	4770      	bx	lr

080034d0 <HAL_UART_RxCpltCallback>:
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
 80034d0:	4770      	bx	lr

080034d2 <HAL_UART_ErrorCallback>:
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
 80034d2:	4770      	bx	lr

080034d4 <UART_DMAAbortOnError>:
{
 80034d4:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80034d6:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  huart->RxXferCount = 0x00U;
 80034d8:	2300      	movs	r3, #0
 80034da:	85c3      	strh	r3, [r0, #46]	@ 0x2e
  HAL_UART_ErrorCallback(huart);
 80034dc:	f7ff fff9 	bl	80034d2 <HAL_UART_ErrorCallback>
}
 80034e0:	bd08      	pop	{r3, pc}

080034e2 <HAL_UARTEx_RxEventCallback>:
}
 80034e2:	4770      	bx	lr

080034e4 <UART_Receive_IT.isra.0>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80034e4:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 80034e8:	2b22      	cmp	r3, #34	@ 0x22
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 80034ea:	b507      	push	{r0, r1, r2, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80034ec:	d142      	bne.n	8003574 <UART_Receive_IT.isra.0+0x90>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034ee:	6881      	ldr	r1, [r0, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80034f0:	6802      	ldr	r2, [r0, #0]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80034f2:	6a83      	ldr	r3, [r0, #40]	@ 0x28
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034f4:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 80034f8:	d13f      	bne.n	800357a <UART_Receive_IT.isra.0+0x96>
 80034fa:	6901      	ldr	r1, [r0, #16]
 80034fc:	2900      	cmp	r1, #0
 80034fe:	d13f      	bne.n	8003580 <UART_Receive_IT.isra.0+0x9c>
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003500:	6852      	ldr	r2, [r2, #4]
 8003502:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003506:	f823 2b02 	strh.w	r2, [r3], #2
      huart->pRxBuffPtr += 2U;
 800350a:	6283      	str	r3, [r0, #40]	@ 0x28
    if (--huart->RxXferCount == 0U)
 800350c:	8dc3      	ldrh	r3, [r0, #46]	@ 0x2e
 800350e:	3b01      	subs	r3, #1
 8003510:	b29b      	uxth	r3, r3
 8003512:	85c3      	strh	r3, [r0, #46]	@ 0x2e
 8003514:	2b00      	cmp	r3, #0
 8003516:	d12d      	bne.n	8003574 <UART_Receive_IT.isra.0+0x90>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003518:	6802      	ldr	r2, [r0, #0]
 800351a:	68d1      	ldr	r1, [r2, #12]
 800351c:	f021 0120 	bic.w	r1, r1, #32
 8003520:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003522:	68d1      	ldr	r1, [r2, #12]
 8003524:	f421 7180 	bic.w	r1, r1, #256	@ 0x100
 8003528:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800352a:	6951      	ldr	r1, [r2, #20]
 800352c:	f021 0101 	bic.w	r1, r1, #1
 8003530:	6151      	str	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8003532:	2220      	movs	r2, #32
 8003534:	f880 2042 	strb.w	r2, [r0, #66]	@ 0x42
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003538:	6343      	str	r3, [r0, #52]	@ 0x34
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800353a:	6b02      	ldr	r2, [r0, #48]	@ 0x30
 800353c:	2a01      	cmp	r2, #1
 800353e:	6802      	ldr	r2, [r0, #0]
 8003540:	d128      	bne.n	8003594 <UART_Receive_IT.isra.0+0xb0>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003542:	6303      	str	r3, [r0, #48]	@ 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003544:	f102 030c 	add.w	r3, r2, #12
 8003548:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800354c:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003550:	f102 0c0c 	add.w	ip, r2, #12
 8003554:	e84c 3100 	strex	r1, r3, [ip]
 8003558:	2900      	cmp	r1, #0
 800355a:	d1f3      	bne.n	8003544 <UART_Receive_IT.isra.0+0x60>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800355c:	6813      	ldr	r3, [r2, #0]
 800355e:	06db      	lsls	r3, r3, #27
 8003560:	d505      	bpl.n	800356e <UART_Receive_IT.isra.0+0x8a>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003562:	9101      	str	r1, [sp, #4]
 8003564:	6813      	ldr	r3, [r2, #0]
 8003566:	9301      	str	r3, [sp, #4]
 8003568:	6853      	ldr	r3, [r2, #4]
 800356a:	9301      	str	r3, [sp, #4]
 800356c:	9b01      	ldr	r3, [sp, #4]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800356e:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 8003570:	f7ff ffb7 	bl	80034e2 <HAL_UARTEx_RxEventCallback>
}
 8003574:	b003      	add	sp, #12
 8003576:	f85d fb04 	ldr.w	pc, [sp], #4
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800357a:	b939      	cbnz	r1, 800358c <UART_Receive_IT.isra.0+0xa8>
 800357c:	6901      	ldr	r1, [r0, #16]
 800357e:	b929      	cbnz	r1, 800358c <UART_Receive_IT.isra.0+0xa8>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003580:	6852      	ldr	r2, [r2, #4]
 8003582:	b2d2      	uxtb	r2, r2
 8003584:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr += 1U;
 8003586:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8003588:	3301      	adds	r3, #1
 800358a:	e7be      	b.n	800350a <UART_Receive_IT.isra.0+0x26>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800358c:	6852      	ldr	r2, [r2, #4]
 800358e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003592:	e7f7      	b.n	8003584 <UART_Receive_IT.isra.0+0xa0>
        HAL_UART_RxCpltCallback(huart);
 8003594:	f7ff ff9c 	bl	80034d0 <HAL_UART_RxCpltCallback>
 8003598:	e7ec      	b.n	8003574 <UART_Receive_IT.isra.0+0x90>
	...

0800359c <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800359c:	6803      	ldr	r3, [r0, #0]
 800359e:	681a      	ldr	r2, [r3, #0]
{
 80035a0:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if (errorflags == RESET)
 80035a2:	0716      	lsls	r6, r2, #28
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80035a4:	68d9      	ldr	r1, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80035a6:	695d      	ldr	r5, [r3, #20]
{
 80035a8:	4604      	mov	r4, r0
  if (errorflags == RESET)
 80035aa:	d108      	bne.n	80035be <HAL_UART_IRQHandler+0x22>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80035ac:	0696      	lsls	r6, r2, #26
 80035ae:	d568      	bpl.n	8003682 <HAL_UART_IRQHandler+0xe6>
 80035b0:	068d      	lsls	r5, r1, #26
 80035b2:	d566      	bpl.n	8003682 <HAL_UART_IRQHandler+0xe6>
}
 80035b4:	b002      	add	sp, #8
 80035b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 80035ba:	f7ff bf93 	b.w	80034e4 <UART_Receive_IT.isra.0>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80035be:	f005 0001 	and.w	r0, r5, #1
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80035c2:	f401 7590 	and.w	r5, r1, #288	@ 0x120
 80035c6:	4305      	orrs	r5, r0
 80035c8:	d05b      	beq.n	8003682 <HAL_UART_IRQHandler+0xe6>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80035ca:	07d6      	lsls	r6, r2, #31
 80035cc:	d505      	bpl.n	80035da <HAL_UART_IRQHandler+0x3e>
 80035ce:	05cd      	lsls	r5, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80035d0:	bf42      	ittt	mi
 80035d2:	6c63      	ldrmi	r3, [r4, #68]	@ 0x44
 80035d4:	f043 0301 	orrmi.w	r3, r3, #1
 80035d8:	6463      	strmi	r3, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80035da:	0753      	lsls	r3, r2, #29
 80035dc:	d504      	bpl.n	80035e8 <HAL_UART_IRQHandler+0x4c>
 80035de:	b118      	cbz	r0, 80035e8 <HAL_UART_IRQHandler+0x4c>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80035e0:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80035e2:	f043 0302 	orr.w	r3, r3, #2
 80035e6:	6463      	str	r3, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80035e8:	0796      	lsls	r6, r2, #30
 80035ea:	d504      	bpl.n	80035f6 <HAL_UART_IRQHandler+0x5a>
 80035ec:	b118      	cbz	r0, 80035f6 <HAL_UART_IRQHandler+0x5a>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80035ee:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80035f0:	f043 0304 	orr.w	r3, r3, #4
 80035f4:	6463      	str	r3, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80035f6:	0715      	lsls	r5, r2, #28
 80035f8:	d507      	bpl.n	800360a <HAL_UART_IRQHandler+0x6e>
 80035fa:	f001 0320 	and.w	r3, r1, #32
 80035fe:	4303      	orrs	r3, r0
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003600:	bf1e      	ittt	ne
 8003602:	6c63      	ldrne	r3, [r4, #68]	@ 0x44
 8003604:	f043 0308 	orrne.w	r3, r3, #8
 8003608:	6463      	strne	r3, [r4, #68]	@ 0x44
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800360a:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800360c:	2b00      	cmp	r3, #0
 800360e:	d032      	beq.n	8003676 <HAL_UART_IRQHandler+0xda>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003610:	0692      	lsls	r2, r2, #26
 8003612:	d504      	bpl.n	800361e <HAL_UART_IRQHandler+0x82>
 8003614:	068b      	lsls	r3, r1, #26
 8003616:	d502      	bpl.n	800361e <HAL_UART_IRQHandler+0x82>
        UART_Receive_IT(huart);
 8003618:	4620      	mov	r0, r4
 800361a:	f7ff ff63 	bl	80034e4 <UART_Receive_IT.isra.0>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800361e:	6826      	ldr	r6, [r4, #0]
 8003620:	6973      	ldr	r3, [r6, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003622:	6c62      	ldr	r2, [r4, #68]	@ 0x44
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003624:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003628:	f002 0208 	and.w	r2, r2, #8
 800362c:	ea53 0502 	orrs.w	r5, r3, r2
        UART_EndRxTransfer(huart);
 8003630:	4620      	mov	r0, r4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003632:	d022      	beq.n	800367a <HAL_UART_IRQHandler+0xde>
        UART_EndRxTransfer(huart);
 8003634:	f7ff fe10 	bl	8003258 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003638:	6973      	ldr	r3, [r6, #20]
 800363a:	065e      	lsls	r6, r3, #25
 800363c:	d518      	bpl.n	8003670 <HAL_UART_IRQHandler+0xd4>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800363e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003640:	f102 0314 	add.w	r3, r2, #20
 8003644:	e853 3f00 	ldrex	r3, [r3]
 8003648:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800364c:	3214      	adds	r2, #20
 800364e:	e842 3100 	strex	r1, r3, [r2]
 8003652:	2900      	cmp	r1, #0
 8003654:	d1f3      	bne.n	800363e <HAL_UART_IRQHandler+0xa2>
          if (huart->hdmarx != NULL)
 8003656:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8003658:	b150      	cbz	r0, 8003670 <HAL_UART_IRQHandler+0xd4>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800365a:	4b77      	ldr	r3, [pc, #476]	@ (8003838 <HAL_UART_IRQHandler+0x29c>)
 800365c:	6503      	str	r3, [r0, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800365e:	f7fe fe45 	bl	80022ec <HAL_DMA_Abort_IT>
 8003662:	b140      	cbz	r0, 8003676 <HAL_UART_IRQHandler+0xda>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003664:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8003666:	6d03      	ldr	r3, [r0, #80]	@ 0x50
}
 8003668:	b002      	add	sp, #8
 800366a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800366e:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8003670:	4620      	mov	r0, r4
 8003672:	f7ff ff2e 	bl	80034d2 <HAL_UART_ErrorCallback>
}
 8003676:	b002      	add	sp, #8
 8003678:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 800367a:	f7ff ff2a 	bl	80034d2 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800367e:	6465      	str	r5, [r4, #68]	@ 0x44
 8003680:	e7f9      	b.n	8003676 <HAL_UART_IRQHandler+0xda>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003682:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8003684:	2801      	cmp	r0, #1
 8003686:	f040 809b 	bne.w	80037c0 <HAL_UART_IRQHandler+0x224>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800368a:	06d5      	lsls	r5, r2, #27
 800368c:	f140 8098 	bpl.w	80037c0 <HAL_UART_IRQHandler+0x224>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8003690:	06c8      	lsls	r0, r1, #27
 8003692:	f140 8095 	bpl.w	80037c0 <HAL_UART_IRQHandler+0x224>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003696:	2200      	movs	r2, #0
 8003698:	9201      	str	r2, [sp, #4]
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	9201      	str	r2, [sp, #4]
 800369e:	685a      	ldr	r2, [r3, #4]
 80036a0:	9201      	str	r2, [sp, #4]
 80036a2:	9a01      	ldr	r2, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036a4:	6959      	ldr	r1, [r3, #20]
          && (nb_remaining_rx_data < huart->RxXferSize))
 80036a6:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036a8:	0649      	lsls	r1, r1, #25
 80036aa:	d556      	bpl.n	800375a <HAL_UART_IRQHandler+0x1be>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80036ac:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 80036ae:	6801      	ldr	r1, [r0, #0]
 80036b0:	6849      	ldr	r1, [r1, #4]
 80036b2:	b289      	uxth	r1, r1
      if ((nb_remaining_rx_data > 0U)
 80036b4:	2900      	cmp	r1, #0
 80036b6:	d047      	beq.n	8003748 <HAL_UART_IRQHandler+0x1ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80036b8:	4291      	cmp	r1, r2
 80036ba:	d245      	bcs.n	8003748 <HAL_UART_IRQHandler+0x1ac>
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80036bc:	69c2      	ldr	r2, [r0, #28]
        huart->RxXferCount = nb_remaining_rx_data;
 80036be:	85e1      	strh	r1, [r4, #46]	@ 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80036c0:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
 80036c4:	d036      	beq.n	8003734 <HAL_UART_IRQHandler+0x198>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036c6:	f103 020c 	add.w	r2, r3, #12
 80036ca:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80036ce:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036d2:	f103 000c 	add.w	r0, r3, #12
 80036d6:	e840 2100 	strex	r1, r2, [r0]
 80036da:	2900      	cmp	r1, #0
 80036dc:	d1f3      	bne.n	80036c6 <HAL_UART_IRQHandler+0x12a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036de:	f103 0214 	add.w	r2, r3, #20
 80036e2:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036e6:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036ea:	f103 0014 	add.w	r0, r3, #20
 80036ee:	e840 2100 	strex	r1, r2, [r0]
 80036f2:	2900      	cmp	r1, #0
 80036f4:	d1f3      	bne.n	80036de <HAL_UART_IRQHandler+0x142>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036f6:	f103 0214 	add.w	r2, r3, #20
 80036fa:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80036fe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003702:	f103 0014 	add.w	r0, r3, #20
 8003706:	e840 2100 	strex	r1, r2, [r0]
 800370a:	2900      	cmp	r1, #0
 800370c:	d1f3      	bne.n	80036f6 <HAL_UART_IRQHandler+0x15a>
          huart->RxState = HAL_UART_STATE_READY;
 800370e:	2220      	movs	r2, #32
 8003710:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003714:	6321      	str	r1, [r4, #48]	@ 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003716:	f103 020c 	add.w	r2, r3, #12
 800371a:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800371e:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003722:	f103 000c 	add.w	r0, r3, #12
 8003726:	e840 2100 	strex	r1, r2, [r0]
 800372a:	2900      	cmp	r1, #0
 800372c:	d1f3      	bne.n	8003716 <HAL_UART_IRQHandler+0x17a>
          (void)HAL_DMA_Abort(huart->hdmarx);
 800372e:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8003730:	f7fe fd9e 	bl	8002270 <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003734:	2302      	movs	r3, #2
 8003736:	6363      	str	r3, [r4, #52]	@ 0x34
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003738:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 800373a:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 800373c:	1ac9      	subs	r1, r1, r3
 800373e:	b289      	uxth	r1, r1
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003740:	4620      	mov	r0, r4
 8003742:	f7ff fece 	bl	80034e2 <HAL_UARTEx_RxEventCallback>
 8003746:	e796      	b.n	8003676 <HAL_UART_IRQHandler+0xda>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8003748:	4291      	cmp	r1, r2
 800374a:	d194      	bne.n	8003676 <HAL_UART_IRQHandler+0xda>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800374c:	69c3      	ldr	r3, [r0, #28]
 800374e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003752:	d190      	bne.n	8003676 <HAL_UART_IRQHandler+0xda>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003754:	2302      	movs	r3, #2
 8003756:	6363      	str	r3, [r4, #52]	@ 0x34
 8003758:	e7f2      	b.n	8003740 <HAL_UART_IRQHandler+0x1a4>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800375a:	8de1      	ldrh	r1, [r4, #46]	@ 0x2e
      if ((huart->RxXferCount > 0U)
 800375c:	8de0      	ldrh	r0, [r4, #46]	@ 0x2e
 800375e:	b280      	uxth	r0, r0
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003760:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 8003762:	2800      	cmp	r0, #0
 8003764:	d087      	beq.n	8003676 <HAL_UART_IRQHandler+0xda>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003766:	1a51      	subs	r1, r2, r1
 8003768:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 800376a:	2900      	cmp	r1, #0
 800376c:	d083      	beq.n	8003676 <HAL_UART_IRQHandler+0xda>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800376e:	f103 020c 	add.w	r2, r3, #12
 8003772:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003776:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800377a:	f103 050c 	add.w	r5, r3, #12
 800377e:	e845 2000 	strex	r0, r2, [r5]
 8003782:	2800      	cmp	r0, #0
 8003784:	d1f3      	bne.n	800376e <HAL_UART_IRQHandler+0x1d2>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003786:	f103 0214 	add.w	r2, r3, #20
 800378a:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800378e:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003792:	f103 0514 	add.w	r5, r3, #20
 8003796:	e845 2000 	strex	r0, r2, [r5]
 800379a:	2800      	cmp	r0, #0
 800379c:	d1f3      	bne.n	8003786 <HAL_UART_IRQHandler+0x1ea>
        huart->RxState = HAL_UART_STATE_READY;
 800379e:	2220      	movs	r2, #32
 80037a0:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037a4:	6320      	str	r0, [r4, #48]	@ 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037a6:	f103 020c 	add.w	r2, r3, #12
 80037aa:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037ae:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037b2:	f103 050c 	add.w	r5, r3, #12
 80037b6:	e845 2000 	strex	r0, r2, [r5]
 80037ba:	2800      	cmp	r0, #0
 80037bc:	d1f3      	bne.n	80037a6 <HAL_UART_IRQHandler+0x20a>
 80037be:	e7c9      	b.n	8003754 <HAL_UART_IRQHandler+0x1b8>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80037c0:	0616      	lsls	r6, r2, #24
 80037c2:	d528      	bpl.n	8003816 <HAL_UART_IRQHandler+0x27a>
 80037c4:	060d      	lsls	r5, r1, #24
 80037c6:	d526      	bpl.n	8003816 <HAL_UART_IRQHandler+0x27a>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80037c8:	f894 2041 	ldrb.w	r2, [r4, #65]	@ 0x41
 80037cc:	2a21      	cmp	r2, #33	@ 0x21
 80037ce:	f47f af52 	bne.w	8003676 <HAL_UART_IRQHandler+0xda>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037d2:	68a1      	ldr	r1, [r4, #8]
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80037d4:	6a22      	ldr	r2, [r4, #32]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037d6:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 80037da:	d117      	bne.n	800380c <HAL_UART_IRQHandler+0x270>
 80037dc:	6921      	ldr	r1, [r4, #16]
 80037de:	b9a9      	cbnz	r1, 800380c <HAL_UART_IRQHandler+0x270>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80037e0:	f832 1b02 	ldrh.w	r1, [r2], #2
 80037e4:	f3c1 0108 	ubfx	r1, r1, #0, #9
 80037e8:	6059      	str	r1, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80037ea:	6222      	str	r2, [r4, #32]
    if (--huart->TxXferCount == 0U)
 80037ec:	8ce2      	ldrh	r2, [r4, #38]	@ 0x26
 80037ee:	3a01      	subs	r2, #1
 80037f0:	b292      	uxth	r2, r2
 80037f2:	84e2      	strh	r2, [r4, #38]	@ 0x26
 80037f4:	2a00      	cmp	r2, #0
 80037f6:	f47f af3e 	bne.w	8003676 <HAL_UART_IRQHandler+0xda>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80037fa:	68da      	ldr	r2, [r3, #12]
 80037fc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003800:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003802:	68da      	ldr	r2, [r3, #12]
 8003804:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003808:	60da      	str	r2, [r3, #12]
 800380a:	e734      	b.n	8003676 <HAL_UART_IRQHandler+0xda>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800380c:	1c51      	adds	r1, r2, #1
 800380e:	6221      	str	r1, [r4, #32]
 8003810:	7812      	ldrb	r2, [r2, #0]
 8003812:	605a      	str	r2, [r3, #4]
 8003814:	e7ea      	b.n	80037ec <HAL_UART_IRQHandler+0x250>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003816:	0650      	lsls	r0, r2, #25
 8003818:	f57f af2d 	bpl.w	8003676 <HAL_UART_IRQHandler+0xda>
 800381c:	064a      	lsls	r2, r1, #25
 800381e:	f57f af2a 	bpl.w	8003676 <HAL_UART_IRQHandler+0xda>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003822:	68da      	ldr	r2, [r3, #12]
 8003824:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003828:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 800382a:	2320      	movs	r3, #32
 800382c:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  HAL_UART_TxCpltCallback(huart);
 8003830:	4620      	mov	r0, r4
 8003832:	f7ff fe4c 	bl	80034ce <HAL_UART_TxCpltCallback>
  return HAL_OK;
 8003836:	e71e      	b.n	8003676 <HAL_UART_IRQHandler+0xda>
 8003838:	080034d5 	.word	0x080034d5

0800383c <arm_mat_mult_f32>:
 800383c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003840:	8843      	ldrh	r3, [r0, #2]
 8003842:	880d      	ldrh	r5, [r1, #0]
 8003844:	8804      	ldrh	r4, [r0, #0]
 8003846:	b087      	sub	sp, #28
 8003848:	429d      	cmp	r5, r3
 800384a:	9403      	str	r4, [sp, #12]
 800384c:	f040 8094 	bne.w	8003978 <arm_mat_mult_f32+0x13c>
 8003850:	8813      	ldrh	r3, [r2, #0]
 8003852:	4626      	mov	r6, r4
 8003854:	42b3      	cmp	r3, r6
 8003856:	4614      	mov	r4, r2
 8003858:	f040 808e 	bne.w	8003978 <arm_mat_mult_f32+0x13c>
 800385c:	f8b1 8002 	ldrh.w	r8, [r1, #2]
 8003860:	8863      	ldrh	r3, [r4, #2]
 8003862:	4543      	cmp	r3, r8
 8003864:	f040 8088 	bne.w	8003978 <arm_mat_mult_f32+0x13c>
 8003868:	ea4f 0a95 	mov.w	sl, r5, lsr #2
 800386c:	f005 0303 	and.w	r3, r5, #3
 8003870:	461a      	mov	r2, r3
 8003872:	9301      	str	r3, [sp, #4]
 8003874:	f10a 33ff 	add.w	r3, sl, #4294967295
 8003878:	f8d0 e004 	ldr.w	lr, [r0, #4]
 800387c:	6860      	ldr	r0, [r4, #4]
 800387e:	9004      	str	r0, [sp, #16]
 8003880:	b29b      	uxth	r3, r3
 8003882:	3301      	adds	r3, #1
 8003884:	ea4f 1b08 	mov.w	fp, r8, lsl #4
 8003888:	3a01      	subs	r2, #1
 800388a:	eb0e 1c03 	add.w	ip, lr, r3, lsl #4
 800388e:	fb03 fb0b 	mul.w	fp, r3, fp
 8003892:	00ab      	lsls	r3, r5, #2
 8003894:	b292      	uxth	r2, r2
 8003896:	9305      	str	r3, [sp, #20]
 8003898:	2300      	movs	r3, #0
 800389a:	3201      	adds	r2, #1
 800389c:	9302      	str	r3, [sp, #8]
 800389e:	460b      	mov	r3, r1
 80038a0:	684c      	ldr	r4, [r1, #4]
 80038a2:	ea4f 0982 	mov.w	r9, r2, lsl #2
 80038a6:	4651      	mov	r1, sl
 80038a8:	ea4f 0088 	mov.w	r0, r8, lsl #2
 80038ac:	469a      	mov	sl, r3
 80038ae:	9b04      	ldr	r3, [sp, #16]
 80038b0:	9a02      	ldr	r2, [sp, #8]
 80038b2:	2600      	movs	r6, #0
 80038b4:	eb03 0782 	add.w	r7, r3, r2, lsl #2
 80038b8:	f10c 0510 	add.w	r5, ip, #16
 80038bc:	eddf 7a31 	vldr	s15, [pc, #196]	@ 8003984 <arm_mat_mult_f32+0x148>
 80038c0:	2900      	cmp	r1, #0
 80038c2:	d057      	beq.n	8003974 <arm_mat_mult_f32+0x138>
 80038c4:	f10e 0210 	add.w	r2, lr, #16
 80038c8:	4623      	mov	r3, r4
 80038ca:	ed93 5a00 	vldr	s10, [r3]
 80038ce:	ed52 5a04 	vldr	s11, [r2, #-16]
 80038d2:	ed12 7a03 	vldr	s14, [r2, #-12]
 80038d6:	ed52 6a02 	vldr	s13, [r2, #-8]
 80038da:	ed12 6a01 	vldr	s12, [r2, #-4]
 80038de:	4403      	add	r3, r0
 80038e0:	ee65 5a25 	vmul.f32	s11, s10, s11
 80038e4:	ed93 5a00 	vldr	s10, [r3]
 80038e8:	4403      	add	r3, r0
 80038ea:	ee27 7a05 	vmul.f32	s14, s14, s10
 80038ee:	ee75 7aa7 	vadd.f32	s15, s11, s15
 80038f2:	ed93 5a00 	vldr	s10, [r3]
 80038f6:	4403      	add	r3, r0
 80038f8:	ee77 5a27 	vadd.f32	s11, s14, s15
 80038fc:	ee65 7a26 	vmul.f32	s15, s10, s13
 8003900:	edd3 6a00 	vldr	s13, [r3]
 8003904:	ee37 7aa5 	vadd.f32	s14, s15, s11
 8003908:	3210      	adds	r2, #16
 800390a:	ee66 7a26 	vmul.f32	s15, s12, s13
 800390e:	42aa      	cmp	r2, r5
 8003910:	4403      	add	r3, r0
 8003912:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003916:	d1d8      	bne.n	80038ca <arm_mat_mult_f32+0x8e>
 8003918:	445c      	add	r4, fp
 800391a:	4663      	mov	r3, ip
 800391c:	9a01      	ldr	r2, [sp, #4]
 800391e:	b162      	cbz	r2, 800393a <arm_mat_mult_f32+0xfe>
 8003920:	eb03 0209 	add.w	r2, r3, r9
 8003924:	ecf3 6a01 	vldmia	r3!, {s13}
 8003928:	ed94 7a00 	vldr	s14, [r4]
 800392c:	ee26 7a87 	vmul.f32	s14, s13, s14
 8003930:	4293      	cmp	r3, r2
 8003932:	4404      	add	r4, r0
 8003934:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003938:	d1f4      	bne.n	8003924 <arm_mat_mult_f32+0xe8>
 800393a:	ece7 7a01 	vstmia	r7!, {s15}
 800393e:	3601      	adds	r6, #1
 8003940:	b2b6      	uxth	r6, r6
 8003942:	f8da 3004 	ldr.w	r3, [sl, #4]
 8003946:	45b0      	cmp	r8, r6
 8003948:	eb03 0486 	add.w	r4, r3, r6, lsl #2
 800394c:	d1b6      	bne.n	80038bc <arm_mat_mult_f32+0x80>
 800394e:	9a03      	ldr	r2, [sp, #12]
 8003950:	9c05      	ldr	r4, [sp, #20]
 8003952:	3a01      	subs	r2, #1
 8003954:	b292      	uxth	r2, r2
 8003956:	4615      	mov	r5, r2
 8003958:	9203      	str	r2, [sp, #12]
 800395a:	9a02      	ldr	r2, [sp, #8]
 800395c:	4442      	add	r2, r8
 800395e:	b292      	uxth	r2, r2
 8003960:	44a6      	add	lr, r4
 8003962:	44a4      	add	ip, r4
 8003964:	9202      	str	r2, [sp, #8]
 8003966:	461c      	mov	r4, r3
 8003968:	2d00      	cmp	r5, #0
 800396a:	d1a0      	bne.n	80038ae <arm_mat_mult_f32+0x72>
 800396c:	4628      	mov	r0, r5
 800396e:	b007      	add	sp, #28
 8003970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003974:	4673      	mov	r3, lr
 8003976:	e7d1      	b.n	800391c <arm_mat_mult_f32+0xe0>
 8003978:	f06f 0002 	mvn.w	r0, #2
 800397c:	b007      	add	sp, #28
 800397e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003982:	bf00      	nop
 8003984:	00000000 	.word	0x00000000

08003988 <arm_mat_init_f32>:
 8003988:	8001      	strh	r1, [r0, #0]
 800398a:	8042      	strh	r2, [r0, #2]
 800398c:	6043      	str	r3, [r0, #4]
 800398e:	4770      	bx	lr

08003990 <arm_mult_f32>:
 8003990:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003992:	ea5f 0e93 	movs.w	lr, r3, lsr #2
 8003996:	d033      	beq.n	8003a00 <arm_mult_f32+0x70>
 8003998:	f100 0610 	add.w	r6, r0, #16
 800399c:	f101 0510 	add.w	r5, r1, #16
 80039a0:	f102 0410 	add.w	r4, r2, #16
 80039a4:	4677      	mov	r7, lr
 80039a6:	ed16 6a04 	vldr	s12, [r6, #-16]
 80039aa:	ed55 4a04 	vldr	s9, [r5, #-16]
 80039ae:	ed56 6a02 	vldr	s13, [r6, #-8]
 80039b2:	ed15 5a02 	vldr	s10, [r5, #-8]
 80039b6:	ed16 7a03 	vldr	s14, [r6, #-12]
 80039ba:	ed55 5a03 	vldr	s11, [r5, #-12]
 80039be:	ed56 7a01 	vldr	s15, [r6, #-4]
 80039c2:	ee26 6a24 	vmul.f32	s12, s12, s9
 80039c6:	ee66 6a85 	vmul.f32	s13, s13, s10
 80039ca:	ed04 6a04 	vstr	s12, [r4, #-16]
 80039ce:	ed15 6a01 	vldr	s12, [r5, #-4]
 80039d2:	ed44 6a02 	vstr	s13, [r4, #-8]
 80039d6:	ee27 7a25 	vmul.f32	s14, s14, s11
 80039da:	ee67 7a86 	vmul.f32	s15, s15, s12
 80039de:	3f01      	subs	r7, #1
 80039e0:	ed04 7a03 	vstr	s14, [r4, #-12]
 80039e4:	ed44 7a01 	vstr	s15, [r4, #-4]
 80039e8:	f106 0610 	add.w	r6, r6, #16
 80039ec:	f105 0510 	add.w	r5, r5, #16
 80039f0:	f104 0410 	add.w	r4, r4, #16
 80039f4:	d1d7      	bne.n	80039a6 <arm_mult_f32+0x16>
 80039f6:	ea4f 140e 	mov.w	r4, lr, lsl #4
 80039fa:	4420      	add	r0, r4
 80039fc:	4421      	add	r1, r4
 80039fe:	4422      	add	r2, r4
 8003a00:	f013 0303 	ands.w	r3, r3, #3
 8003a04:	d009      	beq.n	8003a1a <arm_mult_f32+0x8a>
 8003a06:	ecf0 7a01 	vldmia	r0!, {s15}
 8003a0a:	ecb1 7a01 	vldmia	r1!, {s14}
 8003a0e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003a12:	3b01      	subs	r3, #1
 8003a14:	ece2 7a01 	vstmia	r2!, {s15}
 8003a18:	d1f5      	bne.n	8003a06 <arm_mult_f32+0x76>
 8003a1a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003a1c <arm_add_f32>:
 8003a1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a1e:	ea5f 0e93 	movs.w	lr, r3, lsr #2
 8003a22:	d033      	beq.n	8003a8c <arm_add_f32+0x70>
 8003a24:	f100 0610 	add.w	r6, r0, #16
 8003a28:	f101 0510 	add.w	r5, r1, #16
 8003a2c:	f102 0410 	add.w	r4, r2, #16
 8003a30:	4677      	mov	r7, lr
 8003a32:	ed16 6a03 	vldr	s12, [r6, #-12]
 8003a36:	ed15 4a03 	vldr	s8, [r5, #-12]
 8003a3a:	ed56 6a02 	vldr	s13, [r6, #-8]
 8003a3e:	ed55 4a02 	vldr	s9, [r5, #-8]
 8003a42:	ed16 7a01 	vldr	s14, [r6, #-4]
 8003a46:	ed15 5a01 	vldr	s10, [r5, #-4]
 8003a4a:	ed56 7a04 	vldr	s15, [r6, #-16]
 8003a4e:	ed55 5a04 	vldr	s11, [r5, #-16]
 8003a52:	ee36 6a04 	vadd.f32	s12, s12, s8
 8003a56:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8003a5a:	ee37 7a05 	vadd.f32	s14, s14, s10
 8003a5e:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8003a62:	3f01      	subs	r7, #1
 8003a64:	ed04 6a03 	vstr	s12, [r4, #-12]
 8003a68:	ed44 6a02 	vstr	s13, [r4, #-8]
 8003a6c:	ed04 7a01 	vstr	s14, [r4, #-4]
 8003a70:	ed44 7a04 	vstr	s15, [r4, #-16]
 8003a74:	f106 0610 	add.w	r6, r6, #16
 8003a78:	f105 0510 	add.w	r5, r5, #16
 8003a7c:	f104 0410 	add.w	r4, r4, #16
 8003a80:	d1d7      	bne.n	8003a32 <arm_add_f32+0x16>
 8003a82:	ea4f 140e 	mov.w	r4, lr, lsl #4
 8003a86:	4420      	add	r0, r4
 8003a88:	4421      	add	r1, r4
 8003a8a:	4422      	add	r2, r4
 8003a8c:	f013 0303 	ands.w	r3, r3, #3
 8003a90:	d009      	beq.n	8003aa6 <arm_add_f32+0x8a>
 8003a92:	ecf0 7a01 	vldmia	r0!, {s15}
 8003a96:	ecb1 7a01 	vldmia	r1!, {s14}
 8003a9a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003a9e:	3b01      	subs	r3, #1
 8003aa0:	ece2 7a01 	vstmia	r2!, {s15}
 8003aa4:	d1f5      	bne.n	8003a92 <arm_add_f32+0x76>
 8003aa6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003aa8 <__cvt>:
 8003aa8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003aac:	ec57 6b10 	vmov	r6, r7, d0
 8003ab0:	2f00      	cmp	r7, #0
 8003ab2:	460c      	mov	r4, r1
 8003ab4:	4619      	mov	r1, r3
 8003ab6:	463b      	mov	r3, r7
 8003ab8:	bfbb      	ittet	lt
 8003aba:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8003abe:	461f      	movlt	r7, r3
 8003ac0:	2300      	movge	r3, #0
 8003ac2:	232d      	movlt	r3, #45	@ 0x2d
 8003ac4:	700b      	strb	r3, [r1, #0]
 8003ac6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003ac8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8003acc:	4691      	mov	r9, r2
 8003ace:	f023 0820 	bic.w	r8, r3, #32
 8003ad2:	bfbc      	itt	lt
 8003ad4:	4632      	movlt	r2, r6
 8003ad6:	4616      	movlt	r6, r2
 8003ad8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003adc:	d005      	beq.n	8003aea <__cvt+0x42>
 8003ade:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8003ae2:	d100      	bne.n	8003ae6 <__cvt+0x3e>
 8003ae4:	3401      	adds	r4, #1
 8003ae6:	2102      	movs	r1, #2
 8003ae8:	e000      	b.n	8003aec <__cvt+0x44>
 8003aea:	2103      	movs	r1, #3
 8003aec:	ab03      	add	r3, sp, #12
 8003aee:	9301      	str	r3, [sp, #4]
 8003af0:	ab02      	add	r3, sp, #8
 8003af2:	9300      	str	r3, [sp, #0]
 8003af4:	ec47 6b10 	vmov	d0, r6, r7
 8003af8:	4653      	mov	r3, sl
 8003afa:	4622      	mov	r2, r4
 8003afc:	f000 fe70 	bl	80047e0 <_dtoa_r>
 8003b00:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8003b04:	4605      	mov	r5, r0
 8003b06:	d119      	bne.n	8003b3c <__cvt+0x94>
 8003b08:	f019 0f01 	tst.w	r9, #1
 8003b0c:	d00e      	beq.n	8003b2c <__cvt+0x84>
 8003b0e:	eb00 0904 	add.w	r9, r0, r4
 8003b12:	2200      	movs	r2, #0
 8003b14:	2300      	movs	r3, #0
 8003b16:	4630      	mov	r0, r6
 8003b18:	4639      	mov	r1, r7
 8003b1a:	f7fc ffdd 	bl	8000ad8 <__aeabi_dcmpeq>
 8003b1e:	b108      	cbz	r0, 8003b24 <__cvt+0x7c>
 8003b20:	f8cd 900c 	str.w	r9, [sp, #12]
 8003b24:	2230      	movs	r2, #48	@ 0x30
 8003b26:	9b03      	ldr	r3, [sp, #12]
 8003b28:	454b      	cmp	r3, r9
 8003b2a:	d31e      	bcc.n	8003b6a <__cvt+0xc2>
 8003b2c:	9b03      	ldr	r3, [sp, #12]
 8003b2e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8003b30:	1b5b      	subs	r3, r3, r5
 8003b32:	4628      	mov	r0, r5
 8003b34:	6013      	str	r3, [r2, #0]
 8003b36:	b004      	add	sp, #16
 8003b38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b3c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003b40:	eb00 0904 	add.w	r9, r0, r4
 8003b44:	d1e5      	bne.n	8003b12 <__cvt+0x6a>
 8003b46:	7803      	ldrb	r3, [r0, #0]
 8003b48:	2b30      	cmp	r3, #48	@ 0x30
 8003b4a:	d10a      	bne.n	8003b62 <__cvt+0xba>
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	2300      	movs	r3, #0
 8003b50:	4630      	mov	r0, r6
 8003b52:	4639      	mov	r1, r7
 8003b54:	f7fc ffc0 	bl	8000ad8 <__aeabi_dcmpeq>
 8003b58:	b918      	cbnz	r0, 8003b62 <__cvt+0xba>
 8003b5a:	f1c4 0401 	rsb	r4, r4, #1
 8003b5e:	f8ca 4000 	str.w	r4, [sl]
 8003b62:	f8da 3000 	ldr.w	r3, [sl]
 8003b66:	4499      	add	r9, r3
 8003b68:	e7d3      	b.n	8003b12 <__cvt+0x6a>
 8003b6a:	1c59      	adds	r1, r3, #1
 8003b6c:	9103      	str	r1, [sp, #12]
 8003b6e:	701a      	strb	r2, [r3, #0]
 8003b70:	e7d9      	b.n	8003b26 <__cvt+0x7e>

08003b72 <__exponent>:
 8003b72:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003b74:	2900      	cmp	r1, #0
 8003b76:	bfba      	itte	lt
 8003b78:	4249      	neglt	r1, r1
 8003b7a:	232d      	movlt	r3, #45	@ 0x2d
 8003b7c:	232b      	movge	r3, #43	@ 0x2b
 8003b7e:	2909      	cmp	r1, #9
 8003b80:	7002      	strb	r2, [r0, #0]
 8003b82:	7043      	strb	r3, [r0, #1]
 8003b84:	dd29      	ble.n	8003bda <__exponent+0x68>
 8003b86:	f10d 0307 	add.w	r3, sp, #7
 8003b8a:	461d      	mov	r5, r3
 8003b8c:	270a      	movs	r7, #10
 8003b8e:	461a      	mov	r2, r3
 8003b90:	fbb1 f6f7 	udiv	r6, r1, r7
 8003b94:	fb07 1416 	mls	r4, r7, r6, r1
 8003b98:	3430      	adds	r4, #48	@ 0x30
 8003b9a:	f802 4c01 	strb.w	r4, [r2, #-1]
 8003b9e:	460c      	mov	r4, r1
 8003ba0:	2c63      	cmp	r4, #99	@ 0x63
 8003ba2:	f103 33ff 	add.w	r3, r3, #4294967295
 8003ba6:	4631      	mov	r1, r6
 8003ba8:	dcf1      	bgt.n	8003b8e <__exponent+0x1c>
 8003baa:	3130      	adds	r1, #48	@ 0x30
 8003bac:	1e94      	subs	r4, r2, #2
 8003bae:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003bb2:	1c41      	adds	r1, r0, #1
 8003bb4:	4623      	mov	r3, r4
 8003bb6:	42ab      	cmp	r3, r5
 8003bb8:	d30a      	bcc.n	8003bd0 <__exponent+0x5e>
 8003bba:	f10d 0309 	add.w	r3, sp, #9
 8003bbe:	1a9b      	subs	r3, r3, r2
 8003bc0:	42ac      	cmp	r4, r5
 8003bc2:	bf88      	it	hi
 8003bc4:	2300      	movhi	r3, #0
 8003bc6:	3302      	adds	r3, #2
 8003bc8:	4403      	add	r3, r0
 8003bca:	1a18      	subs	r0, r3, r0
 8003bcc:	b003      	add	sp, #12
 8003bce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003bd0:	f813 6b01 	ldrb.w	r6, [r3], #1
 8003bd4:	f801 6f01 	strb.w	r6, [r1, #1]!
 8003bd8:	e7ed      	b.n	8003bb6 <__exponent+0x44>
 8003bda:	2330      	movs	r3, #48	@ 0x30
 8003bdc:	3130      	adds	r1, #48	@ 0x30
 8003bde:	7083      	strb	r3, [r0, #2]
 8003be0:	70c1      	strb	r1, [r0, #3]
 8003be2:	1d03      	adds	r3, r0, #4
 8003be4:	e7f1      	b.n	8003bca <__exponent+0x58>
	...

08003be8 <_printf_float>:
 8003be8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bec:	b08d      	sub	sp, #52	@ 0x34
 8003bee:	460c      	mov	r4, r1
 8003bf0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8003bf4:	4616      	mov	r6, r2
 8003bf6:	461f      	mov	r7, r3
 8003bf8:	4605      	mov	r5, r0
 8003bfa:	f000 fcef 	bl	80045dc <_localeconv_r>
 8003bfe:	6803      	ldr	r3, [r0, #0]
 8003c00:	9304      	str	r3, [sp, #16]
 8003c02:	4618      	mov	r0, r3
 8003c04:	f7fc fb3c 	bl	8000280 <strlen>
 8003c08:	2300      	movs	r3, #0
 8003c0a:	930a      	str	r3, [sp, #40]	@ 0x28
 8003c0c:	f8d8 3000 	ldr.w	r3, [r8]
 8003c10:	9005      	str	r0, [sp, #20]
 8003c12:	3307      	adds	r3, #7
 8003c14:	f023 0307 	bic.w	r3, r3, #7
 8003c18:	f103 0208 	add.w	r2, r3, #8
 8003c1c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8003c20:	f8d4 b000 	ldr.w	fp, [r4]
 8003c24:	f8c8 2000 	str.w	r2, [r8]
 8003c28:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003c2c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8003c30:	9307      	str	r3, [sp, #28]
 8003c32:	f8cd 8018 	str.w	r8, [sp, #24]
 8003c36:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8003c3a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003c3e:	4b9c      	ldr	r3, [pc, #624]	@ (8003eb0 <_printf_float+0x2c8>)
 8003c40:	f04f 32ff 	mov.w	r2, #4294967295
 8003c44:	f7fc ff7a 	bl	8000b3c <__aeabi_dcmpun>
 8003c48:	bb70      	cbnz	r0, 8003ca8 <_printf_float+0xc0>
 8003c4a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003c4e:	4b98      	ldr	r3, [pc, #608]	@ (8003eb0 <_printf_float+0x2c8>)
 8003c50:	f04f 32ff 	mov.w	r2, #4294967295
 8003c54:	f7fc ff54 	bl	8000b00 <__aeabi_dcmple>
 8003c58:	bb30      	cbnz	r0, 8003ca8 <_printf_float+0xc0>
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	4640      	mov	r0, r8
 8003c60:	4649      	mov	r1, r9
 8003c62:	f7fc ff43 	bl	8000aec <__aeabi_dcmplt>
 8003c66:	b110      	cbz	r0, 8003c6e <_printf_float+0x86>
 8003c68:	232d      	movs	r3, #45	@ 0x2d
 8003c6a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003c6e:	4a91      	ldr	r2, [pc, #580]	@ (8003eb4 <_printf_float+0x2cc>)
 8003c70:	4b91      	ldr	r3, [pc, #580]	@ (8003eb8 <_printf_float+0x2d0>)
 8003c72:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8003c76:	bf8c      	ite	hi
 8003c78:	4690      	movhi	r8, r2
 8003c7a:	4698      	movls	r8, r3
 8003c7c:	2303      	movs	r3, #3
 8003c7e:	6123      	str	r3, [r4, #16]
 8003c80:	f02b 0304 	bic.w	r3, fp, #4
 8003c84:	6023      	str	r3, [r4, #0]
 8003c86:	f04f 0900 	mov.w	r9, #0
 8003c8a:	9700      	str	r7, [sp, #0]
 8003c8c:	4633      	mov	r3, r6
 8003c8e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8003c90:	4621      	mov	r1, r4
 8003c92:	4628      	mov	r0, r5
 8003c94:	f000 f9d2 	bl	800403c <_printf_common>
 8003c98:	3001      	adds	r0, #1
 8003c9a:	f040 808d 	bne.w	8003db8 <_printf_float+0x1d0>
 8003c9e:	f04f 30ff 	mov.w	r0, #4294967295
 8003ca2:	b00d      	add	sp, #52	@ 0x34
 8003ca4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ca8:	4642      	mov	r2, r8
 8003caa:	464b      	mov	r3, r9
 8003cac:	4640      	mov	r0, r8
 8003cae:	4649      	mov	r1, r9
 8003cb0:	f7fc ff44 	bl	8000b3c <__aeabi_dcmpun>
 8003cb4:	b140      	cbz	r0, 8003cc8 <_printf_float+0xe0>
 8003cb6:	464b      	mov	r3, r9
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	bfbc      	itt	lt
 8003cbc:	232d      	movlt	r3, #45	@ 0x2d
 8003cbe:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8003cc2:	4a7e      	ldr	r2, [pc, #504]	@ (8003ebc <_printf_float+0x2d4>)
 8003cc4:	4b7e      	ldr	r3, [pc, #504]	@ (8003ec0 <_printf_float+0x2d8>)
 8003cc6:	e7d4      	b.n	8003c72 <_printf_float+0x8a>
 8003cc8:	6863      	ldr	r3, [r4, #4]
 8003cca:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8003cce:	9206      	str	r2, [sp, #24]
 8003cd0:	1c5a      	adds	r2, r3, #1
 8003cd2:	d13b      	bne.n	8003d4c <_printf_float+0x164>
 8003cd4:	2306      	movs	r3, #6
 8003cd6:	6063      	str	r3, [r4, #4]
 8003cd8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8003cdc:	2300      	movs	r3, #0
 8003cde:	6022      	str	r2, [r4, #0]
 8003ce0:	9303      	str	r3, [sp, #12]
 8003ce2:	ab0a      	add	r3, sp, #40	@ 0x28
 8003ce4:	e9cd a301 	strd	sl, r3, [sp, #4]
 8003ce8:	ab09      	add	r3, sp, #36	@ 0x24
 8003cea:	9300      	str	r3, [sp, #0]
 8003cec:	6861      	ldr	r1, [r4, #4]
 8003cee:	ec49 8b10 	vmov	d0, r8, r9
 8003cf2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8003cf6:	4628      	mov	r0, r5
 8003cf8:	f7ff fed6 	bl	8003aa8 <__cvt>
 8003cfc:	9b06      	ldr	r3, [sp, #24]
 8003cfe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8003d00:	2b47      	cmp	r3, #71	@ 0x47
 8003d02:	4680      	mov	r8, r0
 8003d04:	d129      	bne.n	8003d5a <_printf_float+0x172>
 8003d06:	1cc8      	adds	r0, r1, #3
 8003d08:	db02      	blt.n	8003d10 <_printf_float+0x128>
 8003d0a:	6863      	ldr	r3, [r4, #4]
 8003d0c:	4299      	cmp	r1, r3
 8003d0e:	dd41      	ble.n	8003d94 <_printf_float+0x1ac>
 8003d10:	f1aa 0a02 	sub.w	sl, sl, #2
 8003d14:	fa5f fa8a 	uxtb.w	sl, sl
 8003d18:	3901      	subs	r1, #1
 8003d1a:	4652      	mov	r2, sl
 8003d1c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8003d20:	9109      	str	r1, [sp, #36]	@ 0x24
 8003d22:	f7ff ff26 	bl	8003b72 <__exponent>
 8003d26:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003d28:	1813      	adds	r3, r2, r0
 8003d2a:	2a01      	cmp	r2, #1
 8003d2c:	4681      	mov	r9, r0
 8003d2e:	6123      	str	r3, [r4, #16]
 8003d30:	dc02      	bgt.n	8003d38 <_printf_float+0x150>
 8003d32:	6822      	ldr	r2, [r4, #0]
 8003d34:	07d2      	lsls	r2, r2, #31
 8003d36:	d501      	bpl.n	8003d3c <_printf_float+0x154>
 8003d38:	3301      	adds	r3, #1
 8003d3a:	6123      	str	r3, [r4, #16]
 8003d3c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d0a2      	beq.n	8003c8a <_printf_float+0xa2>
 8003d44:	232d      	movs	r3, #45	@ 0x2d
 8003d46:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003d4a:	e79e      	b.n	8003c8a <_printf_float+0xa2>
 8003d4c:	9a06      	ldr	r2, [sp, #24]
 8003d4e:	2a47      	cmp	r2, #71	@ 0x47
 8003d50:	d1c2      	bne.n	8003cd8 <_printf_float+0xf0>
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d1c0      	bne.n	8003cd8 <_printf_float+0xf0>
 8003d56:	2301      	movs	r3, #1
 8003d58:	e7bd      	b.n	8003cd6 <_printf_float+0xee>
 8003d5a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003d5e:	d9db      	bls.n	8003d18 <_printf_float+0x130>
 8003d60:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8003d64:	d118      	bne.n	8003d98 <_printf_float+0x1b0>
 8003d66:	2900      	cmp	r1, #0
 8003d68:	6863      	ldr	r3, [r4, #4]
 8003d6a:	dd0b      	ble.n	8003d84 <_printf_float+0x19c>
 8003d6c:	6121      	str	r1, [r4, #16]
 8003d6e:	b913      	cbnz	r3, 8003d76 <_printf_float+0x18e>
 8003d70:	6822      	ldr	r2, [r4, #0]
 8003d72:	07d0      	lsls	r0, r2, #31
 8003d74:	d502      	bpl.n	8003d7c <_printf_float+0x194>
 8003d76:	3301      	adds	r3, #1
 8003d78:	440b      	add	r3, r1
 8003d7a:	6123      	str	r3, [r4, #16]
 8003d7c:	65a1      	str	r1, [r4, #88]	@ 0x58
 8003d7e:	f04f 0900 	mov.w	r9, #0
 8003d82:	e7db      	b.n	8003d3c <_printf_float+0x154>
 8003d84:	b913      	cbnz	r3, 8003d8c <_printf_float+0x1a4>
 8003d86:	6822      	ldr	r2, [r4, #0]
 8003d88:	07d2      	lsls	r2, r2, #31
 8003d8a:	d501      	bpl.n	8003d90 <_printf_float+0x1a8>
 8003d8c:	3302      	adds	r3, #2
 8003d8e:	e7f4      	b.n	8003d7a <_printf_float+0x192>
 8003d90:	2301      	movs	r3, #1
 8003d92:	e7f2      	b.n	8003d7a <_printf_float+0x192>
 8003d94:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8003d98:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003d9a:	4299      	cmp	r1, r3
 8003d9c:	db05      	blt.n	8003daa <_printf_float+0x1c2>
 8003d9e:	6823      	ldr	r3, [r4, #0]
 8003da0:	6121      	str	r1, [r4, #16]
 8003da2:	07d8      	lsls	r0, r3, #31
 8003da4:	d5ea      	bpl.n	8003d7c <_printf_float+0x194>
 8003da6:	1c4b      	adds	r3, r1, #1
 8003da8:	e7e7      	b.n	8003d7a <_printf_float+0x192>
 8003daa:	2900      	cmp	r1, #0
 8003dac:	bfd4      	ite	le
 8003dae:	f1c1 0202 	rsble	r2, r1, #2
 8003db2:	2201      	movgt	r2, #1
 8003db4:	4413      	add	r3, r2
 8003db6:	e7e0      	b.n	8003d7a <_printf_float+0x192>
 8003db8:	6823      	ldr	r3, [r4, #0]
 8003dba:	055a      	lsls	r2, r3, #21
 8003dbc:	d407      	bmi.n	8003dce <_printf_float+0x1e6>
 8003dbe:	6923      	ldr	r3, [r4, #16]
 8003dc0:	4642      	mov	r2, r8
 8003dc2:	4631      	mov	r1, r6
 8003dc4:	4628      	mov	r0, r5
 8003dc6:	47b8      	blx	r7
 8003dc8:	3001      	adds	r0, #1
 8003dca:	d12b      	bne.n	8003e24 <_printf_float+0x23c>
 8003dcc:	e767      	b.n	8003c9e <_printf_float+0xb6>
 8003dce:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003dd2:	f240 80dd 	bls.w	8003f90 <_printf_float+0x3a8>
 8003dd6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003dda:	2200      	movs	r2, #0
 8003ddc:	2300      	movs	r3, #0
 8003dde:	f7fc fe7b 	bl	8000ad8 <__aeabi_dcmpeq>
 8003de2:	2800      	cmp	r0, #0
 8003de4:	d033      	beq.n	8003e4e <_printf_float+0x266>
 8003de6:	4a37      	ldr	r2, [pc, #220]	@ (8003ec4 <_printf_float+0x2dc>)
 8003de8:	2301      	movs	r3, #1
 8003dea:	4631      	mov	r1, r6
 8003dec:	4628      	mov	r0, r5
 8003dee:	47b8      	blx	r7
 8003df0:	3001      	adds	r0, #1
 8003df2:	f43f af54 	beq.w	8003c9e <_printf_float+0xb6>
 8003df6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8003dfa:	4543      	cmp	r3, r8
 8003dfc:	db02      	blt.n	8003e04 <_printf_float+0x21c>
 8003dfe:	6823      	ldr	r3, [r4, #0]
 8003e00:	07d8      	lsls	r0, r3, #31
 8003e02:	d50f      	bpl.n	8003e24 <_printf_float+0x23c>
 8003e04:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003e08:	4631      	mov	r1, r6
 8003e0a:	4628      	mov	r0, r5
 8003e0c:	47b8      	blx	r7
 8003e0e:	3001      	adds	r0, #1
 8003e10:	f43f af45 	beq.w	8003c9e <_printf_float+0xb6>
 8003e14:	f04f 0900 	mov.w	r9, #0
 8003e18:	f108 38ff 	add.w	r8, r8, #4294967295
 8003e1c:	f104 0a1a 	add.w	sl, r4, #26
 8003e20:	45c8      	cmp	r8, r9
 8003e22:	dc09      	bgt.n	8003e38 <_printf_float+0x250>
 8003e24:	6823      	ldr	r3, [r4, #0]
 8003e26:	079b      	lsls	r3, r3, #30
 8003e28:	f100 8103 	bmi.w	8004032 <_printf_float+0x44a>
 8003e2c:	68e0      	ldr	r0, [r4, #12]
 8003e2e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003e30:	4298      	cmp	r0, r3
 8003e32:	bfb8      	it	lt
 8003e34:	4618      	movlt	r0, r3
 8003e36:	e734      	b.n	8003ca2 <_printf_float+0xba>
 8003e38:	2301      	movs	r3, #1
 8003e3a:	4652      	mov	r2, sl
 8003e3c:	4631      	mov	r1, r6
 8003e3e:	4628      	mov	r0, r5
 8003e40:	47b8      	blx	r7
 8003e42:	3001      	adds	r0, #1
 8003e44:	f43f af2b 	beq.w	8003c9e <_printf_float+0xb6>
 8003e48:	f109 0901 	add.w	r9, r9, #1
 8003e4c:	e7e8      	b.n	8003e20 <_printf_float+0x238>
 8003e4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	dc39      	bgt.n	8003ec8 <_printf_float+0x2e0>
 8003e54:	4a1b      	ldr	r2, [pc, #108]	@ (8003ec4 <_printf_float+0x2dc>)
 8003e56:	2301      	movs	r3, #1
 8003e58:	4631      	mov	r1, r6
 8003e5a:	4628      	mov	r0, r5
 8003e5c:	47b8      	blx	r7
 8003e5e:	3001      	adds	r0, #1
 8003e60:	f43f af1d 	beq.w	8003c9e <_printf_float+0xb6>
 8003e64:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8003e68:	ea59 0303 	orrs.w	r3, r9, r3
 8003e6c:	d102      	bne.n	8003e74 <_printf_float+0x28c>
 8003e6e:	6823      	ldr	r3, [r4, #0]
 8003e70:	07d9      	lsls	r1, r3, #31
 8003e72:	d5d7      	bpl.n	8003e24 <_printf_float+0x23c>
 8003e74:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003e78:	4631      	mov	r1, r6
 8003e7a:	4628      	mov	r0, r5
 8003e7c:	47b8      	blx	r7
 8003e7e:	3001      	adds	r0, #1
 8003e80:	f43f af0d 	beq.w	8003c9e <_printf_float+0xb6>
 8003e84:	f04f 0a00 	mov.w	sl, #0
 8003e88:	f104 0b1a 	add.w	fp, r4, #26
 8003e8c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003e8e:	425b      	negs	r3, r3
 8003e90:	4553      	cmp	r3, sl
 8003e92:	dc01      	bgt.n	8003e98 <_printf_float+0x2b0>
 8003e94:	464b      	mov	r3, r9
 8003e96:	e793      	b.n	8003dc0 <_printf_float+0x1d8>
 8003e98:	2301      	movs	r3, #1
 8003e9a:	465a      	mov	r2, fp
 8003e9c:	4631      	mov	r1, r6
 8003e9e:	4628      	mov	r0, r5
 8003ea0:	47b8      	blx	r7
 8003ea2:	3001      	adds	r0, #1
 8003ea4:	f43f aefb 	beq.w	8003c9e <_printf_float+0xb6>
 8003ea8:	f10a 0a01 	add.w	sl, sl, #1
 8003eac:	e7ee      	b.n	8003e8c <_printf_float+0x2a4>
 8003eae:	bf00      	nop
 8003eb0:	7fefffff 	.word	0x7fefffff
 8003eb4:	08007239 	.word	0x08007239
 8003eb8:	08007235 	.word	0x08007235
 8003ebc:	08007241 	.word	0x08007241
 8003ec0:	0800723d 	.word	0x0800723d
 8003ec4:	08007245 	.word	0x08007245
 8003ec8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003eca:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8003ece:	4553      	cmp	r3, sl
 8003ed0:	bfa8      	it	ge
 8003ed2:	4653      	movge	r3, sl
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	4699      	mov	r9, r3
 8003ed8:	dc36      	bgt.n	8003f48 <_printf_float+0x360>
 8003eda:	f04f 0b00 	mov.w	fp, #0
 8003ede:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003ee2:	f104 021a 	add.w	r2, r4, #26
 8003ee6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003ee8:	9306      	str	r3, [sp, #24]
 8003eea:	eba3 0309 	sub.w	r3, r3, r9
 8003eee:	455b      	cmp	r3, fp
 8003ef0:	dc31      	bgt.n	8003f56 <_printf_float+0x36e>
 8003ef2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003ef4:	459a      	cmp	sl, r3
 8003ef6:	dc3a      	bgt.n	8003f6e <_printf_float+0x386>
 8003ef8:	6823      	ldr	r3, [r4, #0]
 8003efa:	07da      	lsls	r2, r3, #31
 8003efc:	d437      	bmi.n	8003f6e <_printf_float+0x386>
 8003efe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003f00:	ebaa 0903 	sub.w	r9, sl, r3
 8003f04:	9b06      	ldr	r3, [sp, #24]
 8003f06:	ebaa 0303 	sub.w	r3, sl, r3
 8003f0a:	4599      	cmp	r9, r3
 8003f0c:	bfa8      	it	ge
 8003f0e:	4699      	movge	r9, r3
 8003f10:	f1b9 0f00 	cmp.w	r9, #0
 8003f14:	dc33      	bgt.n	8003f7e <_printf_float+0x396>
 8003f16:	f04f 0800 	mov.w	r8, #0
 8003f1a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003f1e:	f104 0b1a 	add.w	fp, r4, #26
 8003f22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003f24:	ebaa 0303 	sub.w	r3, sl, r3
 8003f28:	eba3 0309 	sub.w	r3, r3, r9
 8003f2c:	4543      	cmp	r3, r8
 8003f2e:	f77f af79 	ble.w	8003e24 <_printf_float+0x23c>
 8003f32:	2301      	movs	r3, #1
 8003f34:	465a      	mov	r2, fp
 8003f36:	4631      	mov	r1, r6
 8003f38:	4628      	mov	r0, r5
 8003f3a:	47b8      	blx	r7
 8003f3c:	3001      	adds	r0, #1
 8003f3e:	f43f aeae 	beq.w	8003c9e <_printf_float+0xb6>
 8003f42:	f108 0801 	add.w	r8, r8, #1
 8003f46:	e7ec      	b.n	8003f22 <_printf_float+0x33a>
 8003f48:	4642      	mov	r2, r8
 8003f4a:	4631      	mov	r1, r6
 8003f4c:	4628      	mov	r0, r5
 8003f4e:	47b8      	blx	r7
 8003f50:	3001      	adds	r0, #1
 8003f52:	d1c2      	bne.n	8003eda <_printf_float+0x2f2>
 8003f54:	e6a3      	b.n	8003c9e <_printf_float+0xb6>
 8003f56:	2301      	movs	r3, #1
 8003f58:	4631      	mov	r1, r6
 8003f5a:	4628      	mov	r0, r5
 8003f5c:	9206      	str	r2, [sp, #24]
 8003f5e:	47b8      	blx	r7
 8003f60:	3001      	adds	r0, #1
 8003f62:	f43f ae9c 	beq.w	8003c9e <_printf_float+0xb6>
 8003f66:	9a06      	ldr	r2, [sp, #24]
 8003f68:	f10b 0b01 	add.w	fp, fp, #1
 8003f6c:	e7bb      	b.n	8003ee6 <_printf_float+0x2fe>
 8003f6e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003f72:	4631      	mov	r1, r6
 8003f74:	4628      	mov	r0, r5
 8003f76:	47b8      	blx	r7
 8003f78:	3001      	adds	r0, #1
 8003f7a:	d1c0      	bne.n	8003efe <_printf_float+0x316>
 8003f7c:	e68f      	b.n	8003c9e <_printf_float+0xb6>
 8003f7e:	9a06      	ldr	r2, [sp, #24]
 8003f80:	464b      	mov	r3, r9
 8003f82:	4442      	add	r2, r8
 8003f84:	4631      	mov	r1, r6
 8003f86:	4628      	mov	r0, r5
 8003f88:	47b8      	blx	r7
 8003f8a:	3001      	adds	r0, #1
 8003f8c:	d1c3      	bne.n	8003f16 <_printf_float+0x32e>
 8003f8e:	e686      	b.n	8003c9e <_printf_float+0xb6>
 8003f90:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8003f94:	f1ba 0f01 	cmp.w	sl, #1
 8003f98:	dc01      	bgt.n	8003f9e <_printf_float+0x3b6>
 8003f9a:	07db      	lsls	r3, r3, #31
 8003f9c:	d536      	bpl.n	800400c <_printf_float+0x424>
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	4642      	mov	r2, r8
 8003fa2:	4631      	mov	r1, r6
 8003fa4:	4628      	mov	r0, r5
 8003fa6:	47b8      	blx	r7
 8003fa8:	3001      	adds	r0, #1
 8003faa:	f43f ae78 	beq.w	8003c9e <_printf_float+0xb6>
 8003fae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003fb2:	4631      	mov	r1, r6
 8003fb4:	4628      	mov	r0, r5
 8003fb6:	47b8      	blx	r7
 8003fb8:	3001      	adds	r0, #1
 8003fba:	f43f ae70 	beq.w	8003c9e <_printf_float+0xb6>
 8003fbe:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003fca:	f7fc fd85 	bl	8000ad8 <__aeabi_dcmpeq>
 8003fce:	b9c0      	cbnz	r0, 8004002 <_printf_float+0x41a>
 8003fd0:	4653      	mov	r3, sl
 8003fd2:	f108 0201 	add.w	r2, r8, #1
 8003fd6:	4631      	mov	r1, r6
 8003fd8:	4628      	mov	r0, r5
 8003fda:	47b8      	blx	r7
 8003fdc:	3001      	adds	r0, #1
 8003fde:	d10c      	bne.n	8003ffa <_printf_float+0x412>
 8003fe0:	e65d      	b.n	8003c9e <_printf_float+0xb6>
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	465a      	mov	r2, fp
 8003fe6:	4631      	mov	r1, r6
 8003fe8:	4628      	mov	r0, r5
 8003fea:	47b8      	blx	r7
 8003fec:	3001      	adds	r0, #1
 8003fee:	f43f ae56 	beq.w	8003c9e <_printf_float+0xb6>
 8003ff2:	f108 0801 	add.w	r8, r8, #1
 8003ff6:	45d0      	cmp	r8, sl
 8003ff8:	dbf3      	blt.n	8003fe2 <_printf_float+0x3fa>
 8003ffa:	464b      	mov	r3, r9
 8003ffc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004000:	e6df      	b.n	8003dc2 <_printf_float+0x1da>
 8004002:	f04f 0800 	mov.w	r8, #0
 8004006:	f104 0b1a 	add.w	fp, r4, #26
 800400a:	e7f4      	b.n	8003ff6 <_printf_float+0x40e>
 800400c:	2301      	movs	r3, #1
 800400e:	4642      	mov	r2, r8
 8004010:	e7e1      	b.n	8003fd6 <_printf_float+0x3ee>
 8004012:	2301      	movs	r3, #1
 8004014:	464a      	mov	r2, r9
 8004016:	4631      	mov	r1, r6
 8004018:	4628      	mov	r0, r5
 800401a:	47b8      	blx	r7
 800401c:	3001      	adds	r0, #1
 800401e:	f43f ae3e 	beq.w	8003c9e <_printf_float+0xb6>
 8004022:	f108 0801 	add.w	r8, r8, #1
 8004026:	68e3      	ldr	r3, [r4, #12]
 8004028:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800402a:	1a5b      	subs	r3, r3, r1
 800402c:	4543      	cmp	r3, r8
 800402e:	dcf0      	bgt.n	8004012 <_printf_float+0x42a>
 8004030:	e6fc      	b.n	8003e2c <_printf_float+0x244>
 8004032:	f04f 0800 	mov.w	r8, #0
 8004036:	f104 0919 	add.w	r9, r4, #25
 800403a:	e7f4      	b.n	8004026 <_printf_float+0x43e>

0800403c <_printf_common>:
 800403c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004040:	4616      	mov	r6, r2
 8004042:	4698      	mov	r8, r3
 8004044:	688a      	ldr	r2, [r1, #8]
 8004046:	690b      	ldr	r3, [r1, #16]
 8004048:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800404c:	4293      	cmp	r3, r2
 800404e:	bfb8      	it	lt
 8004050:	4613      	movlt	r3, r2
 8004052:	6033      	str	r3, [r6, #0]
 8004054:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004058:	4607      	mov	r7, r0
 800405a:	460c      	mov	r4, r1
 800405c:	b10a      	cbz	r2, 8004062 <_printf_common+0x26>
 800405e:	3301      	adds	r3, #1
 8004060:	6033      	str	r3, [r6, #0]
 8004062:	6823      	ldr	r3, [r4, #0]
 8004064:	0699      	lsls	r1, r3, #26
 8004066:	bf42      	ittt	mi
 8004068:	6833      	ldrmi	r3, [r6, #0]
 800406a:	3302      	addmi	r3, #2
 800406c:	6033      	strmi	r3, [r6, #0]
 800406e:	6825      	ldr	r5, [r4, #0]
 8004070:	f015 0506 	ands.w	r5, r5, #6
 8004074:	d106      	bne.n	8004084 <_printf_common+0x48>
 8004076:	f104 0a19 	add.w	sl, r4, #25
 800407a:	68e3      	ldr	r3, [r4, #12]
 800407c:	6832      	ldr	r2, [r6, #0]
 800407e:	1a9b      	subs	r3, r3, r2
 8004080:	42ab      	cmp	r3, r5
 8004082:	dc26      	bgt.n	80040d2 <_printf_common+0x96>
 8004084:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004088:	6822      	ldr	r2, [r4, #0]
 800408a:	3b00      	subs	r3, #0
 800408c:	bf18      	it	ne
 800408e:	2301      	movne	r3, #1
 8004090:	0692      	lsls	r2, r2, #26
 8004092:	d42b      	bmi.n	80040ec <_printf_common+0xb0>
 8004094:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004098:	4641      	mov	r1, r8
 800409a:	4638      	mov	r0, r7
 800409c:	47c8      	blx	r9
 800409e:	3001      	adds	r0, #1
 80040a0:	d01e      	beq.n	80040e0 <_printf_common+0xa4>
 80040a2:	6823      	ldr	r3, [r4, #0]
 80040a4:	6922      	ldr	r2, [r4, #16]
 80040a6:	f003 0306 	and.w	r3, r3, #6
 80040aa:	2b04      	cmp	r3, #4
 80040ac:	bf02      	ittt	eq
 80040ae:	68e5      	ldreq	r5, [r4, #12]
 80040b0:	6833      	ldreq	r3, [r6, #0]
 80040b2:	1aed      	subeq	r5, r5, r3
 80040b4:	68a3      	ldr	r3, [r4, #8]
 80040b6:	bf0c      	ite	eq
 80040b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80040bc:	2500      	movne	r5, #0
 80040be:	4293      	cmp	r3, r2
 80040c0:	bfc4      	itt	gt
 80040c2:	1a9b      	subgt	r3, r3, r2
 80040c4:	18ed      	addgt	r5, r5, r3
 80040c6:	2600      	movs	r6, #0
 80040c8:	341a      	adds	r4, #26
 80040ca:	42b5      	cmp	r5, r6
 80040cc:	d11a      	bne.n	8004104 <_printf_common+0xc8>
 80040ce:	2000      	movs	r0, #0
 80040d0:	e008      	b.n	80040e4 <_printf_common+0xa8>
 80040d2:	2301      	movs	r3, #1
 80040d4:	4652      	mov	r2, sl
 80040d6:	4641      	mov	r1, r8
 80040d8:	4638      	mov	r0, r7
 80040da:	47c8      	blx	r9
 80040dc:	3001      	adds	r0, #1
 80040de:	d103      	bne.n	80040e8 <_printf_common+0xac>
 80040e0:	f04f 30ff 	mov.w	r0, #4294967295
 80040e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040e8:	3501      	adds	r5, #1
 80040ea:	e7c6      	b.n	800407a <_printf_common+0x3e>
 80040ec:	18e1      	adds	r1, r4, r3
 80040ee:	1c5a      	adds	r2, r3, #1
 80040f0:	2030      	movs	r0, #48	@ 0x30
 80040f2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80040f6:	4422      	add	r2, r4
 80040f8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80040fc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004100:	3302      	adds	r3, #2
 8004102:	e7c7      	b.n	8004094 <_printf_common+0x58>
 8004104:	2301      	movs	r3, #1
 8004106:	4622      	mov	r2, r4
 8004108:	4641      	mov	r1, r8
 800410a:	4638      	mov	r0, r7
 800410c:	47c8      	blx	r9
 800410e:	3001      	adds	r0, #1
 8004110:	d0e6      	beq.n	80040e0 <_printf_common+0xa4>
 8004112:	3601      	adds	r6, #1
 8004114:	e7d9      	b.n	80040ca <_printf_common+0x8e>
	...

08004118 <_printf_i>:
 8004118:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800411c:	7e0f      	ldrb	r7, [r1, #24]
 800411e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004120:	2f78      	cmp	r7, #120	@ 0x78
 8004122:	4691      	mov	r9, r2
 8004124:	4680      	mov	r8, r0
 8004126:	460c      	mov	r4, r1
 8004128:	469a      	mov	sl, r3
 800412a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800412e:	d807      	bhi.n	8004140 <_printf_i+0x28>
 8004130:	2f62      	cmp	r7, #98	@ 0x62
 8004132:	d80a      	bhi.n	800414a <_printf_i+0x32>
 8004134:	2f00      	cmp	r7, #0
 8004136:	f000 80d1 	beq.w	80042dc <_printf_i+0x1c4>
 800413a:	2f58      	cmp	r7, #88	@ 0x58
 800413c:	f000 80b8 	beq.w	80042b0 <_printf_i+0x198>
 8004140:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004144:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004148:	e03a      	b.n	80041c0 <_printf_i+0xa8>
 800414a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800414e:	2b15      	cmp	r3, #21
 8004150:	d8f6      	bhi.n	8004140 <_printf_i+0x28>
 8004152:	a101      	add	r1, pc, #4	@ (adr r1, 8004158 <_printf_i+0x40>)
 8004154:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004158:	080041b1 	.word	0x080041b1
 800415c:	080041c5 	.word	0x080041c5
 8004160:	08004141 	.word	0x08004141
 8004164:	08004141 	.word	0x08004141
 8004168:	08004141 	.word	0x08004141
 800416c:	08004141 	.word	0x08004141
 8004170:	080041c5 	.word	0x080041c5
 8004174:	08004141 	.word	0x08004141
 8004178:	08004141 	.word	0x08004141
 800417c:	08004141 	.word	0x08004141
 8004180:	08004141 	.word	0x08004141
 8004184:	080042c3 	.word	0x080042c3
 8004188:	080041ef 	.word	0x080041ef
 800418c:	0800427d 	.word	0x0800427d
 8004190:	08004141 	.word	0x08004141
 8004194:	08004141 	.word	0x08004141
 8004198:	080042e5 	.word	0x080042e5
 800419c:	08004141 	.word	0x08004141
 80041a0:	080041ef 	.word	0x080041ef
 80041a4:	08004141 	.word	0x08004141
 80041a8:	08004141 	.word	0x08004141
 80041ac:	08004285 	.word	0x08004285
 80041b0:	6833      	ldr	r3, [r6, #0]
 80041b2:	1d1a      	adds	r2, r3, #4
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	6032      	str	r2, [r6, #0]
 80041b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80041bc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80041c0:	2301      	movs	r3, #1
 80041c2:	e09c      	b.n	80042fe <_printf_i+0x1e6>
 80041c4:	6833      	ldr	r3, [r6, #0]
 80041c6:	6820      	ldr	r0, [r4, #0]
 80041c8:	1d19      	adds	r1, r3, #4
 80041ca:	6031      	str	r1, [r6, #0]
 80041cc:	0606      	lsls	r6, r0, #24
 80041ce:	d501      	bpl.n	80041d4 <_printf_i+0xbc>
 80041d0:	681d      	ldr	r5, [r3, #0]
 80041d2:	e003      	b.n	80041dc <_printf_i+0xc4>
 80041d4:	0645      	lsls	r5, r0, #25
 80041d6:	d5fb      	bpl.n	80041d0 <_printf_i+0xb8>
 80041d8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80041dc:	2d00      	cmp	r5, #0
 80041de:	da03      	bge.n	80041e8 <_printf_i+0xd0>
 80041e0:	232d      	movs	r3, #45	@ 0x2d
 80041e2:	426d      	negs	r5, r5
 80041e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80041e8:	4858      	ldr	r0, [pc, #352]	@ (800434c <_printf_i+0x234>)
 80041ea:	230a      	movs	r3, #10
 80041ec:	e011      	b.n	8004212 <_printf_i+0xfa>
 80041ee:	6821      	ldr	r1, [r4, #0]
 80041f0:	6833      	ldr	r3, [r6, #0]
 80041f2:	0608      	lsls	r0, r1, #24
 80041f4:	f853 5b04 	ldr.w	r5, [r3], #4
 80041f8:	d402      	bmi.n	8004200 <_printf_i+0xe8>
 80041fa:	0649      	lsls	r1, r1, #25
 80041fc:	bf48      	it	mi
 80041fe:	b2ad      	uxthmi	r5, r5
 8004200:	2f6f      	cmp	r7, #111	@ 0x6f
 8004202:	4852      	ldr	r0, [pc, #328]	@ (800434c <_printf_i+0x234>)
 8004204:	6033      	str	r3, [r6, #0]
 8004206:	bf14      	ite	ne
 8004208:	230a      	movne	r3, #10
 800420a:	2308      	moveq	r3, #8
 800420c:	2100      	movs	r1, #0
 800420e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004212:	6866      	ldr	r6, [r4, #4]
 8004214:	60a6      	str	r6, [r4, #8]
 8004216:	2e00      	cmp	r6, #0
 8004218:	db05      	blt.n	8004226 <_printf_i+0x10e>
 800421a:	6821      	ldr	r1, [r4, #0]
 800421c:	432e      	orrs	r6, r5
 800421e:	f021 0104 	bic.w	r1, r1, #4
 8004222:	6021      	str	r1, [r4, #0]
 8004224:	d04b      	beq.n	80042be <_printf_i+0x1a6>
 8004226:	4616      	mov	r6, r2
 8004228:	fbb5 f1f3 	udiv	r1, r5, r3
 800422c:	fb03 5711 	mls	r7, r3, r1, r5
 8004230:	5dc7      	ldrb	r7, [r0, r7]
 8004232:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004236:	462f      	mov	r7, r5
 8004238:	42bb      	cmp	r3, r7
 800423a:	460d      	mov	r5, r1
 800423c:	d9f4      	bls.n	8004228 <_printf_i+0x110>
 800423e:	2b08      	cmp	r3, #8
 8004240:	d10b      	bne.n	800425a <_printf_i+0x142>
 8004242:	6823      	ldr	r3, [r4, #0]
 8004244:	07df      	lsls	r7, r3, #31
 8004246:	d508      	bpl.n	800425a <_printf_i+0x142>
 8004248:	6923      	ldr	r3, [r4, #16]
 800424a:	6861      	ldr	r1, [r4, #4]
 800424c:	4299      	cmp	r1, r3
 800424e:	bfde      	ittt	le
 8004250:	2330      	movle	r3, #48	@ 0x30
 8004252:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004256:	f106 36ff 	addle.w	r6, r6, #4294967295
 800425a:	1b92      	subs	r2, r2, r6
 800425c:	6122      	str	r2, [r4, #16]
 800425e:	f8cd a000 	str.w	sl, [sp]
 8004262:	464b      	mov	r3, r9
 8004264:	aa03      	add	r2, sp, #12
 8004266:	4621      	mov	r1, r4
 8004268:	4640      	mov	r0, r8
 800426a:	f7ff fee7 	bl	800403c <_printf_common>
 800426e:	3001      	adds	r0, #1
 8004270:	d14a      	bne.n	8004308 <_printf_i+0x1f0>
 8004272:	f04f 30ff 	mov.w	r0, #4294967295
 8004276:	b004      	add	sp, #16
 8004278:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800427c:	6823      	ldr	r3, [r4, #0]
 800427e:	f043 0320 	orr.w	r3, r3, #32
 8004282:	6023      	str	r3, [r4, #0]
 8004284:	4832      	ldr	r0, [pc, #200]	@ (8004350 <_printf_i+0x238>)
 8004286:	2778      	movs	r7, #120	@ 0x78
 8004288:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800428c:	6823      	ldr	r3, [r4, #0]
 800428e:	6831      	ldr	r1, [r6, #0]
 8004290:	061f      	lsls	r7, r3, #24
 8004292:	f851 5b04 	ldr.w	r5, [r1], #4
 8004296:	d402      	bmi.n	800429e <_printf_i+0x186>
 8004298:	065f      	lsls	r7, r3, #25
 800429a:	bf48      	it	mi
 800429c:	b2ad      	uxthmi	r5, r5
 800429e:	6031      	str	r1, [r6, #0]
 80042a0:	07d9      	lsls	r1, r3, #31
 80042a2:	bf44      	itt	mi
 80042a4:	f043 0320 	orrmi.w	r3, r3, #32
 80042a8:	6023      	strmi	r3, [r4, #0]
 80042aa:	b11d      	cbz	r5, 80042b4 <_printf_i+0x19c>
 80042ac:	2310      	movs	r3, #16
 80042ae:	e7ad      	b.n	800420c <_printf_i+0xf4>
 80042b0:	4826      	ldr	r0, [pc, #152]	@ (800434c <_printf_i+0x234>)
 80042b2:	e7e9      	b.n	8004288 <_printf_i+0x170>
 80042b4:	6823      	ldr	r3, [r4, #0]
 80042b6:	f023 0320 	bic.w	r3, r3, #32
 80042ba:	6023      	str	r3, [r4, #0]
 80042bc:	e7f6      	b.n	80042ac <_printf_i+0x194>
 80042be:	4616      	mov	r6, r2
 80042c0:	e7bd      	b.n	800423e <_printf_i+0x126>
 80042c2:	6833      	ldr	r3, [r6, #0]
 80042c4:	6825      	ldr	r5, [r4, #0]
 80042c6:	6961      	ldr	r1, [r4, #20]
 80042c8:	1d18      	adds	r0, r3, #4
 80042ca:	6030      	str	r0, [r6, #0]
 80042cc:	062e      	lsls	r6, r5, #24
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	d501      	bpl.n	80042d6 <_printf_i+0x1be>
 80042d2:	6019      	str	r1, [r3, #0]
 80042d4:	e002      	b.n	80042dc <_printf_i+0x1c4>
 80042d6:	0668      	lsls	r0, r5, #25
 80042d8:	d5fb      	bpl.n	80042d2 <_printf_i+0x1ba>
 80042da:	8019      	strh	r1, [r3, #0]
 80042dc:	2300      	movs	r3, #0
 80042de:	6123      	str	r3, [r4, #16]
 80042e0:	4616      	mov	r6, r2
 80042e2:	e7bc      	b.n	800425e <_printf_i+0x146>
 80042e4:	6833      	ldr	r3, [r6, #0]
 80042e6:	1d1a      	adds	r2, r3, #4
 80042e8:	6032      	str	r2, [r6, #0]
 80042ea:	681e      	ldr	r6, [r3, #0]
 80042ec:	6862      	ldr	r2, [r4, #4]
 80042ee:	2100      	movs	r1, #0
 80042f0:	4630      	mov	r0, r6
 80042f2:	f7fb ff75 	bl	80001e0 <memchr>
 80042f6:	b108      	cbz	r0, 80042fc <_printf_i+0x1e4>
 80042f8:	1b80      	subs	r0, r0, r6
 80042fa:	6060      	str	r0, [r4, #4]
 80042fc:	6863      	ldr	r3, [r4, #4]
 80042fe:	6123      	str	r3, [r4, #16]
 8004300:	2300      	movs	r3, #0
 8004302:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004306:	e7aa      	b.n	800425e <_printf_i+0x146>
 8004308:	6923      	ldr	r3, [r4, #16]
 800430a:	4632      	mov	r2, r6
 800430c:	4649      	mov	r1, r9
 800430e:	4640      	mov	r0, r8
 8004310:	47d0      	blx	sl
 8004312:	3001      	adds	r0, #1
 8004314:	d0ad      	beq.n	8004272 <_printf_i+0x15a>
 8004316:	6823      	ldr	r3, [r4, #0]
 8004318:	079b      	lsls	r3, r3, #30
 800431a:	d413      	bmi.n	8004344 <_printf_i+0x22c>
 800431c:	68e0      	ldr	r0, [r4, #12]
 800431e:	9b03      	ldr	r3, [sp, #12]
 8004320:	4298      	cmp	r0, r3
 8004322:	bfb8      	it	lt
 8004324:	4618      	movlt	r0, r3
 8004326:	e7a6      	b.n	8004276 <_printf_i+0x15e>
 8004328:	2301      	movs	r3, #1
 800432a:	4632      	mov	r2, r6
 800432c:	4649      	mov	r1, r9
 800432e:	4640      	mov	r0, r8
 8004330:	47d0      	blx	sl
 8004332:	3001      	adds	r0, #1
 8004334:	d09d      	beq.n	8004272 <_printf_i+0x15a>
 8004336:	3501      	adds	r5, #1
 8004338:	68e3      	ldr	r3, [r4, #12]
 800433a:	9903      	ldr	r1, [sp, #12]
 800433c:	1a5b      	subs	r3, r3, r1
 800433e:	42ab      	cmp	r3, r5
 8004340:	dcf2      	bgt.n	8004328 <_printf_i+0x210>
 8004342:	e7eb      	b.n	800431c <_printf_i+0x204>
 8004344:	2500      	movs	r5, #0
 8004346:	f104 0619 	add.w	r6, r4, #25
 800434a:	e7f5      	b.n	8004338 <_printf_i+0x220>
 800434c:	08007247 	.word	0x08007247
 8004350:	08007258 	.word	0x08007258

08004354 <std>:
 8004354:	2300      	movs	r3, #0
 8004356:	b510      	push	{r4, lr}
 8004358:	4604      	mov	r4, r0
 800435a:	e9c0 3300 	strd	r3, r3, [r0]
 800435e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004362:	6083      	str	r3, [r0, #8]
 8004364:	8181      	strh	r1, [r0, #12]
 8004366:	6643      	str	r3, [r0, #100]	@ 0x64
 8004368:	81c2      	strh	r2, [r0, #14]
 800436a:	6183      	str	r3, [r0, #24]
 800436c:	4619      	mov	r1, r3
 800436e:	2208      	movs	r2, #8
 8004370:	305c      	adds	r0, #92	@ 0x5c
 8004372:	f000 f92a 	bl	80045ca <memset>
 8004376:	4b0d      	ldr	r3, [pc, #52]	@ (80043ac <std+0x58>)
 8004378:	6263      	str	r3, [r4, #36]	@ 0x24
 800437a:	4b0d      	ldr	r3, [pc, #52]	@ (80043b0 <std+0x5c>)
 800437c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800437e:	4b0d      	ldr	r3, [pc, #52]	@ (80043b4 <std+0x60>)
 8004380:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004382:	4b0d      	ldr	r3, [pc, #52]	@ (80043b8 <std+0x64>)
 8004384:	6323      	str	r3, [r4, #48]	@ 0x30
 8004386:	4b0d      	ldr	r3, [pc, #52]	@ (80043bc <std+0x68>)
 8004388:	6224      	str	r4, [r4, #32]
 800438a:	429c      	cmp	r4, r3
 800438c:	d006      	beq.n	800439c <std+0x48>
 800438e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004392:	4294      	cmp	r4, r2
 8004394:	d002      	beq.n	800439c <std+0x48>
 8004396:	33d0      	adds	r3, #208	@ 0xd0
 8004398:	429c      	cmp	r4, r3
 800439a:	d105      	bne.n	80043a8 <std+0x54>
 800439c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80043a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80043a4:	f000 b98e 	b.w	80046c4 <__retarget_lock_init_recursive>
 80043a8:	bd10      	pop	{r4, pc}
 80043aa:	bf00      	nop
 80043ac:	08004545 	.word	0x08004545
 80043b0:	08004567 	.word	0x08004567
 80043b4:	0800459f 	.word	0x0800459f
 80043b8:	080045c3 	.word	0x080045c3
 80043bc:	20001a6c 	.word	0x20001a6c

080043c0 <stdio_exit_handler>:
 80043c0:	4a02      	ldr	r2, [pc, #8]	@ (80043cc <stdio_exit_handler+0xc>)
 80043c2:	4903      	ldr	r1, [pc, #12]	@ (80043d0 <stdio_exit_handler+0x10>)
 80043c4:	4803      	ldr	r0, [pc, #12]	@ (80043d4 <stdio_exit_handler+0x14>)
 80043c6:	f000 b869 	b.w	800449c <_fwalk_sglue>
 80043ca:	bf00      	nop
 80043cc:	2000000c 	.word	0x2000000c
 80043d0:	0800602d 	.word	0x0800602d
 80043d4:	2000001c 	.word	0x2000001c

080043d8 <cleanup_stdio>:
 80043d8:	6841      	ldr	r1, [r0, #4]
 80043da:	4b0c      	ldr	r3, [pc, #48]	@ (800440c <cleanup_stdio+0x34>)
 80043dc:	4299      	cmp	r1, r3
 80043de:	b510      	push	{r4, lr}
 80043e0:	4604      	mov	r4, r0
 80043e2:	d001      	beq.n	80043e8 <cleanup_stdio+0x10>
 80043e4:	f001 fe22 	bl	800602c <_fflush_r>
 80043e8:	68a1      	ldr	r1, [r4, #8]
 80043ea:	4b09      	ldr	r3, [pc, #36]	@ (8004410 <cleanup_stdio+0x38>)
 80043ec:	4299      	cmp	r1, r3
 80043ee:	d002      	beq.n	80043f6 <cleanup_stdio+0x1e>
 80043f0:	4620      	mov	r0, r4
 80043f2:	f001 fe1b 	bl	800602c <_fflush_r>
 80043f6:	68e1      	ldr	r1, [r4, #12]
 80043f8:	4b06      	ldr	r3, [pc, #24]	@ (8004414 <cleanup_stdio+0x3c>)
 80043fa:	4299      	cmp	r1, r3
 80043fc:	d004      	beq.n	8004408 <cleanup_stdio+0x30>
 80043fe:	4620      	mov	r0, r4
 8004400:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004404:	f001 be12 	b.w	800602c <_fflush_r>
 8004408:	bd10      	pop	{r4, pc}
 800440a:	bf00      	nop
 800440c:	20001a6c 	.word	0x20001a6c
 8004410:	20001ad4 	.word	0x20001ad4
 8004414:	20001b3c 	.word	0x20001b3c

08004418 <global_stdio_init.part.0>:
 8004418:	b510      	push	{r4, lr}
 800441a:	4b0b      	ldr	r3, [pc, #44]	@ (8004448 <global_stdio_init.part.0+0x30>)
 800441c:	4c0b      	ldr	r4, [pc, #44]	@ (800444c <global_stdio_init.part.0+0x34>)
 800441e:	4a0c      	ldr	r2, [pc, #48]	@ (8004450 <global_stdio_init.part.0+0x38>)
 8004420:	601a      	str	r2, [r3, #0]
 8004422:	4620      	mov	r0, r4
 8004424:	2200      	movs	r2, #0
 8004426:	2104      	movs	r1, #4
 8004428:	f7ff ff94 	bl	8004354 <std>
 800442c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004430:	2201      	movs	r2, #1
 8004432:	2109      	movs	r1, #9
 8004434:	f7ff ff8e 	bl	8004354 <std>
 8004438:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800443c:	2202      	movs	r2, #2
 800443e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004442:	2112      	movs	r1, #18
 8004444:	f7ff bf86 	b.w	8004354 <std>
 8004448:	20001ba4 	.word	0x20001ba4
 800444c:	20001a6c 	.word	0x20001a6c
 8004450:	080043c1 	.word	0x080043c1

08004454 <__sfp_lock_acquire>:
 8004454:	4801      	ldr	r0, [pc, #4]	@ (800445c <__sfp_lock_acquire+0x8>)
 8004456:	f000 b936 	b.w	80046c6 <__retarget_lock_acquire_recursive>
 800445a:	bf00      	nop
 800445c:	20001bad 	.word	0x20001bad

08004460 <__sfp_lock_release>:
 8004460:	4801      	ldr	r0, [pc, #4]	@ (8004468 <__sfp_lock_release+0x8>)
 8004462:	f000 b931 	b.w	80046c8 <__retarget_lock_release_recursive>
 8004466:	bf00      	nop
 8004468:	20001bad 	.word	0x20001bad

0800446c <__sinit>:
 800446c:	b510      	push	{r4, lr}
 800446e:	4604      	mov	r4, r0
 8004470:	f7ff fff0 	bl	8004454 <__sfp_lock_acquire>
 8004474:	6a23      	ldr	r3, [r4, #32]
 8004476:	b11b      	cbz	r3, 8004480 <__sinit+0x14>
 8004478:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800447c:	f7ff bff0 	b.w	8004460 <__sfp_lock_release>
 8004480:	4b04      	ldr	r3, [pc, #16]	@ (8004494 <__sinit+0x28>)
 8004482:	6223      	str	r3, [r4, #32]
 8004484:	4b04      	ldr	r3, [pc, #16]	@ (8004498 <__sinit+0x2c>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d1f5      	bne.n	8004478 <__sinit+0xc>
 800448c:	f7ff ffc4 	bl	8004418 <global_stdio_init.part.0>
 8004490:	e7f2      	b.n	8004478 <__sinit+0xc>
 8004492:	bf00      	nop
 8004494:	080043d9 	.word	0x080043d9
 8004498:	20001ba4 	.word	0x20001ba4

0800449c <_fwalk_sglue>:
 800449c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80044a0:	4607      	mov	r7, r0
 80044a2:	4688      	mov	r8, r1
 80044a4:	4614      	mov	r4, r2
 80044a6:	2600      	movs	r6, #0
 80044a8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80044ac:	f1b9 0901 	subs.w	r9, r9, #1
 80044b0:	d505      	bpl.n	80044be <_fwalk_sglue+0x22>
 80044b2:	6824      	ldr	r4, [r4, #0]
 80044b4:	2c00      	cmp	r4, #0
 80044b6:	d1f7      	bne.n	80044a8 <_fwalk_sglue+0xc>
 80044b8:	4630      	mov	r0, r6
 80044ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80044be:	89ab      	ldrh	r3, [r5, #12]
 80044c0:	2b01      	cmp	r3, #1
 80044c2:	d907      	bls.n	80044d4 <_fwalk_sglue+0x38>
 80044c4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80044c8:	3301      	adds	r3, #1
 80044ca:	d003      	beq.n	80044d4 <_fwalk_sglue+0x38>
 80044cc:	4629      	mov	r1, r5
 80044ce:	4638      	mov	r0, r7
 80044d0:	47c0      	blx	r8
 80044d2:	4306      	orrs	r6, r0
 80044d4:	3568      	adds	r5, #104	@ 0x68
 80044d6:	e7e9      	b.n	80044ac <_fwalk_sglue+0x10>

080044d8 <sniprintf>:
 80044d8:	b40c      	push	{r2, r3}
 80044da:	b530      	push	{r4, r5, lr}
 80044dc:	4b18      	ldr	r3, [pc, #96]	@ (8004540 <sniprintf+0x68>)
 80044de:	1e0c      	subs	r4, r1, #0
 80044e0:	681d      	ldr	r5, [r3, #0]
 80044e2:	b09d      	sub	sp, #116	@ 0x74
 80044e4:	da08      	bge.n	80044f8 <sniprintf+0x20>
 80044e6:	238b      	movs	r3, #139	@ 0x8b
 80044e8:	602b      	str	r3, [r5, #0]
 80044ea:	f04f 30ff 	mov.w	r0, #4294967295
 80044ee:	b01d      	add	sp, #116	@ 0x74
 80044f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80044f4:	b002      	add	sp, #8
 80044f6:	4770      	bx	lr
 80044f8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80044fc:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004500:	f04f 0300 	mov.w	r3, #0
 8004504:	931b      	str	r3, [sp, #108]	@ 0x6c
 8004506:	bf14      	ite	ne
 8004508:	f104 33ff 	addne.w	r3, r4, #4294967295
 800450c:	4623      	moveq	r3, r4
 800450e:	9304      	str	r3, [sp, #16]
 8004510:	9307      	str	r3, [sp, #28]
 8004512:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004516:	9002      	str	r0, [sp, #8]
 8004518:	9006      	str	r0, [sp, #24]
 800451a:	f8ad 3016 	strh.w	r3, [sp, #22]
 800451e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8004520:	ab21      	add	r3, sp, #132	@ 0x84
 8004522:	a902      	add	r1, sp, #8
 8004524:	4628      	mov	r0, r5
 8004526:	9301      	str	r3, [sp, #4]
 8004528:	f001 fc00 	bl	8005d2c <_svfiprintf_r>
 800452c:	1c43      	adds	r3, r0, #1
 800452e:	bfbc      	itt	lt
 8004530:	238b      	movlt	r3, #139	@ 0x8b
 8004532:	602b      	strlt	r3, [r5, #0]
 8004534:	2c00      	cmp	r4, #0
 8004536:	d0da      	beq.n	80044ee <sniprintf+0x16>
 8004538:	9b02      	ldr	r3, [sp, #8]
 800453a:	2200      	movs	r2, #0
 800453c:	701a      	strb	r2, [r3, #0]
 800453e:	e7d6      	b.n	80044ee <sniprintf+0x16>
 8004540:	20000018 	.word	0x20000018

08004544 <__sread>:
 8004544:	b510      	push	{r4, lr}
 8004546:	460c      	mov	r4, r1
 8004548:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800454c:	f000 f86c 	bl	8004628 <_read_r>
 8004550:	2800      	cmp	r0, #0
 8004552:	bfab      	itete	ge
 8004554:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004556:	89a3      	ldrhlt	r3, [r4, #12]
 8004558:	181b      	addge	r3, r3, r0
 800455a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800455e:	bfac      	ite	ge
 8004560:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004562:	81a3      	strhlt	r3, [r4, #12]
 8004564:	bd10      	pop	{r4, pc}

08004566 <__swrite>:
 8004566:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800456a:	461f      	mov	r7, r3
 800456c:	898b      	ldrh	r3, [r1, #12]
 800456e:	05db      	lsls	r3, r3, #23
 8004570:	4605      	mov	r5, r0
 8004572:	460c      	mov	r4, r1
 8004574:	4616      	mov	r6, r2
 8004576:	d505      	bpl.n	8004584 <__swrite+0x1e>
 8004578:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800457c:	2302      	movs	r3, #2
 800457e:	2200      	movs	r2, #0
 8004580:	f000 f840 	bl	8004604 <_lseek_r>
 8004584:	89a3      	ldrh	r3, [r4, #12]
 8004586:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800458a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800458e:	81a3      	strh	r3, [r4, #12]
 8004590:	4632      	mov	r2, r6
 8004592:	463b      	mov	r3, r7
 8004594:	4628      	mov	r0, r5
 8004596:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800459a:	f000 b857 	b.w	800464c <_write_r>

0800459e <__sseek>:
 800459e:	b510      	push	{r4, lr}
 80045a0:	460c      	mov	r4, r1
 80045a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80045a6:	f000 f82d 	bl	8004604 <_lseek_r>
 80045aa:	1c43      	adds	r3, r0, #1
 80045ac:	89a3      	ldrh	r3, [r4, #12]
 80045ae:	bf15      	itete	ne
 80045b0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80045b2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80045b6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80045ba:	81a3      	strheq	r3, [r4, #12]
 80045bc:	bf18      	it	ne
 80045be:	81a3      	strhne	r3, [r4, #12]
 80045c0:	bd10      	pop	{r4, pc}

080045c2 <__sclose>:
 80045c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80045c6:	f000 b80d 	b.w	80045e4 <_close_r>

080045ca <memset>:
 80045ca:	4402      	add	r2, r0
 80045cc:	4603      	mov	r3, r0
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d100      	bne.n	80045d4 <memset+0xa>
 80045d2:	4770      	bx	lr
 80045d4:	f803 1b01 	strb.w	r1, [r3], #1
 80045d8:	e7f9      	b.n	80045ce <memset+0x4>
	...

080045dc <_localeconv_r>:
 80045dc:	4800      	ldr	r0, [pc, #0]	@ (80045e0 <_localeconv_r+0x4>)
 80045de:	4770      	bx	lr
 80045e0:	20000158 	.word	0x20000158

080045e4 <_close_r>:
 80045e4:	b538      	push	{r3, r4, r5, lr}
 80045e6:	4d06      	ldr	r5, [pc, #24]	@ (8004600 <_close_r+0x1c>)
 80045e8:	2300      	movs	r3, #0
 80045ea:	4604      	mov	r4, r0
 80045ec:	4608      	mov	r0, r1
 80045ee:	602b      	str	r3, [r5, #0]
 80045f0:	f7fd fcbc 	bl	8001f6c <_close>
 80045f4:	1c43      	adds	r3, r0, #1
 80045f6:	d102      	bne.n	80045fe <_close_r+0x1a>
 80045f8:	682b      	ldr	r3, [r5, #0]
 80045fa:	b103      	cbz	r3, 80045fe <_close_r+0x1a>
 80045fc:	6023      	str	r3, [r4, #0]
 80045fe:	bd38      	pop	{r3, r4, r5, pc}
 8004600:	20001ba8 	.word	0x20001ba8

08004604 <_lseek_r>:
 8004604:	b538      	push	{r3, r4, r5, lr}
 8004606:	4d07      	ldr	r5, [pc, #28]	@ (8004624 <_lseek_r+0x20>)
 8004608:	4604      	mov	r4, r0
 800460a:	4608      	mov	r0, r1
 800460c:	4611      	mov	r1, r2
 800460e:	2200      	movs	r2, #0
 8004610:	602a      	str	r2, [r5, #0]
 8004612:	461a      	mov	r2, r3
 8004614:	f7fd fcb1 	bl	8001f7a <_lseek>
 8004618:	1c43      	adds	r3, r0, #1
 800461a:	d102      	bne.n	8004622 <_lseek_r+0x1e>
 800461c:	682b      	ldr	r3, [r5, #0]
 800461e:	b103      	cbz	r3, 8004622 <_lseek_r+0x1e>
 8004620:	6023      	str	r3, [r4, #0]
 8004622:	bd38      	pop	{r3, r4, r5, pc}
 8004624:	20001ba8 	.word	0x20001ba8

08004628 <_read_r>:
 8004628:	b538      	push	{r3, r4, r5, lr}
 800462a:	4d07      	ldr	r5, [pc, #28]	@ (8004648 <_read_r+0x20>)
 800462c:	4604      	mov	r4, r0
 800462e:	4608      	mov	r0, r1
 8004630:	4611      	mov	r1, r2
 8004632:	2200      	movs	r2, #0
 8004634:	602a      	str	r2, [r5, #0]
 8004636:	461a      	mov	r2, r3
 8004638:	f7fd fc96 	bl	8001f68 <_read>
 800463c:	1c43      	adds	r3, r0, #1
 800463e:	d102      	bne.n	8004646 <_read_r+0x1e>
 8004640:	682b      	ldr	r3, [r5, #0]
 8004642:	b103      	cbz	r3, 8004646 <_read_r+0x1e>
 8004644:	6023      	str	r3, [r4, #0]
 8004646:	bd38      	pop	{r3, r4, r5, pc}
 8004648:	20001ba8 	.word	0x20001ba8

0800464c <_write_r>:
 800464c:	b538      	push	{r3, r4, r5, lr}
 800464e:	4d07      	ldr	r5, [pc, #28]	@ (800466c <_write_r+0x20>)
 8004650:	4604      	mov	r4, r0
 8004652:	4608      	mov	r0, r1
 8004654:	4611      	mov	r1, r2
 8004656:	2200      	movs	r2, #0
 8004658:	602a      	str	r2, [r5, #0]
 800465a:	461a      	mov	r2, r3
 800465c:	f7fd fc82 	bl	8001f64 <_write>
 8004660:	1c43      	adds	r3, r0, #1
 8004662:	d102      	bne.n	800466a <_write_r+0x1e>
 8004664:	682b      	ldr	r3, [r5, #0]
 8004666:	b103      	cbz	r3, 800466a <_write_r+0x1e>
 8004668:	6023      	str	r3, [r4, #0]
 800466a:	bd38      	pop	{r3, r4, r5, pc}
 800466c:	20001ba8 	.word	0x20001ba8

08004670 <__errno>:
 8004670:	4b01      	ldr	r3, [pc, #4]	@ (8004678 <__errno+0x8>)
 8004672:	6818      	ldr	r0, [r3, #0]
 8004674:	4770      	bx	lr
 8004676:	bf00      	nop
 8004678:	20000018 	.word	0x20000018

0800467c <__libc_init_array>:
 800467c:	b570      	push	{r4, r5, r6, lr}
 800467e:	4d0d      	ldr	r5, [pc, #52]	@ (80046b4 <__libc_init_array+0x38>)
 8004680:	4c0d      	ldr	r4, [pc, #52]	@ (80046b8 <__libc_init_array+0x3c>)
 8004682:	1b64      	subs	r4, r4, r5
 8004684:	10a4      	asrs	r4, r4, #2
 8004686:	2600      	movs	r6, #0
 8004688:	42a6      	cmp	r6, r4
 800468a:	d109      	bne.n	80046a0 <__libc_init_array+0x24>
 800468c:	4d0b      	ldr	r5, [pc, #44]	@ (80046bc <__libc_init_array+0x40>)
 800468e:	4c0c      	ldr	r4, [pc, #48]	@ (80046c0 <__libc_init_array+0x44>)
 8004690:	f002 fd78 	bl	8007184 <_init>
 8004694:	1b64      	subs	r4, r4, r5
 8004696:	10a4      	asrs	r4, r4, #2
 8004698:	2600      	movs	r6, #0
 800469a:	42a6      	cmp	r6, r4
 800469c:	d105      	bne.n	80046aa <__libc_init_array+0x2e>
 800469e:	bd70      	pop	{r4, r5, r6, pc}
 80046a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80046a4:	4798      	blx	r3
 80046a6:	3601      	adds	r6, #1
 80046a8:	e7ee      	b.n	8004688 <__libc_init_array+0xc>
 80046aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80046ae:	4798      	blx	r3
 80046b0:	3601      	adds	r6, #1
 80046b2:	e7f2      	b.n	800469a <__libc_init_array+0x1e>
 80046b4:	08035060 	.word	0x08035060
 80046b8:	08035060 	.word	0x08035060
 80046bc:	08035060 	.word	0x08035060
 80046c0:	08035064 	.word	0x08035064

080046c4 <__retarget_lock_init_recursive>:
 80046c4:	4770      	bx	lr

080046c6 <__retarget_lock_acquire_recursive>:
 80046c6:	4770      	bx	lr

080046c8 <__retarget_lock_release_recursive>:
 80046c8:	4770      	bx	lr

080046ca <quorem>:
 80046ca:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046ce:	6903      	ldr	r3, [r0, #16]
 80046d0:	690c      	ldr	r4, [r1, #16]
 80046d2:	42a3      	cmp	r3, r4
 80046d4:	4607      	mov	r7, r0
 80046d6:	db7e      	blt.n	80047d6 <quorem+0x10c>
 80046d8:	3c01      	subs	r4, #1
 80046da:	f101 0814 	add.w	r8, r1, #20
 80046de:	00a3      	lsls	r3, r4, #2
 80046e0:	f100 0514 	add.w	r5, r0, #20
 80046e4:	9300      	str	r3, [sp, #0]
 80046e6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80046ea:	9301      	str	r3, [sp, #4]
 80046ec:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80046f0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80046f4:	3301      	adds	r3, #1
 80046f6:	429a      	cmp	r2, r3
 80046f8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80046fc:	fbb2 f6f3 	udiv	r6, r2, r3
 8004700:	d32e      	bcc.n	8004760 <quorem+0x96>
 8004702:	f04f 0a00 	mov.w	sl, #0
 8004706:	46c4      	mov	ip, r8
 8004708:	46ae      	mov	lr, r5
 800470a:	46d3      	mov	fp, sl
 800470c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004710:	b298      	uxth	r0, r3
 8004712:	fb06 a000 	mla	r0, r6, r0, sl
 8004716:	0c02      	lsrs	r2, r0, #16
 8004718:	0c1b      	lsrs	r3, r3, #16
 800471a:	fb06 2303 	mla	r3, r6, r3, r2
 800471e:	f8de 2000 	ldr.w	r2, [lr]
 8004722:	b280      	uxth	r0, r0
 8004724:	b292      	uxth	r2, r2
 8004726:	1a12      	subs	r2, r2, r0
 8004728:	445a      	add	r2, fp
 800472a:	f8de 0000 	ldr.w	r0, [lr]
 800472e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004732:	b29b      	uxth	r3, r3
 8004734:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8004738:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800473c:	b292      	uxth	r2, r2
 800473e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8004742:	45e1      	cmp	r9, ip
 8004744:	f84e 2b04 	str.w	r2, [lr], #4
 8004748:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800474c:	d2de      	bcs.n	800470c <quorem+0x42>
 800474e:	9b00      	ldr	r3, [sp, #0]
 8004750:	58eb      	ldr	r3, [r5, r3]
 8004752:	b92b      	cbnz	r3, 8004760 <quorem+0x96>
 8004754:	9b01      	ldr	r3, [sp, #4]
 8004756:	3b04      	subs	r3, #4
 8004758:	429d      	cmp	r5, r3
 800475a:	461a      	mov	r2, r3
 800475c:	d32f      	bcc.n	80047be <quorem+0xf4>
 800475e:	613c      	str	r4, [r7, #16]
 8004760:	4638      	mov	r0, r7
 8004762:	f001 f97f 	bl	8005a64 <__mcmp>
 8004766:	2800      	cmp	r0, #0
 8004768:	db25      	blt.n	80047b6 <quorem+0xec>
 800476a:	4629      	mov	r1, r5
 800476c:	2000      	movs	r0, #0
 800476e:	f858 2b04 	ldr.w	r2, [r8], #4
 8004772:	f8d1 c000 	ldr.w	ip, [r1]
 8004776:	fa1f fe82 	uxth.w	lr, r2
 800477a:	fa1f f38c 	uxth.w	r3, ip
 800477e:	eba3 030e 	sub.w	r3, r3, lr
 8004782:	4403      	add	r3, r0
 8004784:	0c12      	lsrs	r2, r2, #16
 8004786:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800478a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800478e:	b29b      	uxth	r3, r3
 8004790:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004794:	45c1      	cmp	r9, r8
 8004796:	f841 3b04 	str.w	r3, [r1], #4
 800479a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800479e:	d2e6      	bcs.n	800476e <quorem+0xa4>
 80047a0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80047a4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80047a8:	b922      	cbnz	r2, 80047b4 <quorem+0xea>
 80047aa:	3b04      	subs	r3, #4
 80047ac:	429d      	cmp	r5, r3
 80047ae:	461a      	mov	r2, r3
 80047b0:	d30b      	bcc.n	80047ca <quorem+0x100>
 80047b2:	613c      	str	r4, [r7, #16]
 80047b4:	3601      	adds	r6, #1
 80047b6:	4630      	mov	r0, r6
 80047b8:	b003      	add	sp, #12
 80047ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047be:	6812      	ldr	r2, [r2, #0]
 80047c0:	3b04      	subs	r3, #4
 80047c2:	2a00      	cmp	r2, #0
 80047c4:	d1cb      	bne.n	800475e <quorem+0x94>
 80047c6:	3c01      	subs	r4, #1
 80047c8:	e7c6      	b.n	8004758 <quorem+0x8e>
 80047ca:	6812      	ldr	r2, [r2, #0]
 80047cc:	3b04      	subs	r3, #4
 80047ce:	2a00      	cmp	r2, #0
 80047d0:	d1ef      	bne.n	80047b2 <quorem+0xe8>
 80047d2:	3c01      	subs	r4, #1
 80047d4:	e7ea      	b.n	80047ac <quorem+0xe2>
 80047d6:	2000      	movs	r0, #0
 80047d8:	e7ee      	b.n	80047b8 <quorem+0xee>
 80047da:	0000      	movs	r0, r0
 80047dc:	0000      	movs	r0, r0
	...

080047e0 <_dtoa_r>:
 80047e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047e4:	69c7      	ldr	r7, [r0, #28]
 80047e6:	b097      	sub	sp, #92	@ 0x5c
 80047e8:	ed8d 0b04 	vstr	d0, [sp, #16]
 80047ec:	ec55 4b10 	vmov	r4, r5, d0
 80047f0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80047f2:	9107      	str	r1, [sp, #28]
 80047f4:	4681      	mov	r9, r0
 80047f6:	920c      	str	r2, [sp, #48]	@ 0x30
 80047f8:	9311      	str	r3, [sp, #68]	@ 0x44
 80047fa:	b97f      	cbnz	r7, 800481c <_dtoa_r+0x3c>
 80047fc:	2010      	movs	r0, #16
 80047fe:	f000 fe09 	bl	8005414 <malloc>
 8004802:	4602      	mov	r2, r0
 8004804:	f8c9 001c 	str.w	r0, [r9, #28]
 8004808:	b920      	cbnz	r0, 8004814 <_dtoa_r+0x34>
 800480a:	4ba9      	ldr	r3, [pc, #676]	@ (8004ab0 <_dtoa_r+0x2d0>)
 800480c:	21ef      	movs	r1, #239	@ 0xef
 800480e:	48a9      	ldr	r0, [pc, #676]	@ (8004ab4 <_dtoa_r+0x2d4>)
 8004810:	f001 fc6c 	bl	80060ec <__assert_func>
 8004814:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8004818:	6007      	str	r7, [r0, #0]
 800481a:	60c7      	str	r7, [r0, #12]
 800481c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8004820:	6819      	ldr	r1, [r3, #0]
 8004822:	b159      	cbz	r1, 800483c <_dtoa_r+0x5c>
 8004824:	685a      	ldr	r2, [r3, #4]
 8004826:	604a      	str	r2, [r1, #4]
 8004828:	2301      	movs	r3, #1
 800482a:	4093      	lsls	r3, r2
 800482c:	608b      	str	r3, [r1, #8]
 800482e:	4648      	mov	r0, r9
 8004830:	f000 fee6 	bl	8005600 <_Bfree>
 8004834:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8004838:	2200      	movs	r2, #0
 800483a:	601a      	str	r2, [r3, #0]
 800483c:	1e2b      	subs	r3, r5, #0
 800483e:	bfb9      	ittee	lt
 8004840:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8004844:	9305      	strlt	r3, [sp, #20]
 8004846:	2300      	movge	r3, #0
 8004848:	6033      	strge	r3, [r6, #0]
 800484a:	9f05      	ldr	r7, [sp, #20]
 800484c:	4b9a      	ldr	r3, [pc, #616]	@ (8004ab8 <_dtoa_r+0x2d8>)
 800484e:	bfbc      	itt	lt
 8004850:	2201      	movlt	r2, #1
 8004852:	6032      	strlt	r2, [r6, #0]
 8004854:	43bb      	bics	r3, r7
 8004856:	d112      	bne.n	800487e <_dtoa_r+0x9e>
 8004858:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800485a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800485e:	6013      	str	r3, [r2, #0]
 8004860:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8004864:	4323      	orrs	r3, r4
 8004866:	f000 855a 	beq.w	800531e <_dtoa_r+0xb3e>
 800486a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800486c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8004acc <_dtoa_r+0x2ec>
 8004870:	2b00      	cmp	r3, #0
 8004872:	f000 855c 	beq.w	800532e <_dtoa_r+0xb4e>
 8004876:	f10a 0303 	add.w	r3, sl, #3
 800487a:	f000 bd56 	b.w	800532a <_dtoa_r+0xb4a>
 800487e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8004882:	2200      	movs	r2, #0
 8004884:	ec51 0b17 	vmov	r0, r1, d7
 8004888:	2300      	movs	r3, #0
 800488a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800488e:	f7fc f923 	bl	8000ad8 <__aeabi_dcmpeq>
 8004892:	4680      	mov	r8, r0
 8004894:	b158      	cbz	r0, 80048ae <_dtoa_r+0xce>
 8004896:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8004898:	2301      	movs	r3, #1
 800489a:	6013      	str	r3, [r2, #0]
 800489c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800489e:	b113      	cbz	r3, 80048a6 <_dtoa_r+0xc6>
 80048a0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80048a2:	4b86      	ldr	r3, [pc, #536]	@ (8004abc <_dtoa_r+0x2dc>)
 80048a4:	6013      	str	r3, [r2, #0]
 80048a6:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8004ad0 <_dtoa_r+0x2f0>
 80048aa:	f000 bd40 	b.w	800532e <_dtoa_r+0xb4e>
 80048ae:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 80048b2:	aa14      	add	r2, sp, #80	@ 0x50
 80048b4:	a915      	add	r1, sp, #84	@ 0x54
 80048b6:	4648      	mov	r0, r9
 80048b8:	f001 f984 	bl	8005bc4 <__d2b>
 80048bc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80048c0:	9002      	str	r0, [sp, #8]
 80048c2:	2e00      	cmp	r6, #0
 80048c4:	d078      	beq.n	80049b8 <_dtoa_r+0x1d8>
 80048c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80048c8:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 80048cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80048d0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80048d4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80048d8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80048dc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80048e0:	4619      	mov	r1, r3
 80048e2:	2200      	movs	r2, #0
 80048e4:	4b76      	ldr	r3, [pc, #472]	@ (8004ac0 <_dtoa_r+0x2e0>)
 80048e6:	f7fb fcd7 	bl	8000298 <__aeabi_dsub>
 80048ea:	a36b      	add	r3, pc, #428	@ (adr r3, 8004a98 <_dtoa_r+0x2b8>)
 80048ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048f0:	f7fb fe8a 	bl	8000608 <__aeabi_dmul>
 80048f4:	a36a      	add	r3, pc, #424	@ (adr r3, 8004aa0 <_dtoa_r+0x2c0>)
 80048f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048fa:	f7fb fccf 	bl	800029c <__adddf3>
 80048fe:	4604      	mov	r4, r0
 8004900:	4630      	mov	r0, r6
 8004902:	460d      	mov	r5, r1
 8004904:	f7fb fe16 	bl	8000534 <__aeabi_i2d>
 8004908:	a367      	add	r3, pc, #412	@ (adr r3, 8004aa8 <_dtoa_r+0x2c8>)
 800490a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800490e:	f7fb fe7b 	bl	8000608 <__aeabi_dmul>
 8004912:	4602      	mov	r2, r0
 8004914:	460b      	mov	r3, r1
 8004916:	4620      	mov	r0, r4
 8004918:	4629      	mov	r1, r5
 800491a:	f7fb fcbf 	bl	800029c <__adddf3>
 800491e:	4604      	mov	r4, r0
 8004920:	460d      	mov	r5, r1
 8004922:	f7fc f921 	bl	8000b68 <__aeabi_d2iz>
 8004926:	2200      	movs	r2, #0
 8004928:	4607      	mov	r7, r0
 800492a:	2300      	movs	r3, #0
 800492c:	4620      	mov	r0, r4
 800492e:	4629      	mov	r1, r5
 8004930:	f7fc f8dc 	bl	8000aec <__aeabi_dcmplt>
 8004934:	b140      	cbz	r0, 8004948 <_dtoa_r+0x168>
 8004936:	4638      	mov	r0, r7
 8004938:	f7fb fdfc 	bl	8000534 <__aeabi_i2d>
 800493c:	4622      	mov	r2, r4
 800493e:	462b      	mov	r3, r5
 8004940:	f7fc f8ca 	bl	8000ad8 <__aeabi_dcmpeq>
 8004944:	b900      	cbnz	r0, 8004948 <_dtoa_r+0x168>
 8004946:	3f01      	subs	r7, #1
 8004948:	2f16      	cmp	r7, #22
 800494a:	d852      	bhi.n	80049f2 <_dtoa_r+0x212>
 800494c:	4b5d      	ldr	r3, [pc, #372]	@ (8004ac4 <_dtoa_r+0x2e4>)
 800494e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004956:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800495a:	f7fc f8c7 	bl	8000aec <__aeabi_dcmplt>
 800495e:	2800      	cmp	r0, #0
 8004960:	d049      	beq.n	80049f6 <_dtoa_r+0x216>
 8004962:	3f01      	subs	r7, #1
 8004964:	2300      	movs	r3, #0
 8004966:	9310      	str	r3, [sp, #64]	@ 0x40
 8004968:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800496a:	1b9b      	subs	r3, r3, r6
 800496c:	1e5a      	subs	r2, r3, #1
 800496e:	bf45      	ittet	mi
 8004970:	f1c3 0301 	rsbmi	r3, r3, #1
 8004974:	9300      	strmi	r3, [sp, #0]
 8004976:	2300      	movpl	r3, #0
 8004978:	2300      	movmi	r3, #0
 800497a:	9206      	str	r2, [sp, #24]
 800497c:	bf54      	ite	pl
 800497e:	9300      	strpl	r3, [sp, #0]
 8004980:	9306      	strmi	r3, [sp, #24]
 8004982:	2f00      	cmp	r7, #0
 8004984:	db39      	blt.n	80049fa <_dtoa_r+0x21a>
 8004986:	9b06      	ldr	r3, [sp, #24]
 8004988:	970d      	str	r7, [sp, #52]	@ 0x34
 800498a:	443b      	add	r3, r7
 800498c:	9306      	str	r3, [sp, #24]
 800498e:	2300      	movs	r3, #0
 8004990:	9308      	str	r3, [sp, #32]
 8004992:	9b07      	ldr	r3, [sp, #28]
 8004994:	2b09      	cmp	r3, #9
 8004996:	d863      	bhi.n	8004a60 <_dtoa_r+0x280>
 8004998:	2b05      	cmp	r3, #5
 800499a:	bfc4      	itt	gt
 800499c:	3b04      	subgt	r3, #4
 800499e:	9307      	strgt	r3, [sp, #28]
 80049a0:	9b07      	ldr	r3, [sp, #28]
 80049a2:	f1a3 0302 	sub.w	r3, r3, #2
 80049a6:	bfcc      	ite	gt
 80049a8:	2400      	movgt	r4, #0
 80049aa:	2401      	movle	r4, #1
 80049ac:	2b03      	cmp	r3, #3
 80049ae:	d863      	bhi.n	8004a78 <_dtoa_r+0x298>
 80049b0:	e8df f003 	tbb	[pc, r3]
 80049b4:	2b375452 	.word	0x2b375452
 80049b8:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80049bc:	441e      	add	r6, r3
 80049be:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80049c2:	2b20      	cmp	r3, #32
 80049c4:	bfc1      	itttt	gt
 80049c6:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80049ca:	409f      	lslgt	r7, r3
 80049cc:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80049d0:	fa24 f303 	lsrgt.w	r3, r4, r3
 80049d4:	bfd6      	itet	le
 80049d6:	f1c3 0320 	rsble	r3, r3, #32
 80049da:	ea47 0003 	orrgt.w	r0, r7, r3
 80049de:	fa04 f003 	lslle.w	r0, r4, r3
 80049e2:	f7fb fd97 	bl	8000514 <__aeabi_ui2d>
 80049e6:	2201      	movs	r2, #1
 80049e8:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80049ec:	3e01      	subs	r6, #1
 80049ee:	9212      	str	r2, [sp, #72]	@ 0x48
 80049f0:	e776      	b.n	80048e0 <_dtoa_r+0x100>
 80049f2:	2301      	movs	r3, #1
 80049f4:	e7b7      	b.n	8004966 <_dtoa_r+0x186>
 80049f6:	9010      	str	r0, [sp, #64]	@ 0x40
 80049f8:	e7b6      	b.n	8004968 <_dtoa_r+0x188>
 80049fa:	9b00      	ldr	r3, [sp, #0]
 80049fc:	1bdb      	subs	r3, r3, r7
 80049fe:	9300      	str	r3, [sp, #0]
 8004a00:	427b      	negs	r3, r7
 8004a02:	9308      	str	r3, [sp, #32]
 8004a04:	2300      	movs	r3, #0
 8004a06:	930d      	str	r3, [sp, #52]	@ 0x34
 8004a08:	e7c3      	b.n	8004992 <_dtoa_r+0x1b2>
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	9309      	str	r3, [sp, #36]	@ 0x24
 8004a0e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8004a10:	eb07 0b03 	add.w	fp, r7, r3
 8004a14:	f10b 0301 	add.w	r3, fp, #1
 8004a18:	2b01      	cmp	r3, #1
 8004a1a:	9303      	str	r3, [sp, #12]
 8004a1c:	bfb8      	it	lt
 8004a1e:	2301      	movlt	r3, #1
 8004a20:	e006      	b.n	8004a30 <_dtoa_r+0x250>
 8004a22:	2301      	movs	r3, #1
 8004a24:	9309      	str	r3, [sp, #36]	@ 0x24
 8004a26:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	dd28      	ble.n	8004a7e <_dtoa_r+0x29e>
 8004a2c:	469b      	mov	fp, r3
 8004a2e:	9303      	str	r3, [sp, #12]
 8004a30:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8004a34:	2100      	movs	r1, #0
 8004a36:	2204      	movs	r2, #4
 8004a38:	f102 0514 	add.w	r5, r2, #20
 8004a3c:	429d      	cmp	r5, r3
 8004a3e:	d926      	bls.n	8004a8e <_dtoa_r+0x2ae>
 8004a40:	6041      	str	r1, [r0, #4]
 8004a42:	4648      	mov	r0, r9
 8004a44:	f000 fd9c 	bl	8005580 <_Balloc>
 8004a48:	4682      	mov	sl, r0
 8004a4a:	2800      	cmp	r0, #0
 8004a4c:	d142      	bne.n	8004ad4 <_dtoa_r+0x2f4>
 8004a4e:	4b1e      	ldr	r3, [pc, #120]	@ (8004ac8 <_dtoa_r+0x2e8>)
 8004a50:	4602      	mov	r2, r0
 8004a52:	f240 11af 	movw	r1, #431	@ 0x1af
 8004a56:	e6da      	b.n	800480e <_dtoa_r+0x2e>
 8004a58:	2300      	movs	r3, #0
 8004a5a:	e7e3      	b.n	8004a24 <_dtoa_r+0x244>
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	e7d5      	b.n	8004a0c <_dtoa_r+0x22c>
 8004a60:	2401      	movs	r4, #1
 8004a62:	2300      	movs	r3, #0
 8004a64:	9307      	str	r3, [sp, #28]
 8004a66:	9409      	str	r4, [sp, #36]	@ 0x24
 8004a68:	f04f 3bff 	mov.w	fp, #4294967295
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	f8cd b00c 	str.w	fp, [sp, #12]
 8004a72:	2312      	movs	r3, #18
 8004a74:	920c      	str	r2, [sp, #48]	@ 0x30
 8004a76:	e7db      	b.n	8004a30 <_dtoa_r+0x250>
 8004a78:	2301      	movs	r3, #1
 8004a7a:	9309      	str	r3, [sp, #36]	@ 0x24
 8004a7c:	e7f4      	b.n	8004a68 <_dtoa_r+0x288>
 8004a7e:	f04f 0b01 	mov.w	fp, #1
 8004a82:	f8cd b00c 	str.w	fp, [sp, #12]
 8004a86:	465b      	mov	r3, fp
 8004a88:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8004a8c:	e7d0      	b.n	8004a30 <_dtoa_r+0x250>
 8004a8e:	3101      	adds	r1, #1
 8004a90:	0052      	lsls	r2, r2, #1
 8004a92:	e7d1      	b.n	8004a38 <_dtoa_r+0x258>
 8004a94:	f3af 8000 	nop.w
 8004a98:	636f4361 	.word	0x636f4361
 8004a9c:	3fd287a7 	.word	0x3fd287a7
 8004aa0:	8b60c8b3 	.word	0x8b60c8b3
 8004aa4:	3fc68a28 	.word	0x3fc68a28
 8004aa8:	509f79fb 	.word	0x509f79fb
 8004aac:	3fd34413 	.word	0x3fd34413
 8004ab0:	08007276 	.word	0x08007276
 8004ab4:	0800728d 	.word	0x0800728d
 8004ab8:	7ff00000 	.word	0x7ff00000
 8004abc:	08007246 	.word	0x08007246
 8004ac0:	3ff80000 	.word	0x3ff80000
 8004ac4:	08034e38 	.word	0x08034e38
 8004ac8:	080072e5 	.word	0x080072e5
 8004acc:	08007272 	.word	0x08007272
 8004ad0:	08007245 	.word	0x08007245
 8004ad4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8004ad8:	6018      	str	r0, [r3, #0]
 8004ada:	9b03      	ldr	r3, [sp, #12]
 8004adc:	2b0e      	cmp	r3, #14
 8004ade:	f200 80a1 	bhi.w	8004c24 <_dtoa_r+0x444>
 8004ae2:	2c00      	cmp	r4, #0
 8004ae4:	f000 809e 	beq.w	8004c24 <_dtoa_r+0x444>
 8004ae8:	2f00      	cmp	r7, #0
 8004aea:	dd33      	ble.n	8004b54 <_dtoa_r+0x374>
 8004aec:	4b9c      	ldr	r3, [pc, #624]	@ (8004d60 <_dtoa_r+0x580>)
 8004aee:	f007 020f 	and.w	r2, r7, #15
 8004af2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004af6:	ed93 7b00 	vldr	d7, [r3]
 8004afa:	05f8      	lsls	r0, r7, #23
 8004afc:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8004b00:	ea4f 1427 	mov.w	r4, r7, asr #4
 8004b04:	d516      	bpl.n	8004b34 <_dtoa_r+0x354>
 8004b06:	4b97      	ldr	r3, [pc, #604]	@ (8004d64 <_dtoa_r+0x584>)
 8004b08:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004b0c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004b10:	f7fb fea4 	bl	800085c <__aeabi_ddiv>
 8004b14:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004b18:	f004 040f 	and.w	r4, r4, #15
 8004b1c:	2603      	movs	r6, #3
 8004b1e:	4d91      	ldr	r5, [pc, #580]	@ (8004d64 <_dtoa_r+0x584>)
 8004b20:	b954      	cbnz	r4, 8004b38 <_dtoa_r+0x358>
 8004b22:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8004b26:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004b2a:	f7fb fe97 	bl	800085c <__aeabi_ddiv>
 8004b2e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004b32:	e028      	b.n	8004b86 <_dtoa_r+0x3a6>
 8004b34:	2602      	movs	r6, #2
 8004b36:	e7f2      	b.n	8004b1e <_dtoa_r+0x33e>
 8004b38:	07e1      	lsls	r1, r4, #31
 8004b3a:	d508      	bpl.n	8004b4e <_dtoa_r+0x36e>
 8004b3c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8004b40:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004b44:	f7fb fd60 	bl	8000608 <__aeabi_dmul>
 8004b48:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8004b4c:	3601      	adds	r6, #1
 8004b4e:	1064      	asrs	r4, r4, #1
 8004b50:	3508      	adds	r5, #8
 8004b52:	e7e5      	b.n	8004b20 <_dtoa_r+0x340>
 8004b54:	f000 80af 	beq.w	8004cb6 <_dtoa_r+0x4d6>
 8004b58:	427c      	negs	r4, r7
 8004b5a:	4b81      	ldr	r3, [pc, #516]	@ (8004d60 <_dtoa_r+0x580>)
 8004b5c:	4d81      	ldr	r5, [pc, #516]	@ (8004d64 <_dtoa_r+0x584>)
 8004b5e:	f004 020f 	and.w	r2, r4, #15
 8004b62:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b6a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004b6e:	f7fb fd4b 	bl	8000608 <__aeabi_dmul>
 8004b72:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004b76:	1124      	asrs	r4, r4, #4
 8004b78:	2300      	movs	r3, #0
 8004b7a:	2602      	movs	r6, #2
 8004b7c:	2c00      	cmp	r4, #0
 8004b7e:	f040 808f 	bne.w	8004ca0 <_dtoa_r+0x4c0>
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d1d3      	bne.n	8004b2e <_dtoa_r+0x34e>
 8004b86:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8004b88:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	f000 8094 	beq.w	8004cba <_dtoa_r+0x4da>
 8004b92:	4b75      	ldr	r3, [pc, #468]	@ (8004d68 <_dtoa_r+0x588>)
 8004b94:	2200      	movs	r2, #0
 8004b96:	4620      	mov	r0, r4
 8004b98:	4629      	mov	r1, r5
 8004b9a:	f7fb ffa7 	bl	8000aec <__aeabi_dcmplt>
 8004b9e:	2800      	cmp	r0, #0
 8004ba0:	f000 808b 	beq.w	8004cba <_dtoa_r+0x4da>
 8004ba4:	9b03      	ldr	r3, [sp, #12]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	f000 8087 	beq.w	8004cba <_dtoa_r+0x4da>
 8004bac:	f1bb 0f00 	cmp.w	fp, #0
 8004bb0:	dd34      	ble.n	8004c1c <_dtoa_r+0x43c>
 8004bb2:	4620      	mov	r0, r4
 8004bb4:	4b6d      	ldr	r3, [pc, #436]	@ (8004d6c <_dtoa_r+0x58c>)
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	4629      	mov	r1, r5
 8004bba:	f7fb fd25 	bl	8000608 <__aeabi_dmul>
 8004bbe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004bc2:	f107 38ff 	add.w	r8, r7, #4294967295
 8004bc6:	3601      	adds	r6, #1
 8004bc8:	465c      	mov	r4, fp
 8004bca:	4630      	mov	r0, r6
 8004bcc:	f7fb fcb2 	bl	8000534 <__aeabi_i2d>
 8004bd0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004bd4:	f7fb fd18 	bl	8000608 <__aeabi_dmul>
 8004bd8:	4b65      	ldr	r3, [pc, #404]	@ (8004d70 <_dtoa_r+0x590>)
 8004bda:	2200      	movs	r2, #0
 8004bdc:	f7fb fb5e 	bl	800029c <__adddf3>
 8004be0:	4605      	mov	r5, r0
 8004be2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8004be6:	2c00      	cmp	r4, #0
 8004be8:	d16a      	bne.n	8004cc0 <_dtoa_r+0x4e0>
 8004bea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004bee:	4b61      	ldr	r3, [pc, #388]	@ (8004d74 <_dtoa_r+0x594>)
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	f7fb fb51 	bl	8000298 <__aeabi_dsub>
 8004bf6:	4602      	mov	r2, r0
 8004bf8:	460b      	mov	r3, r1
 8004bfa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004bfe:	462a      	mov	r2, r5
 8004c00:	4633      	mov	r3, r6
 8004c02:	f7fb ff91 	bl	8000b28 <__aeabi_dcmpgt>
 8004c06:	2800      	cmp	r0, #0
 8004c08:	f040 8298 	bne.w	800513c <_dtoa_r+0x95c>
 8004c0c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004c10:	462a      	mov	r2, r5
 8004c12:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8004c16:	f7fb ff69 	bl	8000aec <__aeabi_dcmplt>
 8004c1a:	bb38      	cbnz	r0, 8004c6c <_dtoa_r+0x48c>
 8004c1c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8004c20:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004c24:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	f2c0 8157 	blt.w	8004eda <_dtoa_r+0x6fa>
 8004c2c:	2f0e      	cmp	r7, #14
 8004c2e:	f300 8154 	bgt.w	8004eda <_dtoa_r+0x6fa>
 8004c32:	4b4b      	ldr	r3, [pc, #300]	@ (8004d60 <_dtoa_r+0x580>)
 8004c34:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004c38:	ed93 7b00 	vldr	d7, [r3]
 8004c3c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	ed8d 7b00 	vstr	d7, [sp]
 8004c44:	f280 80e5 	bge.w	8004e12 <_dtoa_r+0x632>
 8004c48:	9b03      	ldr	r3, [sp, #12]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	f300 80e1 	bgt.w	8004e12 <_dtoa_r+0x632>
 8004c50:	d10c      	bne.n	8004c6c <_dtoa_r+0x48c>
 8004c52:	4b48      	ldr	r3, [pc, #288]	@ (8004d74 <_dtoa_r+0x594>)
 8004c54:	2200      	movs	r2, #0
 8004c56:	ec51 0b17 	vmov	r0, r1, d7
 8004c5a:	f7fb fcd5 	bl	8000608 <__aeabi_dmul>
 8004c5e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004c62:	f7fb ff57 	bl	8000b14 <__aeabi_dcmpge>
 8004c66:	2800      	cmp	r0, #0
 8004c68:	f000 8266 	beq.w	8005138 <_dtoa_r+0x958>
 8004c6c:	2400      	movs	r4, #0
 8004c6e:	4625      	mov	r5, r4
 8004c70:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8004c72:	4656      	mov	r6, sl
 8004c74:	ea6f 0803 	mvn.w	r8, r3
 8004c78:	2700      	movs	r7, #0
 8004c7a:	4621      	mov	r1, r4
 8004c7c:	4648      	mov	r0, r9
 8004c7e:	f000 fcbf 	bl	8005600 <_Bfree>
 8004c82:	2d00      	cmp	r5, #0
 8004c84:	f000 80bd 	beq.w	8004e02 <_dtoa_r+0x622>
 8004c88:	b12f      	cbz	r7, 8004c96 <_dtoa_r+0x4b6>
 8004c8a:	42af      	cmp	r7, r5
 8004c8c:	d003      	beq.n	8004c96 <_dtoa_r+0x4b6>
 8004c8e:	4639      	mov	r1, r7
 8004c90:	4648      	mov	r0, r9
 8004c92:	f000 fcb5 	bl	8005600 <_Bfree>
 8004c96:	4629      	mov	r1, r5
 8004c98:	4648      	mov	r0, r9
 8004c9a:	f000 fcb1 	bl	8005600 <_Bfree>
 8004c9e:	e0b0      	b.n	8004e02 <_dtoa_r+0x622>
 8004ca0:	07e2      	lsls	r2, r4, #31
 8004ca2:	d505      	bpl.n	8004cb0 <_dtoa_r+0x4d0>
 8004ca4:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004ca8:	f7fb fcae 	bl	8000608 <__aeabi_dmul>
 8004cac:	3601      	adds	r6, #1
 8004cae:	2301      	movs	r3, #1
 8004cb0:	1064      	asrs	r4, r4, #1
 8004cb2:	3508      	adds	r5, #8
 8004cb4:	e762      	b.n	8004b7c <_dtoa_r+0x39c>
 8004cb6:	2602      	movs	r6, #2
 8004cb8:	e765      	b.n	8004b86 <_dtoa_r+0x3a6>
 8004cba:	9c03      	ldr	r4, [sp, #12]
 8004cbc:	46b8      	mov	r8, r7
 8004cbe:	e784      	b.n	8004bca <_dtoa_r+0x3ea>
 8004cc0:	4b27      	ldr	r3, [pc, #156]	@ (8004d60 <_dtoa_r+0x580>)
 8004cc2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004cc4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004cc8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004ccc:	4454      	add	r4, sl
 8004cce:	2900      	cmp	r1, #0
 8004cd0:	d054      	beq.n	8004d7c <_dtoa_r+0x59c>
 8004cd2:	4929      	ldr	r1, [pc, #164]	@ (8004d78 <_dtoa_r+0x598>)
 8004cd4:	2000      	movs	r0, #0
 8004cd6:	f7fb fdc1 	bl	800085c <__aeabi_ddiv>
 8004cda:	4633      	mov	r3, r6
 8004cdc:	462a      	mov	r2, r5
 8004cde:	f7fb fadb 	bl	8000298 <__aeabi_dsub>
 8004ce2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8004ce6:	4656      	mov	r6, sl
 8004ce8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004cec:	f7fb ff3c 	bl	8000b68 <__aeabi_d2iz>
 8004cf0:	4605      	mov	r5, r0
 8004cf2:	f7fb fc1f 	bl	8000534 <__aeabi_i2d>
 8004cf6:	4602      	mov	r2, r0
 8004cf8:	460b      	mov	r3, r1
 8004cfa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004cfe:	f7fb facb 	bl	8000298 <__aeabi_dsub>
 8004d02:	3530      	adds	r5, #48	@ 0x30
 8004d04:	4602      	mov	r2, r0
 8004d06:	460b      	mov	r3, r1
 8004d08:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004d0c:	f806 5b01 	strb.w	r5, [r6], #1
 8004d10:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8004d14:	f7fb feea 	bl	8000aec <__aeabi_dcmplt>
 8004d18:	2800      	cmp	r0, #0
 8004d1a:	d172      	bne.n	8004e02 <_dtoa_r+0x622>
 8004d1c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004d20:	4911      	ldr	r1, [pc, #68]	@ (8004d68 <_dtoa_r+0x588>)
 8004d22:	2000      	movs	r0, #0
 8004d24:	f7fb fab8 	bl	8000298 <__aeabi_dsub>
 8004d28:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8004d2c:	f7fb fede 	bl	8000aec <__aeabi_dcmplt>
 8004d30:	2800      	cmp	r0, #0
 8004d32:	f040 80b4 	bne.w	8004e9e <_dtoa_r+0x6be>
 8004d36:	42a6      	cmp	r6, r4
 8004d38:	f43f af70 	beq.w	8004c1c <_dtoa_r+0x43c>
 8004d3c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8004d40:	4b0a      	ldr	r3, [pc, #40]	@ (8004d6c <_dtoa_r+0x58c>)
 8004d42:	2200      	movs	r2, #0
 8004d44:	f7fb fc60 	bl	8000608 <__aeabi_dmul>
 8004d48:	4b08      	ldr	r3, [pc, #32]	@ (8004d6c <_dtoa_r+0x58c>)
 8004d4a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8004d4e:	2200      	movs	r2, #0
 8004d50:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004d54:	f7fb fc58 	bl	8000608 <__aeabi_dmul>
 8004d58:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004d5c:	e7c4      	b.n	8004ce8 <_dtoa_r+0x508>
 8004d5e:	bf00      	nop
 8004d60:	08034e38 	.word	0x08034e38
 8004d64:	08034e10 	.word	0x08034e10
 8004d68:	3ff00000 	.word	0x3ff00000
 8004d6c:	40240000 	.word	0x40240000
 8004d70:	401c0000 	.word	0x401c0000
 8004d74:	40140000 	.word	0x40140000
 8004d78:	3fe00000 	.word	0x3fe00000
 8004d7c:	4631      	mov	r1, r6
 8004d7e:	4628      	mov	r0, r5
 8004d80:	f7fb fc42 	bl	8000608 <__aeabi_dmul>
 8004d84:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8004d88:	9413      	str	r4, [sp, #76]	@ 0x4c
 8004d8a:	4656      	mov	r6, sl
 8004d8c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004d90:	f7fb feea 	bl	8000b68 <__aeabi_d2iz>
 8004d94:	4605      	mov	r5, r0
 8004d96:	f7fb fbcd 	bl	8000534 <__aeabi_i2d>
 8004d9a:	4602      	mov	r2, r0
 8004d9c:	460b      	mov	r3, r1
 8004d9e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004da2:	f7fb fa79 	bl	8000298 <__aeabi_dsub>
 8004da6:	3530      	adds	r5, #48	@ 0x30
 8004da8:	f806 5b01 	strb.w	r5, [r6], #1
 8004dac:	4602      	mov	r2, r0
 8004dae:	460b      	mov	r3, r1
 8004db0:	42a6      	cmp	r6, r4
 8004db2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004db6:	f04f 0200 	mov.w	r2, #0
 8004dba:	d124      	bne.n	8004e06 <_dtoa_r+0x626>
 8004dbc:	4baf      	ldr	r3, [pc, #700]	@ (800507c <_dtoa_r+0x89c>)
 8004dbe:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8004dc2:	f7fb fa6b 	bl	800029c <__adddf3>
 8004dc6:	4602      	mov	r2, r0
 8004dc8:	460b      	mov	r3, r1
 8004dca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004dce:	f7fb feab 	bl	8000b28 <__aeabi_dcmpgt>
 8004dd2:	2800      	cmp	r0, #0
 8004dd4:	d163      	bne.n	8004e9e <_dtoa_r+0x6be>
 8004dd6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8004dda:	49a8      	ldr	r1, [pc, #672]	@ (800507c <_dtoa_r+0x89c>)
 8004ddc:	2000      	movs	r0, #0
 8004dde:	f7fb fa5b 	bl	8000298 <__aeabi_dsub>
 8004de2:	4602      	mov	r2, r0
 8004de4:	460b      	mov	r3, r1
 8004de6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004dea:	f7fb fe7f 	bl	8000aec <__aeabi_dcmplt>
 8004dee:	2800      	cmp	r0, #0
 8004df0:	f43f af14 	beq.w	8004c1c <_dtoa_r+0x43c>
 8004df4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8004df6:	1e73      	subs	r3, r6, #1
 8004df8:	9313      	str	r3, [sp, #76]	@ 0x4c
 8004dfa:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8004dfe:	2b30      	cmp	r3, #48	@ 0x30
 8004e00:	d0f8      	beq.n	8004df4 <_dtoa_r+0x614>
 8004e02:	4647      	mov	r7, r8
 8004e04:	e03b      	b.n	8004e7e <_dtoa_r+0x69e>
 8004e06:	4b9e      	ldr	r3, [pc, #632]	@ (8005080 <_dtoa_r+0x8a0>)
 8004e08:	f7fb fbfe 	bl	8000608 <__aeabi_dmul>
 8004e0c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004e10:	e7bc      	b.n	8004d8c <_dtoa_r+0x5ac>
 8004e12:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8004e16:	4656      	mov	r6, sl
 8004e18:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004e1c:	4620      	mov	r0, r4
 8004e1e:	4629      	mov	r1, r5
 8004e20:	f7fb fd1c 	bl	800085c <__aeabi_ddiv>
 8004e24:	f7fb fea0 	bl	8000b68 <__aeabi_d2iz>
 8004e28:	4680      	mov	r8, r0
 8004e2a:	f7fb fb83 	bl	8000534 <__aeabi_i2d>
 8004e2e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004e32:	f7fb fbe9 	bl	8000608 <__aeabi_dmul>
 8004e36:	4602      	mov	r2, r0
 8004e38:	460b      	mov	r3, r1
 8004e3a:	4620      	mov	r0, r4
 8004e3c:	4629      	mov	r1, r5
 8004e3e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8004e42:	f7fb fa29 	bl	8000298 <__aeabi_dsub>
 8004e46:	f806 4b01 	strb.w	r4, [r6], #1
 8004e4a:	9d03      	ldr	r5, [sp, #12]
 8004e4c:	eba6 040a 	sub.w	r4, r6, sl
 8004e50:	42a5      	cmp	r5, r4
 8004e52:	4602      	mov	r2, r0
 8004e54:	460b      	mov	r3, r1
 8004e56:	d133      	bne.n	8004ec0 <_dtoa_r+0x6e0>
 8004e58:	f7fb fa20 	bl	800029c <__adddf3>
 8004e5c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004e60:	4604      	mov	r4, r0
 8004e62:	460d      	mov	r5, r1
 8004e64:	f7fb fe60 	bl	8000b28 <__aeabi_dcmpgt>
 8004e68:	b9c0      	cbnz	r0, 8004e9c <_dtoa_r+0x6bc>
 8004e6a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004e6e:	4620      	mov	r0, r4
 8004e70:	4629      	mov	r1, r5
 8004e72:	f7fb fe31 	bl	8000ad8 <__aeabi_dcmpeq>
 8004e76:	b110      	cbz	r0, 8004e7e <_dtoa_r+0x69e>
 8004e78:	f018 0f01 	tst.w	r8, #1
 8004e7c:	d10e      	bne.n	8004e9c <_dtoa_r+0x6bc>
 8004e7e:	9902      	ldr	r1, [sp, #8]
 8004e80:	4648      	mov	r0, r9
 8004e82:	f000 fbbd 	bl	8005600 <_Bfree>
 8004e86:	2300      	movs	r3, #0
 8004e88:	7033      	strb	r3, [r6, #0]
 8004e8a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8004e8c:	3701      	adds	r7, #1
 8004e8e:	601f      	str	r7, [r3, #0]
 8004e90:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	f000 824b 	beq.w	800532e <_dtoa_r+0xb4e>
 8004e98:	601e      	str	r6, [r3, #0]
 8004e9a:	e248      	b.n	800532e <_dtoa_r+0xb4e>
 8004e9c:	46b8      	mov	r8, r7
 8004e9e:	4633      	mov	r3, r6
 8004ea0:	461e      	mov	r6, r3
 8004ea2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004ea6:	2a39      	cmp	r2, #57	@ 0x39
 8004ea8:	d106      	bne.n	8004eb8 <_dtoa_r+0x6d8>
 8004eaa:	459a      	cmp	sl, r3
 8004eac:	d1f8      	bne.n	8004ea0 <_dtoa_r+0x6c0>
 8004eae:	2230      	movs	r2, #48	@ 0x30
 8004eb0:	f108 0801 	add.w	r8, r8, #1
 8004eb4:	f88a 2000 	strb.w	r2, [sl]
 8004eb8:	781a      	ldrb	r2, [r3, #0]
 8004eba:	3201      	adds	r2, #1
 8004ebc:	701a      	strb	r2, [r3, #0]
 8004ebe:	e7a0      	b.n	8004e02 <_dtoa_r+0x622>
 8004ec0:	4b6f      	ldr	r3, [pc, #444]	@ (8005080 <_dtoa_r+0x8a0>)
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	f7fb fba0 	bl	8000608 <__aeabi_dmul>
 8004ec8:	2200      	movs	r2, #0
 8004eca:	2300      	movs	r3, #0
 8004ecc:	4604      	mov	r4, r0
 8004ece:	460d      	mov	r5, r1
 8004ed0:	f7fb fe02 	bl	8000ad8 <__aeabi_dcmpeq>
 8004ed4:	2800      	cmp	r0, #0
 8004ed6:	d09f      	beq.n	8004e18 <_dtoa_r+0x638>
 8004ed8:	e7d1      	b.n	8004e7e <_dtoa_r+0x69e>
 8004eda:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004edc:	2a00      	cmp	r2, #0
 8004ede:	f000 80ea 	beq.w	80050b6 <_dtoa_r+0x8d6>
 8004ee2:	9a07      	ldr	r2, [sp, #28]
 8004ee4:	2a01      	cmp	r2, #1
 8004ee6:	f300 80cd 	bgt.w	8005084 <_dtoa_r+0x8a4>
 8004eea:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8004eec:	2a00      	cmp	r2, #0
 8004eee:	f000 80c1 	beq.w	8005074 <_dtoa_r+0x894>
 8004ef2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8004ef6:	9c08      	ldr	r4, [sp, #32]
 8004ef8:	9e00      	ldr	r6, [sp, #0]
 8004efa:	9a00      	ldr	r2, [sp, #0]
 8004efc:	441a      	add	r2, r3
 8004efe:	9200      	str	r2, [sp, #0]
 8004f00:	9a06      	ldr	r2, [sp, #24]
 8004f02:	2101      	movs	r1, #1
 8004f04:	441a      	add	r2, r3
 8004f06:	4648      	mov	r0, r9
 8004f08:	9206      	str	r2, [sp, #24]
 8004f0a:	f000 fc2d 	bl	8005768 <__i2b>
 8004f0e:	4605      	mov	r5, r0
 8004f10:	b166      	cbz	r6, 8004f2c <_dtoa_r+0x74c>
 8004f12:	9b06      	ldr	r3, [sp, #24]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	dd09      	ble.n	8004f2c <_dtoa_r+0x74c>
 8004f18:	42b3      	cmp	r3, r6
 8004f1a:	9a00      	ldr	r2, [sp, #0]
 8004f1c:	bfa8      	it	ge
 8004f1e:	4633      	movge	r3, r6
 8004f20:	1ad2      	subs	r2, r2, r3
 8004f22:	9200      	str	r2, [sp, #0]
 8004f24:	9a06      	ldr	r2, [sp, #24]
 8004f26:	1af6      	subs	r6, r6, r3
 8004f28:	1ad3      	subs	r3, r2, r3
 8004f2a:	9306      	str	r3, [sp, #24]
 8004f2c:	9b08      	ldr	r3, [sp, #32]
 8004f2e:	b30b      	cbz	r3, 8004f74 <_dtoa_r+0x794>
 8004f30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	f000 80c6 	beq.w	80050c4 <_dtoa_r+0x8e4>
 8004f38:	2c00      	cmp	r4, #0
 8004f3a:	f000 80c0 	beq.w	80050be <_dtoa_r+0x8de>
 8004f3e:	4629      	mov	r1, r5
 8004f40:	4622      	mov	r2, r4
 8004f42:	4648      	mov	r0, r9
 8004f44:	f000 fcc8 	bl	80058d8 <__pow5mult>
 8004f48:	9a02      	ldr	r2, [sp, #8]
 8004f4a:	4601      	mov	r1, r0
 8004f4c:	4605      	mov	r5, r0
 8004f4e:	4648      	mov	r0, r9
 8004f50:	f000 fc20 	bl	8005794 <__multiply>
 8004f54:	9902      	ldr	r1, [sp, #8]
 8004f56:	4680      	mov	r8, r0
 8004f58:	4648      	mov	r0, r9
 8004f5a:	f000 fb51 	bl	8005600 <_Bfree>
 8004f5e:	9b08      	ldr	r3, [sp, #32]
 8004f60:	1b1b      	subs	r3, r3, r4
 8004f62:	9308      	str	r3, [sp, #32]
 8004f64:	f000 80b1 	beq.w	80050ca <_dtoa_r+0x8ea>
 8004f68:	9a08      	ldr	r2, [sp, #32]
 8004f6a:	4641      	mov	r1, r8
 8004f6c:	4648      	mov	r0, r9
 8004f6e:	f000 fcb3 	bl	80058d8 <__pow5mult>
 8004f72:	9002      	str	r0, [sp, #8]
 8004f74:	2101      	movs	r1, #1
 8004f76:	4648      	mov	r0, r9
 8004f78:	f000 fbf6 	bl	8005768 <__i2b>
 8004f7c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004f7e:	4604      	mov	r4, r0
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	f000 81d8 	beq.w	8005336 <_dtoa_r+0xb56>
 8004f86:	461a      	mov	r2, r3
 8004f88:	4601      	mov	r1, r0
 8004f8a:	4648      	mov	r0, r9
 8004f8c:	f000 fca4 	bl	80058d8 <__pow5mult>
 8004f90:	9b07      	ldr	r3, [sp, #28]
 8004f92:	2b01      	cmp	r3, #1
 8004f94:	4604      	mov	r4, r0
 8004f96:	f300 809f 	bgt.w	80050d8 <_dtoa_r+0x8f8>
 8004f9a:	9b04      	ldr	r3, [sp, #16]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	f040 8097 	bne.w	80050d0 <_dtoa_r+0x8f0>
 8004fa2:	9b05      	ldr	r3, [sp, #20]
 8004fa4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	f040 8093 	bne.w	80050d4 <_dtoa_r+0x8f4>
 8004fae:	9b05      	ldr	r3, [sp, #20]
 8004fb0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004fb4:	0d1b      	lsrs	r3, r3, #20
 8004fb6:	051b      	lsls	r3, r3, #20
 8004fb8:	b133      	cbz	r3, 8004fc8 <_dtoa_r+0x7e8>
 8004fba:	9b00      	ldr	r3, [sp, #0]
 8004fbc:	3301      	adds	r3, #1
 8004fbe:	9300      	str	r3, [sp, #0]
 8004fc0:	9b06      	ldr	r3, [sp, #24]
 8004fc2:	3301      	adds	r3, #1
 8004fc4:	9306      	str	r3, [sp, #24]
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	9308      	str	r3, [sp, #32]
 8004fca:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	f000 81b8 	beq.w	8005342 <_dtoa_r+0xb62>
 8004fd2:	6923      	ldr	r3, [r4, #16]
 8004fd4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004fd8:	6918      	ldr	r0, [r3, #16]
 8004fda:	f000 fb79 	bl	80056d0 <__hi0bits>
 8004fde:	f1c0 0020 	rsb	r0, r0, #32
 8004fe2:	9b06      	ldr	r3, [sp, #24]
 8004fe4:	4418      	add	r0, r3
 8004fe6:	f010 001f 	ands.w	r0, r0, #31
 8004fea:	f000 8082 	beq.w	80050f2 <_dtoa_r+0x912>
 8004fee:	f1c0 0320 	rsb	r3, r0, #32
 8004ff2:	2b04      	cmp	r3, #4
 8004ff4:	dd73      	ble.n	80050de <_dtoa_r+0x8fe>
 8004ff6:	9b00      	ldr	r3, [sp, #0]
 8004ff8:	f1c0 001c 	rsb	r0, r0, #28
 8004ffc:	4403      	add	r3, r0
 8004ffe:	9300      	str	r3, [sp, #0]
 8005000:	9b06      	ldr	r3, [sp, #24]
 8005002:	4403      	add	r3, r0
 8005004:	4406      	add	r6, r0
 8005006:	9306      	str	r3, [sp, #24]
 8005008:	9b00      	ldr	r3, [sp, #0]
 800500a:	2b00      	cmp	r3, #0
 800500c:	dd05      	ble.n	800501a <_dtoa_r+0x83a>
 800500e:	9902      	ldr	r1, [sp, #8]
 8005010:	461a      	mov	r2, r3
 8005012:	4648      	mov	r0, r9
 8005014:	f000 fcba 	bl	800598c <__lshift>
 8005018:	9002      	str	r0, [sp, #8]
 800501a:	9b06      	ldr	r3, [sp, #24]
 800501c:	2b00      	cmp	r3, #0
 800501e:	dd05      	ble.n	800502c <_dtoa_r+0x84c>
 8005020:	4621      	mov	r1, r4
 8005022:	461a      	mov	r2, r3
 8005024:	4648      	mov	r0, r9
 8005026:	f000 fcb1 	bl	800598c <__lshift>
 800502a:	4604      	mov	r4, r0
 800502c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800502e:	2b00      	cmp	r3, #0
 8005030:	d061      	beq.n	80050f6 <_dtoa_r+0x916>
 8005032:	9802      	ldr	r0, [sp, #8]
 8005034:	4621      	mov	r1, r4
 8005036:	f000 fd15 	bl	8005a64 <__mcmp>
 800503a:	2800      	cmp	r0, #0
 800503c:	da5b      	bge.n	80050f6 <_dtoa_r+0x916>
 800503e:	2300      	movs	r3, #0
 8005040:	9902      	ldr	r1, [sp, #8]
 8005042:	220a      	movs	r2, #10
 8005044:	4648      	mov	r0, r9
 8005046:	f000 fafd 	bl	8005644 <__multadd>
 800504a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800504c:	9002      	str	r0, [sp, #8]
 800504e:	f107 38ff 	add.w	r8, r7, #4294967295
 8005052:	2b00      	cmp	r3, #0
 8005054:	f000 8177 	beq.w	8005346 <_dtoa_r+0xb66>
 8005058:	4629      	mov	r1, r5
 800505a:	2300      	movs	r3, #0
 800505c:	220a      	movs	r2, #10
 800505e:	4648      	mov	r0, r9
 8005060:	f000 faf0 	bl	8005644 <__multadd>
 8005064:	f1bb 0f00 	cmp.w	fp, #0
 8005068:	4605      	mov	r5, r0
 800506a:	dc6f      	bgt.n	800514c <_dtoa_r+0x96c>
 800506c:	9b07      	ldr	r3, [sp, #28]
 800506e:	2b02      	cmp	r3, #2
 8005070:	dc49      	bgt.n	8005106 <_dtoa_r+0x926>
 8005072:	e06b      	b.n	800514c <_dtoa_r+0x96c>
 8005074:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005076:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800507a:	e73c      	b.n	8004ef6 <_dtoa_r+0x716>
 800507c:	3fe00000 	.word	0x3fe00000
 8005080:	40240000 	.word	0x40240000
 8005084:	9b03      	ldr	r3, [sp, #12]
 8005086:	1e5c      	subs	r4, r3, #1
 8005088:	9b08      	ldr	r3, [sp, #32]
 800508a:	42a3      	cmp	r3, r4
 800508c:	db09      	blt.n	80050a2 <_dtoa_r+0x8c2>
 800508e:	1b1c      	subs	r4, r3, r4
 8005090:	9b03      	ldr	r3, [sp, #12]
 8005092:	2b00      	cmp	r3, #0
 8005094:	f6bf af30 	bge.w	8004ef8 <_dtoa_r+0x718>
 8005098:	9b00      	ldr	r3, [sp, #0]
 800509a:	9a03      	ldr	r2, [sp, #12]
 800509c:	1a9e      	subs	r6, r3, r2
 800509e:	2300      	movs	r3, #0
 80050a0:	e72b      	b.n	8004efa <_dtoa_r+0x71a>
 80050a2:	9b08      	ldr	r3, [sp, #32]
 80050a4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80050a6:	9408      	str	r4, [sp, #32]
 80050a8:	1ae3      	subs	r3, r4, r3
 80050aa:	441a      	add	r2, r3
 80050ac:	9e00      	ldr	r6, [sp, #0]
 80050ae:	9b03      	ldr	r3, [sp, #12]
 80050b0:	920d      	str	r2, [sp, #52]	@ 0x34
 80050b2:	2400      	movs	r4, #0
 80050b4:	e721      	b.n	8004efa <_dtoa_r+0x71a>
 80050b6:	9c08      	ldr	r4, [sp, #32]
 80050b8:	9e00      	ldr	r6, [sp, #0]
 80050ba:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80050bc:	e728      	b.n	8004f10 <_dtoa_r+0x730>
 80050be:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80050c2:	e751      	b.n	8004f68 <_dtoa_r+0x788>
 80050c4:	9a08      	ldr	r2, [sp, #32]
 80050c6:	9902      	ldr	r1, [sp, #8]
 80050c8:	e750      	b.n	8004f6c <_dtoa_r+0x78c>
 80050ca:	f8cd 8008 	str.w	r8, [sp, #8]
 80050ce:	e751      	b.n	8004f74 <_dtoa_r+0x794>
 80050d0:	2300      	movs	r3, #0
 80050d2:	e779      	b.n	8004fc8 <_dtoa_r+0x7e8>
 80050d4:	9b04      	ldr	r3, [sp, #16]
 80050d6:	e777      	b.n	8004fc8 <_dtoa_r+0x7e8>
 80050d8:	2300      	movs	r3, #0
 80050da:	9308      	str	r3, [sp, #32]
 80050dc:	e779      	b.n	8004fd2 <_dtoa_r+0x7f2>
 80050de:	d093      	beq.n	8005008 <_dtoa_r+0x828>
 80050e0:	9a00      	ldr	r2, [sp, #0]
 80050e2:	331c      	adds	r3, #28
 80050e4:	441a      	add	r2, r3
 80050e6:	9200      	str	r2, [sp, #0]
 80050e8:	9a06      	ldr	r2, [sp, #24]
 80050ea:	441a      	add	r2, r3
 80050ec:	441e      	add	r6, r3
 80050ee:	9206      	str	r2, [sp, #24]
 80050f0:	e78a      	b.n	8005008 <_dtoa_r+0x828>
 80050f2:	4603      	mov	r3, r0
 80050f4:	e7f4      	b.n	80050e0 <_dtoa_r+0x900>
 80050f6:	9b03      	ldr	r3, [sp, #12]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	46b8      	mov	r8, r7
 80050fc:	dc20      	bgt.n	8005140 <_dtoa_r+0x960>
 80050fe:	469b      	mov	fp, r3
 8005100:	9b07      	ldr	r3, [sp, #28]
 8005102:	2b02      	cmp	r3, #2
 8005104:	dd1e      	ble.n	8005144 <_dtoa_r+0x964>
 8005106:	f1bb 0f00 	cmp.w	fp, #0
 800510a:	f47f adb1 	bne.w	8004c70 <_dtoa_r+0x490>
 800510e:	4621      	mov	r1, r4
 8005110:	465b      	mov	r3, fp
 8005112:	2205      	movs	r2, #5
 8005114:	4648      	mov	r0, r9
 8005116:	f000 fa95 	bl	8005644 <__multadd>
 800511a:	4601      	mov	r1, r0
 800511c:	4604      	mov	r4, r0
 800511e:	9802      	ldr	r0, [sp, #8]
 8005120:	f000 fca0 	bl	8005a64 <__mcmp>
 8005124:	2800      	cmp	r0, #0
 8005126:	f77f ada3 	ble.w	8004c70 <_dtoa_r+0x490>
 800512a:	4656      	mov	r6, sl
 800512c:	2331      	movs	r3, #49	@ 0x31
 800512e:	f806 3b01 	strb.w	r3, [r6], #1
 8005132:	f108 0801 	add.w	r8, r8, #1
 8005136:	e59f      	b.n	8004c78 <_dtoa_r+0x498>
 8005138:	9c03      	ldr	r4, [sp, #12]
 800513a:	46b8      	mov	r8, r7
 800513c:	4625      	mov	r5, r4
 800513e:	e7f4      	b.n	800512a <_dtoa_r+0x94a>
 8005140:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8005144:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005146:	2b00      	cmp	r3, #0
 8005148:	f000 8101 	beq.w	800534e <_dtoa_r+0xb6e>
 800514c:	2e00      	cmp	r6, #0
 800514e:	dd05      	ble.n	800515c <_dtoa_r+0x97c>
 8005150:	4629      	mov	r1, r5
 8005152:	4632      	mov	r2, r6
 8005154:	4648      	mov	r0, r9
 8005156:	f000 fc19 	bl	800598c <__lshift>
 800515a:	4605      	mov	r5, r0
 800515c:	9b08      	ldr	r3, [sp, #32]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d05c      	beq.n	800521c <_dtoa_r+0xa3c>
 8005162:	6869      	ldr	r1, [r5, #4]
 8005164:	4648      	mov	r0, r9
 8005166:	f000 fa0b 	bl	8005580 <_Balloc>
 800516a:	4606      	mov	r6, r0
 800516c:	b928      	cbnz	r0, 800517a <_dtoa_r+0x99a>
 800516e:	4b82      	ldr	r3, [pc, #520]	@ (8005378 <_dtoa_r+0xb98>)
 8005170:	4602      	mov	r2, r0
 8005172:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8005176:	f7ff bb4a 	b.w	800480e <_dtoa_r+0x2e>
 800517a:	692a      	ldr	r2, [r5, #16]
 800517c:	3202      	adds	r2, #2
 800517e:	0092      	lsls	r2, r2, #2
 8005180:	f105 010c 	add.w	r1, r5, #12
 8005184:	300c      	adds	r0, #12
 8005186:	f000 ffa3 	bl	80060d0 <memcpy>
 800518a:	2201      	movs	r2, #1
 800518c:	4631      	mov	r1, r6
 800518e:	4648      	mov	r0, r9
 8005190:	f000 fbfc 	bl	800598c <__lshift>
 8005194:	f10a 0301 	add.w	r3, sl, #1
 8005198:	9300      	str	r3, [sp, #0]
 800519a:	eb0a 030b 	add.w	r3, sl, fp
 800519e:	9308      	str	r3, [sp, #32]
 80051a0:	9b04      	ldr	r3, [sp, #16]
 80051a2:	f003 0301 	and.w	r3, r3, #1
 80051a6:	462f      	mov	r7, r5
 80051a8:	9306      	str	r3, [sp, #24]
 80051aa:	4605      	mov	r5, r0
 80051ac:	9b00      	ldr	r3, [sp, #0]
 80051ae:	9802      	ldr	r0, [sp, #8]
 80051b0:	4621      	mov	r1, r4
 80051b2:	f103 3bff 	add.w	fp, r3, #4294967295
 80051b6:	f7ff fa88 	bl	80046ca <quorem>
 80051ba:	4603      	mov	r3, r0
 80051bc:	3330      	adds	r3, #48	@ 0x30
 80051be:	9003      	str	r0, [sp, #12]
 80051c0:	4639      	mov	r1, r7
 80051c2:	9802      	ldr	r0, [sp, #8]
 80051c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80051c6:	f000 fc4d 	bl	8005a64 <__mcmp>
 80051ca:	462a      	mov	r2, r5
 80051cc:	9004      	str	r0, [sp, #16]
 80051ce:	4621      	mov	r1, r4
 80051d0:	4648      	mov	r0, r9
 80051d2:	f000 fc63 	bl	8005a9c <__mdiff>
 80051d6:	68c2      	ldr	r2, [r0, #12]
 80051d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80051da:	4606      	mov	r6, r0
 80051dc:	bb02      	cbnz	r2, 8005220 <_dtoa_r+0xa40>
 80051de:	4601      	mov	r1, r0
 80051e0:	9802      	ldr	r0, [sp, #8]
 80051e2:	f000 fc3f 	bl	8005a64 <__mcmp>
 80051e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80051e8:	4602      	mov	r2, r0
 80051ea:	4631      	mov	r1, r6
 80051ec:	4648      	mov	r0, r9
 80051ee:	920c      	str	r2, [sp, #48]	@ 0x30
 80051f0:	9309      	str	r3, [sp, #36]	@ 0x24
 80051f2:	f000 fa05 	bl	8005600 <_Bfree>
 80051f6:	9b07      	ldr	r3, [sp, #28]
 80051f8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80051fa:	9e00      	ldr	r6, [sp, #0]
 80051fc:	ea42 0103 	orr.w	r1, r2, r3
 8005200:	9b06      	ldr	r3, [sp, #24]
 8005202:	4319      	orrs	r1, r3
 8005204:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005206:	d10d      	bne.n	8005224 <_dtoa_r+0xa44>
 8005208:	2b39      	cmp	r3, #57	@ 0x39
 800520a:	d027      	beq.n	800525c <_dtoa_r+0xa7c>
 800520c:	9a04      	ldr	r2, [sp, #16]
 800520e:	2a00      	cmp	r2, #0
 8005210:	dd01      	ble.n	8005216 <_dtoa_r+0xa36>
 8005212:	9b03      	ldr	r3, [sp, #12]
 8005214:	3331      	adds	r3, #49	@ 0x31
 8005216:	f88b 3000 	strb.w	r3, [fp]
 800521a:	e52e      	b.n	8004c7a <_dtoa_r+0x49a>
 800521c:	4628      	mov	r0, r5
 800521e:	e7b9      	b.n	8005194 <_dtoa_r+0x9b4>
 8005220:	2201      	movs	r2, #1
 8005222:	e7e2      	b.n	80051ea <_dtoa_r+0xa0a>
 8005224:	9904      	ldr	r1, [sp, #16]
 8005226:	2900      	cmp	r1, #0
 8005228:	db04      	blt.n	8005234 <_dtoa_r+0xa54>
 800522a:	9807      	ldr	r0, [sp, #28]
 800522c:	4301      	orrs	r1, r0
 800522e:	9806      	ldr	r0, [sp, #24]
 8005230:	4301      	orrs	r1, r0
 8005232:	d120      	bne.n	8005276 <_dtoa_r+0xa96>
 8005234:	2a00      	cmp	r2, #0
 8005236:	ddee      	ble.n	8005216 <_dtoa_r+0xa36>
 8005238:	9902      	ldr	r1, [sp, #8]
 800523a:	9300      	str	r3, [sp, #0]
 800523c:	2201      	movs	r2, #1
 800523e:	4648      	mov	r0, r9
 8005240:	f000 fba4 	bl	800598c <__lshift>
 8005244:	4621      	mov	r1, r4
 8005246:	9002      	str	r0, [sp, #8]
 8005248:	f000 fc0c 	bl	8005a64 <__mcmp>
 800524c:	2800      	cmp	r0, #0
 800524e:	9b00      	ldr	r3, [sp, #0]
 8005250:	dc02      	bgt.n	8005258 <_dtoa_r+0xa78>
 8005252:	d1e0      	bne.n	8005216 <_dtoa_r+0xa36>
 8005254:	07da      	lsls	r2, r3, #31
 8005256:	d5de      	bpl.n	8005216 <_dtoa_r+0xa36>
 8005258:	2b39      	cmp	r3, #57	@ 0x39
 800525a:	d1da      	bne.n	8005212 <_dtoa_r+0xa32>
 800525c:	2339      	movs	r3, #57	@ 0x39
 800525e:	f88b 3000 	strb.w	r3, [fp]
 8005262:	4633      	mov	r3, r6
 8005264:	461e      	mov	r6, r3
 8005266:	3b01      	subs	r3, #1
 8005268:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800526c:	2a39      	cmp	r2, #57	@ 0x39
 800526e:	d04e      	beq.n	800530e <_dtoa_r+0xb2e>
 8005270:	3201      	adds	r2, #1
 8005272:	701a      	strb	r2, [r3, #0]
 8005274:	e501      	b.n	8004c7a <_dtoa_r+0x49a>
 8005276:	2a00      	cmp	r2, #0
 8005278:	dd03      	ble.n	8005282 <_dtoa_r+0xaa2>
 800527a:	2b39      	cmp	r3, #57	@ 0x39
 800527c:	d0ee      	beq.n	800525c <_dtoa_r+0xa7c>
 800527e:	3301      	adds	r3, #1
 8005280:	e7c9      	b.n	8005216 <_dtoa_r+0xa36>
 8005282:	9a00      	ldr	r2, [sp, #0]
 8005284:	9908      	ldr	r1, [sp, #32]
 8005286:	f802 3c01 	strb.w	r3, [r2, #-1]
 800528a:	428a      	cmp	r2, r1
 800528c:	d028      	beq.n	80052e0 <_dtoa_r+0xb00>
 800528e:	9902      	ldr	r1, [sp, #8]
 8005290:	2300      	movs	r3, #0
 8005292:	220a      	movs	r2, #10
 8005294:	4648      	mov	r0, r9
 8005296:	f000 f9d5 	bl	8005644 <__multadd>
 800529a:	42af      	cmp	r7, r5
 800529c:	9002      	str	r0, [sp, #8]
 800529e:	f04f 0300 	mov.w	r3, #0
 80052a2:	f04f 020a 	mov.w	r2, #10
 80052a6:	4639      	mov	r1, r7
 80052a8:	4648      	mov	r0, r9
 80052aa:	d107      	bne.n	80052bc <_dtoa_r+0xadc>
 80052ac:	f000 f9ca 	bl	8005644 <__multadd>
 80052b0:	4607      	mov	r7, r0
 80052b2:	4605      	mov	r5, r0
 80052b4:	9b00      	ldr	r3, [sp, #0]
 80052b6:	3301      	adds	r3, #1
 80052b8:	9300      	str	r3, [sp, #0]
 80052ba:	e777      	b.n	80051ac <_dtoa_r+0x9cc>
 80052bc:	f000 f9c2 	bl	8005644 <__multadd>
 80052c0:	4629      	mov	r1, r5
 80052c2:	4607      	mov	r7, r0
 80052c4:	2300      	movs	r3, #0
 80052c6:	220a      	movs	r2, #10
 80052c8:	4648      	mov	r0, r9
 80052ca:	f000 f9bb 	bl	8005644 <__multadd>
 80052ce:	4605      	mov	r5, r0
 80052d0:	e7f0      	b.n	80052b4 <_dtoa_r+0xad4>
 80052d2:	f1bb 0f00 	cmp.w	fp, #0
 80052d6:	bfcc      	ite	gt
 80052d8:	465e      	movgt	r6, fp
 80052da:	2601      	movle	r6, #1
 80052dc:	4456      	add	r6, sl
 80052de:	2700      	movs	r7, #0
 80052e0:	9902      	ldr	r1, [sp, #8]
 80052e2:	9300      	str	r3, [sp, #0]
 80052e4:	2201      	movs	r2, #1
 80052e6:	4648      	mov	r0, r9
 80052e8:	f000 fb50 	bl	800598c <__lshift>
 80052ec:	4621      	mov	r1, r4
 80052ee:	9002      	str	r0, [sp, #8]
 80052f0:	f000 fbb8 	bl	8005a64 <__mcmp>
 80052f4:	2800      	cmp	r0, #0
 80052f6:	dcb4      	bgt.n	8005262 <_dtoa_r+0xa82>
 80052f8:	d102      	bne.n	8005300 <_dtoa_r+0xb20>
 80052fa:	9b00      	ldr	r3, [sp, #0]
 80052fc:	07db      	lsls	r3, r3, #31
 80052fe:	d4b0      	bmi.n	8005262 <_dtoa_r+0xa82>
 8005300:	4633      	mov	r3, r6
 8005302:	461e      	mov	r6, r3
 8005304:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005308:	2a30      	cmp	r2, #48	@ 0x30
 800530a:	d0fa      	beq.n	8005302 <_dtoa_r+0xb22>
 800530c:	e4b5      	b.n	8004c7a <_dtoa_r+0x49a>
 800530e:	459a      	cmp	sl, r3
 8005310:	d1a8      	bne.n	8005264 <_dtoa_r+0xa84>
 8005312:	2331      	movs	r3, #49	@ 0x31
 8005314:	f108 0801 	add.w	r8, r8, #1
 8005318:	f88a 3000 	strb.w	r3, [sl]
 800531c:	e4ad      	b.n	8004c7a <_dtoa_r+0x49a>
 800531e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005320:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800537c <_dtoa_r+0xb9c>
 8005324:	b11b      	cbz	r3, 800532e <_dtoa_r+0xb4e>
 8005326:	f10a 0308 	add.w	r3, sl, #8
 800532a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800532c:	6013      	str	r3, [r2, #0]
 800532e:	4650      	mov	r0, sl
 8005330:	b017      	add	sp, #92	@ 0x5c
 8005332:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005336:	9b07      	ldr	r3, [sp, #28]
 8005338:	2b01      	cmp	r3, #1
 800533a:	f77f ae2e 	ble.w	8004f9a <_dtoa_r+0x7ba>
 800533e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005340:	9308      	str	r3, [sp, #32]
 8005342:	2001      	movs	r0, #1
 8005344:	e64d      	b.n	8004fe2 <_dtoa_r+0x802>
 8005346:	f1bb 0f00 	cmp.w	fp, #0
 800534a:	f77f aed9 	ble.w	8005100 <_dtoa_r+0x920>
 800534e:	4656      	mov	r6, sl
 8005350:	9802      	ldr	r0, [sp, #8]
 8005352:	4621      	mov	r1, r4
 8005354:	f7ff f9b9 	bl	80046ca <quorem>
 8005358:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800535c:	f806 3b01 	strb.w	r3, [r6], #1
 8005360:	eba6 020a 	sub.w	r2, r6, sl
 8005364:	4593      	cmp	fp, r2
 8005366:	ddb4      	ble.n	80052d2 <_dtoa_r+0xaf2>
 8005368:	9902      	ldr	r1, [sp, #8]
 800536a:	2300      	movs	r3, #0
 800536c:	220a      	movs	r2, #10
 800536e:	4648      	mov	r0, r9
 8005370:	f000 f968 	bl	8005644 <__multadd>
 8005374:	9002      	str	r0, [sp, #8]
 8005376:	e7eb      	b.n	8005350 <_dtoa_r+0xb70>
 8005378:	080072e5 	.word	0x080072e5
 800537c:	08007269 	.word	0x08007269

08005380 <_free_r>:
 8005380:	b538      	push	{r3, r4, r5, lr}
 8005382:	4605      	mov	r5, r0
 8005384:	2900      	cmp	r1, #0
 8005386:	d041      	beq.n	800540c <_free_r+0x8c>
 8005388:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800538c:	1f0c      	subs	r4, r1, #4
 800538e:	2b00      	cmp	r3, #0
 8005390:	bfb8      	it	lt
 8005392:	18e4      	addlt	r4, r4, r3
 8005394:	f000 f8e8 	bl	8005568 <__malloc_lock>
 8005398:	4a1d      	ldr	r2, [pc, #116]	@ (8005410 <_free_r+0x90>)
 800539a:	6813      	ldr	r3, [r2, #0]
 800539c:	b933      	cbnz	r3, 80053ac <_free_r+0x2c>
 800539e:	6063      	str	r3, [r4, #4]
 80053a0:	6014      	str	r4, [r2, #0]
 80053a2:	4628      	mov	r0, r5
 80053a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80053a8:	f000 b8e4 	b.w	8005574 <__malloc_unlock>
 80053ac:	42a3      	cmp	r3, r4
 80053ae:	d908      	bls.n	80053c2 <_free_r+0x42>
 80053b0:	6820      	ldr	r0, [r4, #0]
 80053b2:	1821      	adds	r1, r4, r0
 80053b4:	428b      	cmp	r3, r1
 80053b6:	bf01      	itttt	eq
 80053b8:	6819      	ldreq	r1, [r3, #0]
 80053ba:	685b      	ldreq	r3, [r3, #4]
 80053bc:	1809      	addeq	r1, r1, r0
 80053be:	6021      	streq	r1, [r4, #0]
 80053c0:	e7ed      	b.n	800539e <_free_r+0x1e>
 80053c2:	461a      	mov	r2, r3
 80053c4:	685b      	ldr	r3, [r3, #4]
 80053c6:	b10b      	cbz	r3, 80053cc <_free_r+0x4c>
 80053c8:	42a3      	cmp	r3, r4
 80053ca:	d9fa      	bls.n	80053c2 <_free_r+0x42>
 80053cc:	6811      	ldr	r1, [r2, #0]
 80053ce:	1850      	adds	r0, r2, r1
 80053d0:	42a0      	cmp	r0, r4
 80053d2:	d10b      	bne.n	80053ec <_free_r+0x6c>
 80053d4:	6820      	ldr	r0, [r4, #0]
 80053d6:	4401      	add	r1, r0
 80053d8:	1850      	adds	r0, r2, r1
 80053da:	4283      	cmp	r3, r0
 80053dc:	6011      	str	r1, [r2, #0]
 80053de:	d1e0      	bne.n	80053a2 <_free_r+0x22>
 80053e0:	6818      	ldr	r0, [r3, #0]
 80053e2:	685b      	ldr	r3, [r3, #4]
 80053e4:	6053      	str	r3, [r2, #4]
 80053e6:	4408      	add	r0, r1
 80053e8:	6010      	str	r0, [r2, #0]
 80053ea:	e7da      	b.n	80053a2 <_free_r+0x22>
 80053ec:	d902      	bls.n	80053f4 <_free_r+0x74>
 80053ee:	230c      	movs	r3, #12
 80053f0:	602b      	str	r3, [r5, #0]
 80053f2:	e7d6      	b.n	80053a2 <_free_r+0x22>
 80053f4:	6820      	ldr	r0, [r4, #0]
 80053f6:	1821      	adds	r1, r4, r0
 80053f8:	428b      	cmp	r3, r1
 80053fa:	bf04      	itt	eq
 80053fc:	6819      	ldreq	r1, [r3, #0]
 80053fe:	685b      	ldreq	r3, [r3, #4]
 8005400:	6063      	str	r3, [r4, #4]
 8005402:	bf04      	itt	eq
 8005404:	1809      	addeq	r1, r1, r0
 8005406:	6021      	streq	r1, [r4, #0]
 8005408:	6054      	str	r4, [r2, #4]
 800540a:	e7ca      	b.n	80053a2 <_free_r+0x22>
 800540c:	bd38      	pop	{r3, r4, r5, pc}
 800540e:	bf00      	nop
 8005410:	20001bb4 	.word	0x20001bb4

08005414 <malloc>:
 8005414:	4b02      	ldr	r3, [pc, #8]	@ (8005420 <malloc+0xc>)
 8005416:	4601      	mov	r1, r0
 8005418:	6818      	ldr	r0, [r3, #0]
 800541a:	f000 b825 	b.w	8005468 <_malloc_r>
 800541e:	bf00      	nop
 8005420:	20000018 	.word	0x20000018

08005424 <sbrk_aligned>:
 8005424:	b570      	push	{r4, r5, r6, lr}
 8005426:	4e0f      	ldr	r6, [pc, #60]	@ (8005464 <sbrk_aligned+0x40>)
 8005428:	460c      	mov	r4, r1
 800542a:	6831      	ldr	r1, [r6, #0]
 800542c:	4605      	mov	r5, r0
 800542e:	b911      	cbnz	r1, 8005436 <sbrk_aligned+0x12>
 8005430:	f000 fe3e 	bl	80060b0 <_sbrk_r>
 8005434:	6030      	str	r0, [r6, #0]
 8005436:	4621      	mov	r1, r4
 8005438:	4628      	mov	r0, r5
 800543a:	f000 fe39 	bl	80060b0 <_sbrk_r>
 800543e:	1c43      	adds	r3, r0, #1
 8005440:	d103      	bne.n	800544a <sbrk_aligned+0x26>
 8005442:	f04f 34ff 	mov.w	r4, #4294967295
 8005446:	4620      	mov	r0, r4
 8005448:	bd70      	pop	{r4, r5, r6, pc}
 800544a:	1cc4      	adds	r4, r0, #3
 800544c:	f024 0403 	bic.w	r4, r4, #3
 8005450:	42a0      	cmp	r0, r4
 8005452:	d0f8      	beq.n	8005446 <sbrk_aligned+0x22>
 8005454:	1a21      	subs	r1, r4, r0
 8005456:	4628      	mov	r0, r5
 8005458:	f000 fe2a 	bl	80060b0 <_sbrk_r>
 800545c:	3001      	adds	r0, #1
 800545e:	d1f2      	bne.n	8005446 <sbrk_aligned+0x22>
 8005460:	e7ef      	b.n	8005442 <sbrk_aligned+0x1e>
 8005462:	bf00      	nop
 8005464:	20001bb0 	.word	0x20001bb0

08005468 <_malloc_r>:
 8005468:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800546c:	1ccd      	adds	r5, r1, #3
 800546e:	f025 0503 	bic.w	r5, r5, #3
 8005472:	3508      	adds	r5, #8
 8005474:	2d0c      	cmp	r5, #12
 8005476:	bf38      	it	cc
 8005478:	250c      	movcc	r5, #12
 800547a:	2d00      	cmp	r5, #0
 800547c:	4606      	mov	r6, r0
 800547e:	db01      	blt.n	8005484 <_malloc_r+0x1c>
 8005480:	42a9      	cmp	r1, r5
 8005482:	d904      	bls.n	800548e <_malloc_r+0x26>
 8005484:	230c      	movs	r3, #12
 8005486:	6033      	str	r3, [r6, #0]
 8005488:	2000      	movs	r0, #0
 800548a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800548e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005564 <_malloc_r+0xfc>
 8005492:	f000 f869 	bl	8005568 <__malloc_lock>
 8005496:	f8d8 3000 	ldr.w	r3, [r8]
 800549a:	461c      	mov	r4, r3
 800549c:	bb44      	cbnz	r4, 80054f0 <_malloc_r+0x88>
 800549e:	4629      	mov	r1, r5
 80054a0:	4630      	mov	r0, r6
 80054a2:	f7ff ffbf 	bl	8005424 <sbrk_aligned>
 80054a6:	1c43      	adds	r3, r0, #1
 80054a8:	4604      	mov	r4, r0
 80054aa:	d158      	bne.n	800555e <_malloc_r+0xf6>
 80054ac:	f8d8 4000 	ldr.w	r4, [r8]
 80054b0:	4627      	mov	r7, r4
 80054b2:	2f00      	cmp	r7, #0
 80054b4:	d143      	bne.n	800553e <_malloc_r+0xd6>
 80054b6:	2c00      	cmp	r4, #0
 80054b8:	d04b      	beq.n	8005552 <_malloc_r+0xea>
 80054ba:	6823      	ldr	r3, [r4, #0]
 80054bc:	4639      	mov	r1, r7
 80054be:	4630      	mov	r0, r6
 80054c0:	eb04 0903 	add.w	r9, r4, r3
 80054c4:	f000 fdf4 	bl	80060b0 <_sbrk_r>
 80054c8:	4581      	cmp	r9, r0
 80054ca:	d142      	bne.n	8005552 <_malloc_r+0xea>
 80054cc:	6821      	ldr	r1, [r4, #0]
 80054ce:	1a6d      	subs	r5, r5, r1
 80054d0:	4629      	mov	r1, r5
 80054d2:	4630      	mov	r0, r6
 80054d4:	f7ff ffa6 	bl	8005424 <sbrk_aligned>
 80054d8:	3001      	adds	r0, #1
 80054da:	d03a      	beq.n	8005552 <_malloc_r+0xea>
 80054dc:	6823      	ldr	r3, [r4, #0]
 80054de:	442b      	add	r3, r5
 80054e0:	6023      	str	r3, [r4, #0]
 80054e2:	f8d8 3000 	ldr.w	r3, [r8]
 80054e6:	685a      	ldr	r2, [r3, #4]
 80054e8:	bb62      	cbnz	r2, 8005544 <_malloc_r+0xdc>
 80054ea:	f8c8 7000 	str.w	r7, [r8]
 80054ee:	e00f      	b.n	8005510 <_malloc_r+0xa8>
 80054f0:	6822      	ldr	r2, [r4, #0]
 80054f2:	1b52      	subs	r2, r2, r5
 80054f4:	d420      	bmi.n	8005538 <_malloc_r+0xd0>
 80054f6:	2a0b      	cmp	r2, #11
 80054f8:	d917      	bls.n	800552a <_malloc_r+0xc2>
 80054fa:	1961      	adds	r1, r4, r5
 80054fc:	42a3      	cmp	r3, r4
 80054fe:	6025      	str	r5, [r4, #0]
 8005500:	bf18      	it	ne
 8005502:	6059      	strne	r1, [r3, #4]
 8005504:	6863      	ldr	r3, [r4, #4]
 8005506:	bf08      	it	eq
 8005508:	f8c8 1000 	streq.w	r1, [r8]
 800550c:	5162      	str	r2, [r4, r5]
 800550e:	604b      	str	r3, [r1, #4]
 8005510:	4630      	mov	r0, r6
 8005512:	f000 f82f 	bl	8005574 <__malloc_unlock>
 8005516:	f104 000b 	add.w	r0, r4, #11
 800551a:	1d23      	adds	r3, r4, #4
 800551c:	f020 0007 	bic.w	r0, r0, #7
 8005520:	1ac2      	subs	r2, r0, r3
 8005522:	bf1c      	itt	ne
 8005524:	1a1b      	subne	r3, r3, r0
 8005526:	50a3      	strne	r3, [r4, r2]
 8005528:	e7af      	b.n	800548a <_malloc_r+0x22>
 800552a:	6862      	ldr	r2, [r4, #4]
 800552c:	42a3      	cmp	r3, r4
 800552e:	bf0c      	ite	eq
 8005530:	f8c8 2000 	streq.w	r2, [r8]
 8005534:	605a      	strne	r2, [r3, #4]
 8005536:	e7eb      	b.n	8005510 <_malloc_r+0xa8>
 8005538:	4623      	mov	r3, r4
 800553a:	6864      	ldr	r4, [r4, #4]
 800553c:	e7ae      	b.n	800549c <_malloc_r+0x34>
 800553e:	463c      	mov	r4, r7
 8005540:	687f      	ldr	r7, [r7, #4]
 8005542:	e7b6      	b.n	80054b2 <_malloc_r+0x4a>
 8005544:	461a      	mov	r2, r3
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	42a3      	cmp	r3, r4
 800554a:	d1fb      	bne.n	8005544 <_malloc_r+0xdc>
 800554c:	2300      	movs	r3, #0
 800554e:	6053      	str	r3, [r2, #4]
 8005550:	e7de      	b.n	8005510 <_malloc_r+0xa8>
 8005552:	230c      	movs	r3, #12
 8005554:	6033      	str	r3, [r6, #0]
 8005556:	4630      	mov	r0, r6
 8005558:	f000 f80c 	bl	8005574 <__malloc_unlock>
 800555c:	e794      	b.n	8005488 <_malloc_r+0x20>
 800555e:	6005      	str	r5, [r0, #0]
 8005560:	e7d6      	b.n	8005510 <_malloc_r+0xa8>
 8005562:	bf00      	nop
 8005564:	20001bb4 	.word	0x20001bb4

08005568 <__malloc_lock>:
 8005568:	4801      	ldr	r0, [pc, #4]	@ (8005570 <__malloc_lock+0x8>)
 800556a:	f7ff b8ac 	b.w	80046c6 <__retarget_lock_acquire_recursive>
 800556e:	bf00      	nop
 8005570:	20001bac 	.word	0x20001bac

08005574 <__malloc_unlock>:
 8005574:	4801      	ldr	r0, [pc, #4]	@ (800557c <__malloc_unlock+0x8>)
 8005576:	f7ff b8a7 	b.w	80046c8 <__retarget_lock_release_recursive>
 800557a:	bf00      	nop
 800557c:	20001bac 	.word	0x20001bac

08005580 <_Balloc>:
 8005580:	b570      	push	{r4, r5, r6, lr}
 8005582:	69c6      	ldr	r6, [r0, #28]
 8005584:	4604      	mov	r4, r0
 8005586:	460d      	mov	r5, r1
 8005588:	b976      	cbnz	r6, 80055a8 <_Balloc+0x28>
 800558a:	2010      	movs	r0, #16
 800558c:	f7ff ff42 	bl	8005414 <malloc>
 8005590:	4602      	mov	r2, r0
 8005592:	61e0      	str	r0, [r4, #28]
 8005594:	b920      	cbnz	r0, 80055a0 <_Balloc+0x20>
 8005596:	4b18      	ldr	r3, [pc, #96]	@ (80055f8 <_Balloc+0x78>)
 8005598:	4818      	ldr	r0, [pc, #96]	@ (80055fc <_Balloc+0x7c>)
 800559a:	216b      	movs	r1, #107	@ 0x6b
 800559c:	f000 fda6 	bl	80060ec <__assert_func>
 80055a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80055a4:	6006      	str	r6, [r0, #0]
 80055a6:	60c6      	str	r6, [r0, #12]
 80055a8:	69e6      	ldr	r6, [r4, #28]
 80055aa:	68f3      	ldr	r3, [r6, #12]
 80055ac:	b183      	cbz	r3, 80055d0 <_Balloc+0x50>
 80055ae:	69e3      	ldr	r3, [r4, #28]
 80055b0:	68db      	ldr	r3, [r3, #12]
 80055b2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80055b6:	b9b8      	cbnz	r0, 80055e8 <_Balloc+0x68>
 80055b8:	2101      	movs	r1, #1
 80055ba:	fa01 f605 	lsl.w	r6, r1, r5
 80055be:	1d72      	adds	r2, r6, #5
 80055c0:	0092      	lsls	r2, r2, #2
 80055c2:	4620      	mov	r0, r4
 80055c4:	f000 fdb0 	bl	8006128 <_calloc_r>
 80055c8:	b160      	cbz	r0, 80055e4 <_Balloc+0x64>
 80055ca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80055ce:	e00e      	b.n	80055ee <_Balloc+0x6e>
 80055d0:	2221      	movs	r2, #33	@ 0x21
 80055d2:	2104      	movs	r1, #4
 80055d4:	4620      	mov	r0, r4
 80055d6:	f000 fda7 	bl	8006128 <_calloc_r>
 80055da:	69e3      	ldr	r3, [r4, #28]
 80055dc:	60f0      	str	r0, [r6, #12]
 80055de:	68db      	ldr	r3, [r3, #12]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d1e4      	bne.n	80055ae <_Balloc+0x2e>
 80055e4:	2000      	movs	r0, #0
 80055e6:	bd70      	pop	{r4, r5, r6, pc}
 80055e8:	6802      	ldr	r2, [r0, #0]
 80055ea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80055ee:	2300      	movs	r3, #0
 80055f0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80055f4:	e7f7      	b.n	80055e6 <_Balloc+0x66>
 80055f6:	bf00      	nop
 80055f8:	08007276 	.word	0x08007276
 80055fc:	080072f6 	.word	0x080072f6

08005600 <_Bfree>:
 8005600:	b570      	push	{r4, r5, r6, lr}
 8005602:	69c6      	ldr	r6, [r0, #28]
 8005604:	4605      	mov	r5, r0
 8005606:	460c      	mov	r4, r1
 8005608:	b976      	cbnz	r6, 8005628 <_Bfree+0x28>
 800560a:	2010      	movs	r0, #16
 800560c:	f7ff ff02 	bl	8005414 <malloc>
 8005610:	4602      	mov	r2, r0
 8005612:	61e8      	str	r0, [r5, #28]
 8005614:	b920      	cbnz	r0, 8005620 <_Bfree+0x20>
 8005616:	4b09      	ldr	r3, [pc, #36]	@ (800563c <_Bfree+0x3c>)
 8005618:	4809      	ldr	r0, [pc, #36]	@ (8005640 <_Bfree+0x40>)
 800561a:	218f      	movs	r1, #143	@ 0x8f
 800561c:	f000 fd66 	bl	80060ec <__assert_func>
 8005620:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005624:	6006      	str	r6, [r0, #0]
 8005626:	60c6      	str	r6, [r0, #12]
 8005628:	b13c      	cbz	r4, 800563a <_Bfree+0x3a>
 800562a:	69eb      	ldr	r3, [r5, #28]
 800562c:	6862      	ldr	r2, [r4, #4]
 800562e:	68db      	ldr	r3, [r3, #12]
 8005630:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005634:	6021      	str	r1, [r4, #0]
 8005636:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800563a:	bd70      	pop	{r4, r5, r6, pc}
 800563c:	08007276 	.word	0x08007276
 8005640:	080072f6 	.word	0x080072f6

08005644 <__multadd>:
 8005644:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005648:	690d      	ldr	r5, [r1, #16]
 800564a:	4607      	mov	r7, r0
 800564c:	460c      	mov	r4, r1
 800564e:	461e      	mov	r6, r3
 8005650:	f101 0c14 	add.w	ip, r1, #20
 8005654:	2000      	movs	r0, #0
 8005656:	f8dc 3000 	ldr.w	r3, [ip]
 800565a:	b299      	uxth	r1, r3
 800565c:	fb02 6101 	mla	r1, r2, r1, r6
 8005660:	0c1e      	lsrs	r6, r3, #16
 8005662:	0c0b      	lsrs	r3, r1, #16
 8005664:	fb02 3306 	mla	r3, r2, r6, r3
 8005668:	b289      	uxth	r1, r1
 800566a:	3001      	adds	r0, #1
 800566c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005670:	4285      	cmp	r5, r0
 8005672:	f84c 1b04 	str.w	r1, [ip], #4
 8005676:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800567a:	dcec      	bgt.n	8005656 <__multadd+0x12>
 800567c:	b30e      	cbz	r6, 80056c2 <__multadd+0x7e>
 800567e:	68a3      	ldr	r3, [r4, #8]
 8005680:	42ab      	cmp	r3, r5
 8005682:	dc19      	bgt.n	80056b8 <__multadd+0x74>
 8005684:	6861      	ldr	r1, [r4, #4]
 8005686:	4638      	mov	r0, r7
 8005688:	3101      	adds	r1, #1
 800568a:	f7ff ff79 	bl	8005580 <_Balloc>
 800568e:	4680      	mov	r8, r0
 8005690:	b928      	cbnz	r0, 800569e <__multadd+0x5a>
 8005692:	4602      	mov	r2, r0
 8005694:	4b0c      	ldr	r3, [pc, #48]	@ (80056c8 <__multadd+0x84>)
 8005696:	480d      	ldr	r0, [pc, #52]	@ (80056cc <__multadd+0x88>)
 8005698:	21ba      	movs	r1, #186	@ 0xba
 800569a:	f000 fd27 	bl	80060ec <__assert_func>
 800569e:	6922      	ldr	r2, [r4, #16]
 80056a0:	3202      	adds	r2, #2
 80056a2:	f104 010c 	add.w	r1, r4, #12
 80056a6:	0092      	lsls	r2, r2, #2
 80056a8:	300c      	adds	r0, #12
 80056aa:	f000 fd11 	bl	80060d0 <memcpy>
 80056ae:	4621      	mov	r1, r4
 80056b0:	4638      	mov	r0, r7
 80056b2:	f7ff ffa5 	bl	8005600 <_Bfree>
 80056b6:	4644      	mov	r4, r8
 80056b8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80056bc:	3501      	adds	r5, #1
 80056be:	615e      	str	r6, [r3, #20]
 80056c0:	6125      	str	r5, [r4, #16]
 80056c2:	4620      	mov	r0, r4
 80056c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80056c8:	080072e5 	.word	0x080072e5
 80056cc:	080072f6 	.word	0x080072f6

080056d0 <__hi0bits>:
 80056d0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80056d4:	4603      	mov	r3, r0
 80056d6:	bf36      	itet	cc
 80056d8:	0403      	lslcc	r3, r0, #16
 80056da:	2000      	movcs	r0, #0
 80056dc:	2010      	movcc	r0, #16
 80056de:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80056e2:	bf3c      	itt	cc
 80056e4:	021b      	lslcc	r3, r3, #8
 80056e6:	3008      	addcc	r0, #8
 80056e8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80056ec:	bf3c      	itt	cc
 80056ee:	011b      	lslcc	r3, r3, #4
 80056f0:	3004      	addcc	r0, #4
 80056f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056f6:	bf3c      	itt	cc
 80056f8:	009b      	lslcc	r3, r3, #2
 80056fa:	3002      	addcc	r0, #2
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	db05      	blt.n	800570c <__hi0bits+0x3c>
 8005700:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8005704:	f100 0001 	add.w	r0, r0, #1
 8005708:	bf08      	it	eq
 800570a:	2020      	moveq	r0, #32
 800570c:	4770      	bx	lr

0800570e <__lo0bits>:
 800570e:	6803      	ldr	r3, [r0, #0]
 8005710:	4602      	mov	r2, r0
 8005712:	f013 0007 	ands.w	r0, r3, #7
 8005716:	d00b      	beq.n	8005730 <__lo0bits+0x22>
 8005718:	07d9      	lsls	r1, r3, #31
 800571a:	d421      	bmi.n	8005760 <__lo0bits+0x52>
 800571c:	0798      	lsls	r0, r3, #30
 800571e:	bf49      	itett	mi
 8005720:	085b      	lsrmi	r3, r3, #1
 8005722:	089b      	lsrpl	r3, r3, #2
 8005724:	2001      	movmi	r0, #1
 8005726:	6013      	strmi	r3, [r2, #0]
 8005728:	bf5c      	itt	pl
 800572a:	6013      	strpl	r3, [r2, #0]
 800572c:	2002      	movpl	r0, #2
 800572e:	4770      	bx	lr
 8005730:	b299      	uxth	r1, r3
 8005732:	b909      	cbnz	r1, 8005738 <__lo0bits+0x2a>
 8005734:	0c1b      	lsrs	r3, r3, #16
 8005736:	2010      	movs	r0, #16
 8005738:	b2d9      	uxtb	r1, r3
 800573a:	b909      	cbnz	r1, 8005740 <__lo0bits+0x32>
 800573c:	3008      	adds	r0, #8
 800573e:	0a1b      	lsrs	r3, r3, #8
 8005740:	0719      	lsls	r1, r3, #28
 8005742:	bf04      	itt	eq
 8005744:	091b      	lsreq	r3, r3, #4
 8005746:	3004      	addeq	r0, #4
 8005748:	0799      	lsls	r1, r3, #30
 800574a:	bf04      	itt	eq
 800574c:	089b      	lsreq	r3, r3, #2
 800574e:	3002      	addeq	r0, #2
 8005750:	07d9      	lsls	r1, r3, #31
 8005752:	d403      	bmi.n	800575c <__lo0bits+0x4e>
 8005754:	085b      	lsrs	r3, r3, #1
 8005756:	f100 0001 	add.w	r0, r0, #1
 800575a:	d003      	beq.n	8005764 <__lo0bits+0x56>
 800575c:	6013      	str	r3, [r2, #0]
 800575e:	4770      	bx	lr
 8005760:	2000      	movs	r0, #0
 8005762:	4770      	bx	lr
 8005764:	2020      	movs	r0, #32
 8005766:	4770      	bx	lr

08005768 <__i2b>:
 8005768:	b510      	push	{r4, lr}
 800576a:	460c      	mov	r4, r1
 800576c:	2101      	movs	r1, #1
 800576e:	f7ff ff07 	bl	8005580 <_Balloc>
 8005772:	4602      	mov	r2, r0
 8005774:	b928      	cbnz	r0, 8005782 <__i2b+0x1a>
 8005776:	4b05      	ldr	r3, [pc, #20]	@ (800578c <__i2b+0x24>)
 8005778:	4805      	ldr	r0, [pc, #20]	@ (8005790 <__i2b+0x28>)
 800577a:	f240 1145 	movw	r1, #325	@ 0x145
 800577e:	f000 fcb5 	bl	80060ec <__assert_func>
 8005782:	2301      	movs	r3, #1
 8005784:	6144      	str	r4, [r0, #20]
 8005786:	6103      	str	r3, [r0, #16]
 8005788:	bd10      	pop	{r4, pc}
 800578a:	bf00      	nop
 800578c:	080072e5 	.word	0x080072e5
 8005790:	080072f6 	.word	0x080072f6

08005794 <__multiply>:
 8005794:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005798:	4617      	mov	r7, r2
 800579a:	690a      	ldr	r2, [r1, #16]
 800579c:	693b      	ldr	r3, [r7, #16]
 800579e:	429a      	cmp	r2, r3
 80057a0:	bfa8      	it	ge
 80057a2:	463b      	movge	r3, r7
 80057a4:	4689      	mov	r9, r1
 80057a6:	bfa4      	itt	ge
 80057a8:	460f      	movge	r7, r1
 80057aa:	4699      	movge	r9, r3
 80057ac:	693d      	ldr	r5, [r7, #16]
 80057ae:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80057b2:	68bb      	ldr	r3, [r7, #8]
 80057b4:	6879      	ldr	r1, [r7, #4]
 80057b6:	eb05 060a 	add.w	r6, r5, sl
 80057ba:	42b3      	cmp	r3, r6
 80057bc:	b085      	sub	sp, #20
 80057be:	bfb8      	it	lt
 80057c0:	3101      	addlt	r1, #1
 80057c2:	f7ff fedd 	bl	8005580 <_Balloc>
 80057c6:	b930      	cbnz	r0, 80057d6 <__multiply+0x42>
 80057c8:	4602      	mov	r2, r0
 80057ca:	4b41      	ldr	r3, [pc, #260]	@ (80058d0 <__multiply+0x13c>)
 80057cc:	4841      	ldr	r0, [pc, #260]	@ (80058d4 <__multiply+0x140>)
 80057ce:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80057d2:	f000 fc8b 	bl	80060ec <__assert_func>
 80057d6:	f100 0414 	add.w	r4, r0, #20
 80057da:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80057de:	4623      	mov	r3, r4
 80057e0:	2200      	movs	r2, #0
 80057e2:	4573      	cmp	r3, lr
 80057e4:	d320      	bcc.n	8005828 <__multiply+0x94>
 80057e6:	f107 0814 	add.w	r8, r7, #20
 80057ea:	f109 0114 	add.w	r1, r9, #20
 80057ee:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80057f2:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80057f6:	9302      	str	r3, [sp, #8]
 80057f8:	1beb      	subs	r3, r5, r7
 80057fa:	3b15      	subs	r3, #21
 80057fc:	f023 0303 	bic.w	r3, r3, #3
 8005800:	3304      	adds	r3, #4
 8005802:	3715      	adds	r7, #21
 8005804:	42bd      	cmp	r5, r7
 8005806:	bf38      	it	cc
 8005808:	2304      	movcc	r3, #4
 800580a:	9301      	str	r3, [sp, #4]
 800580c:	9b02      	ldr	r3, [sp, #8]
 800580e:	9103      	str	r1, [sp, #12]
 8005810:	428b      	cmp	r3, r1
 8005812:	d80c      	bhi.n	800582e <__multiply+0x9a>
 8005814:	2e00      	cmp	r6, #0
 8005816:	dd03      	ble.n	8005820 <__multiply+0x8c>
 8005818:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800581c:	2b00      	cmp	r3, #0
 800581e:	d055      	beq.n	80058cc <__multiply+0x138>
 8005820:	6106      	str	r6, [r0, #16]
 8005822:	b005      	add	sp, #20
 8005824:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005828:	f843 2b04 	str.w	r2, [r3], #4
 800582c:	e7d9      	b.n	80057e2 <__multiply+0x4e>
 800582e:	f8b1 a000 	ldrh.w	sl, [r1]
 8005832:	f1ba 0f00 	cmp.w	sl, #0
 8005836:	d01f      	beq.n	8005878 <__multiply+0xe4>
 8005838:	46c4      	mov	ip, r8
 800583a:	46a1      	mov	r9, r4
 800583c:	2700      	movs	r7, #0
 800583e:	f85c 2b04 	ldr.w	r2, [ip], #4
 8005842:	f8d9 3000 	ldr.w	r3, [r9]
 8005846:	fa1f fb82 	uxth.w	fp, r2
 800584a:	b29b      	uxth	r3, r3
 800584c:	fb0a 330b 	mla	r3, sl, fp, r3
 8005850:	443b      	add	r3, r7
 8005852:	f8d9 7000 	ldr.w	r7, [r9]
 8005856:	0c12      	lsrs	r2, r2, #16
 8005858:	0c3f      	lsrs	r7, r7, #16
 800585a:	fb0a 7202 	mla	r2, sl, r2, r7
 800585e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8005862:	b29b      	uxth	r3, r3
 8005864:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005868:	4565      	cmp	r5, ip
 800586a:	f849 3b04 	str.w	r3, [r9], #4
 800586e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8005872:	d8e4      	bhi.n	800583e <__multiply+0xaa>
 8005874:	9b01      	ldr	r3, [sp, #4]
 8005876:	50e7      	str	r7, [r4, r3]
 8005878:	9b03      	ldr	r3, [sp, #12]
 800587a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800587e:	3104      	adds	r1, #4
 8005880:	f1b9 0f00 	cmp.w	r9, #0
 8005884:	d020      	beq.n	80058c8 <__multiply+0x134>
 8005886:	6823      	ldr	r3, [r4, #0]
 8005888:	4647      	mov	r7, r8
 800588a:	46a4      	mov	ip, r4
 800588c:	f04f 0a00 	mov.w	sl, #0
 8005890:	f8b7 b000 	ldrh.w	fp, [r7]
 8005894:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8005898:	fb09 220b 	mla	r2, r9, fp, r2
 800589c:	4452      	add	r2, sl
 800589e:	b29b      	uxth	r3, r3
 80058a0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80058a4:	f84c 3b04 	str.w	r3, [ip], #4
 80058a8:	f857 3b04 	ldr.w	r3, [r7], #4
 80058ac:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80058b0:	f8bc 3000 	ldrh.w	r3, [ip]
 80058b4:	fb09 330a 	mla	r3, r9, sl, r3
 80058b8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80058bc:	42bd      	cmp	r5, r7
 80058be:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80058c2:	d8e5      	bhi.n	8005890 <__multiply+0xfc>
 80058c4:	9a01      	ldr	r2, [sp, #4]
 80058c6:	50a3      	str	r3, [r4, r2]
 80058c8:	3404      	adds	r4, #4
 80058ca:	e79f      	b.n	800580c <__multiply+0x78>
 80058cc:	3e01      	subs	r6, #1
 80058ce:	e7a1      	b.n	8005814 <__multiply+0x80>
 80058d0:	080072e5 	.word	0x080072e5
 80058d4:	080072f6 	.word	0x080072f6

080058d8 <__pow5mult>:
 80058d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80058dc:	4615      	mov	r5, r2
 80058de:	f012 0203 	ands.w	r2, r2, #3
 80058e2:	4607      	mov	r7, r0
 80058e4:	460e      	mov	r6, r1
 80058e6:	d007      	beq.n	80058f8 <__pow5mult+0x20>
 80058e8:	4c25      	ldr	r4, [pc, #148]	@ (8005980 <__pow5mult+0xa8>)
 80058ea:	3a01      	subs	r2, #1
 80058ec:	2300      	movs	r3, #0
 80058ee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80058f2:	f7ff fea7 	bl	8005644 <__multadd>
 80058f6:	4606      	mov	r6, r0
 80058f8:	10ad      	asrs	r5, r5, #2
 80058fa:	d03d      	beq.n	8005978 <__pow5mult+0xa0>
 80058fc:	69fc      	ldr	r4, [r7, #28]
 80058fe:	b97c      	cbnz	r4, 8005920 <__pow5mult+0x48>
 8005900:	2010      	movs	r0, #16
 8005902:	f7ff fd87 	bl	8005414 <malloc>
 8005906:	4602      	mov	r2, r0
 8005908:	61f8      	str	r0, [r7, #28]
 800590a:	b928      	cbnz	r0, 8005918 <__pow5mult+0x40>
 800590c:	4b1d      	ldr	r3, [pc, #116]	@ (8005984 <__pow5mult+0xac>)
 800590e:	481e      	ldr	r0, [pc, #120]	@ (8005988 <__pow5mult+0xb0>)
 8005910:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8005914:	f000 fbea 	bl	80060ec <__assert_func>
 8005918:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800591c:	6004      	str	r4, [r0, #0]
 800591e:	60c4      	str	r4, [r0, #12]
 8005920:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8005924:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005928:	b94c      	cbnz	r4, 800593e <__pow5mult+0x66>
 800592a:	f240 2171 	movw	r1, #625	@ 0x271
 800592e:	4638      	mov	r0, r7
 8005930:	f7ff ff1a 	bl	8005768 <__i2b>
 8005934:	2300      	movs	r3, #0
 8005936:	f8c8 0008 	str.w	r0, [r8, #8]
 800593a:	4604      	mov	r4, r0
 800593c:	6003      	str	r3, [r0, #0]
 800593e:	f04f 0900 	mov.w	r9, #0
 8005942:	07eb      	lsls	r3, r5, #31
 8005944:	d50a      	bpl.n	800595c <__pow5mult+0x84>
 8005946:	4631      	mov	r1, r6
 8005948:	4622      	mov	r2, r4
 800594a:	4638      	mov	r0, r7
 800594c:	f7ff ff22 	bl	8005794 <__multiply>
 8005950:	4631      	mov	r1, r6
 8005952:	4680      	mov	r8, r0
 8005954:	4638      	mov	r0, r7
 8005956:	f7ff fe53 	bl	8005600 <_Bfree>
 800595a:	4646      	mov	r6, r8
 800595c:	106d      	asrs	r5, r5, #1
 800595e:	d00b      	beq.n	8005978 <__pow5mult+0xa0>
 8005960:	6820      	ldr	r0, [r4, #0]
 8005962:	b938      	cbnz	r0, 8005974 <__pow5mult+0x9c>
 8005964:	4622      	mov	r2, r4
 8005966:	4621      	mov	r1, r4
 8005968:	4638      	mov	r0, r7
 800596a:	f7ff ff13 	bl	8005794 <__multiply>
 800596e:	6020      	str	r0, [r4, #0]
 8005970:	f8c0 9000 	str.w	r9, [r0]
 8005974:	4604      	mov	r4, r0
 8005976:	e7e4      	b.n	8005942 <__pow5mult+0x6a>
 8005978:	4630      	mov	r0, r6
 800597a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800597e:	bf00      	nop
 8005980:	08034e04 	.word	0x08034e04
 8005984:	08007276 	.word	0x08007276
 8005988:	080072f6 	.word	0x080072f6

0800598c <__lshift>:
 800598c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005990:	460c      	mov	r4, r1
 8005992:	6849      	ldr	r1, [r1, #4]
 8005994:	6923      	ldr	r3, [r4, #16]
 8005996:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800599a:	68a3      	ldr	r3, [r4, #8]
 800599c:	4607      	mov	r7, r0
 800599e:	4691      	mov	r9, r2
 80059a0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80059a4:	f108 0601 	add.w	r6, r8, #1
 80059a8:	42b3      	cmp	r3, r6
 80059aa:	db0b      	blt.n	80059c4 <__lshift+0x38>
 80059ac:	4638      	mov	r0, r7
 80059ae:	f7ff fde7 	bl	8005580 <_Balloc>
 80059b2:	4605      	mov	r5, r0
 80059b4:	b948      	cbnz	r0, 80059ca <__lshift+0x3e>
 80059b6:	4602      	mov	r2, r0
 80059b8:	4b28      	ldr	r3, [pc, #160]	@ (8005a5c <__lshift+0xd0>)
 80059ba:	4829      	ldr	r0, [pc, #164]	@ (8005a60 <__lshift+0xd4>)
 80059bc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80059c0:	f000 fb94 	bl	80060ec <__assert_func>
 80059c4:	3101      	adds	r1, #1
 80059c6:	005b      	lsls	r3, r3, #1
 80059c8:	e7ee      	b.n	80059a8 <__lshift+0x1c>
 80059ca:	2300      	movs	r3, #0
 80059cc:	f100 0114 	add.w	r1, r0, #20
 80059d0:	f100 0210 	add.w	r2, r0, #16
 80059d4:	4618      	mov	r0, r3
 80059d6:	4553      	cmp	r3, sl
 80059d8:	db33      	blt.n	8005a42 <__lshift+0xb6>
 80059da:	6920      	ldr	r0, [r4, #16]
 80059dc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80059e0:	f104 0314 	add.w	r3, r4, #20
 80059e4:	f019 091f 	ands.w	r9, r9, #31
 80059e8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80059ec:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80059f0:	d02b      	beq.n	8005a4a <__lshift+0xbe>
 80059f2:	f1c9 0e20 	rsb	lr, r9, #32
 80059f6:	468a      	mov	sl, r1
 80059f8:	2200      	movs	r2, #0
 80059fa:	6818      	ldr	r0, [r3, #0]
 80059fc:	fa00 f009 	lsl.w	r0, r0, r9
 8005a00:	4310      	orrs	r0, r2
 8005a02:	f84a 0b04 	str.w	r0, [sl], #4
 8005a06:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a0a:	459c      	cmp	ip, r3
 8005a0c:	fa22 f20e 	lsr.w	r2, r2, lr
 8005a10:	d8f3      	bhi.n	80059fa <__lshift+0x6e>
 8005a12:	ebac 0304 	sub.w	r3, ip, r4
 8005a16:	3b15      	subs	r3, #21
 8005a18:	f023 0303 	bic.w	r3, r3, #3
 8005a1c:	3304      	adds	r3, #4
 8005a1e:	f104 0015 	add.w	r0, r4, #21
 8005a22:	4560      	cmp	r0, ip
 8005a24:	bf88      	it	hi
 8005a26:	2304      	movhi	r3, #4
 8005a28:	50ca      	str	r2, [r1, r3]
 8005a2a:	b10a      	cbz	r2, 8005a30 <__lshift+0xa4>
 8005a2c:	f108 0602 	add.w	r6, r8, #2
 8005a30:	3e01      	subs	r6, #1
 8005a32:	4638      	mov	r0, r7
 8005a34:	612e      	str	r6, [r5, #16]
 8005a36:	4621      	mov	r1, r4
 8005a38:	f7ff fde2 	bl	8005600 <_Bfree>
 8005a3c:	4628      	mov	r0, r5
 8005a3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a42:	f842 0f04 	str.w	r0, [r2, #4]!
 8005a46:	3301      	adds	r3, #1
 8005a48:	e7c5      	b.n	80059d6 <__lshift+0x4a>
 8005a4a:	3904      	subs	r1, #4
 8005a4c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a50:	f841 2f04 	str.w	r2, [r1, #4]!
 8005a54:	459c      	cmp	ip, r3
 8005a56:	d8f9      	bhi.n	8005a4c <__lshift+0xc0>
 8005a58:	e7ea      	b.n	8005a30 <__lshift+0xa4>
 8005a5a:	bf00      	nop
 8005a5c:	080072e5 	.word	0x080072e5
 8005a60:	080072f6 	.word	0x080072f6

08005a64 <__mcmp>:
 8005a64:	690a      	ldr	r2, [r1, #16]
 8005a66:	4603      	mov	r3, r0
 8005a68:	6900      	ldr	r0, [r0, #16]
 8005a6a:	1a80      	subs	r0, r0, r2
 8005a6c:	b530      	push	{r4, r5, lr}
 8005a6e:	d10e      	bne.n	8005a8e <__mcmp+0x2a>
 8005a70:	3314      	adds	r3, #20
 8005a72:	3114      	adds	r1, #20
 8005a74:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005a78:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005a7c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005a80:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005a84:	4295      	cmp	r5, r2
 8005a86:	d003      	beq.n	8005a90 <__mcmp+0x2c>
 8005a88:	d205      	bcs.n	8005a96 <__mcmp+0x32>
 8005a8a:	f04f 30ff 	mov.w	r0, #4294967295
 8005a8e:	bd30      	pop	{r4, r5, pc}
 8005a90:	42a3      	cmp	r3, r4
 8005a92:	d3f3      	bcc.n	8005a7c <__mcmp+0x18>
 8005a94:	e7fb      	b.n	8005a8e <__mcmp+0x2a>
 8005a96:	2001      	movs	r0, #1
 8005a98:	e7f9      	b.n	8005a8e <__mcmp+0x2a>
	...

08005a9c <__mdiff>:
 8005a9c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005aa0:	4689      	mov	r9, r1
 8005aa2:	4606      	mov	r6, r0
 8005aa4:	4611      	mov	r1, r2
 8005aa6:	4648      	mov	r0, r9
 8005aa8:	4614      	mov	r4, r2
 8005aaa:	f7ff ffdb 	bl	8005a64 <__mcmp>
 8005aae:	1e05      	subs	r5, r0, #0
 8005ab0:	d112      	bne.n	8005ad8 <__mdiff+0x3c>
 8005ab2:	4629      	mov	r1, r5
 8005ab4:	4630      	mov	r0, r6
 8005ab6:	f7ff fd63 	bl	8005580 <_Balloc>
 8005aba:	4602      	mov	r2, r0
 8005abc:	b928      	cbnz	r0, 8005aca <__mdiff+0x2e>
 8005abe:	4b3f      	ldr	r3, [pc, #252]	@ (8005bbc <__mdiff+0x120>)
 8005ac0:	f240 2137 	movw	r1, #567	@ 0x237
 8005ac4:	483e      	ldr	r0, [pc, #248]	@ (8005bc0 <__mdiff+0x124>)
 8005ac6:	f000 fb11 	bl	80060ec <__assert_func>
 8005aca:	2301      	movs	r3, #1
 8005acc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005ad0:	4610      	mov	r0, r2
 8005ad2:	b003      	add	sp, #12
 8005ad4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ad8:	bfbc      	itt	lt
 8005ada:	464b      	movlt	r3, r9
 8005adc:	46a1      	movlt	r9, r4
 8005ade:	4630      	mov	r0, r6
 8005ae0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8005ae4:	bfba      	itte	lt
 8005ae6:	461c      	movlt	r4, r3
 8005ae8:	2501      	movlt	r5, #1
 8005aea:	2500      	movge	r5, #0
 8005aec:	f7ff fd48 	bl	8005580 <_Balloc>
 8005af0:	4602      	mov	r2, r0
 8005af2:	b918      	cbnz	r0, 8005afc <__mdiff+0x60>
 8005af4:	4b31      	ldr	r3, [pc, #196]	@ (8005bbc <__mdiff+0x120>)
 8005af6:	f240 2145 	movw	r1, #581	@ 0x245
 8005afa:	e7e3      	b.n	8005ac4 <__mdiff+0x28>
 8005afc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8005b00:	6926      	ldr	r6, [r4, #16]
 8005b02:	60c5      	str	r5, [r0, #12]
 8005b04:	f109 0310 	add.w	r3, r9, #16
 8005b08:	f109 0514 	add.w	r5, r9, #20
 8005b0c:	f104 0e14 	add.w	lr, r4, #20
 8005b10:	f100 0b14 	add.w	fp, r0, #20
 8005b14:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8005b18:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8005b1c:	9301      	str	r3, [sp, #4]
 8005b1e:	46d9      	mov	r9, fp
 8005b20:	f04f 0c00 	mov.w	ip, #0
 8005b24:	9b01      	ldr	r3, [sp, #4]
 8005b26:	f85e 0b04 	ldr.w	r0, [lr], #4
 8005b2a:	f853 af04 	ldr.w	sl, [r3, #4]!
 8005b2e:	9301      	str	r3, [sp, #4]
 8005b30:	fa1f f38a 	uxth.w	r3, sl
 8005b34:	4619      	mov	r1, r3
 8005b36:	b283      	uxth	r3, r0
 8005b38:	1acb      	subs	r3, r1, r3
 8005b3a:	0c00      	lsrs	r0, r0, #16
 8005b3c:	4463      	add	r3, ip
 8005b3e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8005b42:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8005b46:	b29b      	uxth	r3, r3
 8005b48:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8005b4c:	4576      	cmp	r6, lr
 8005b4e:	f849 3b04 	str.w	r3, [r9], #4
 8005b52:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005b56:	d8e5      	bhi.n	8005b24 <__mdiff+0x88>
 8005b58:	1b33      	subs	r3, r6, r4
 8005b5a:	3b15      	subs	r3, #21
 8005b5c:	f023 0303 	bic.w	r3, r3, #3
 8005b60:	3415      	adds	r4, #21
 8005b62:	3304      	adds	r3, #4
 8005b64:	42a6      	cmp	r6, r4
 8005b66:	bf38      	it	cc
 8005b68:	2304      	movcc	r3, #4
 8005b6a:	441d      	add	r5, r3
 8005b6c:	445b      	add	r3, fp
 8005b6e:	461e      	mov	r6, r3
 8005b70:	462c      	mov	r4, r5
 8005b72:	4544      	cmp	r4, r8
 8005b74:	d30e      	bcc.n	8005b94 <__mdiff+0xf8>
 8005b76:	f108 0103 	add.w	r1, r8, #3
 8005b7a:	1b49      	subs	r1, r1, r5
 8005b7c:	f021 0103 	bic.w	r1, r1, #3
 8005b80:	3d03      	subs	r5, #3
 8005b82:	45a8      	cmp	r8, r5
 8005b84:	bf38      	it	cc
 8005b86:	2100      	movcc	r1, #0
 8005b88:	440b      	add	r3, r1
 8005b8a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005b8e:	b191      	cbz	r1, 8005bb6 <__mdiff+0x11a>
 8005b90:	6117      	str	r7, [r2, #16]
 8005b92:	e79d      	b.n	8005ad0 <__mdiff+0x34>
 8005b94:	f854 1b04 	ldr.w	r1, [r4], #4
 8005b98:	46e6      	mov	lr, ip
 8005b9a:	0c08      	lsrs	r0, r1, #16
 8005b9c:	fa1c fc81 	uxtah	ip, ip, r1
 8005ba0:	4471      	add	r1, lr
 8005ba2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8005ba6:	b289      	uxth	r1, r1
 8005ba8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8005bac:	f846 1b04 	str.w	r1, [r6], #4
 8005bb0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005bb4:	e7dd      	b.n	8005b72 <__mdiff+0xd6>
 8005bb6:	3f01      	subs	r7, #1
 8005bb8:	e7e7      	b.n	8005b8a <__mdiff+0xee>
 8005bba:	bf00      	nop
 8005bbc:	080072e5 	.word	0x080072e5
 8005bc0:	080072f6 	.word	0x080072f6

08005bc4 <__d2b>:
 8005bc4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005bc8:	460f      	mov	r7, r1
 8005bca:	2101      	movs	r1, #1
 8005bcc:	ec59 8b10 	vmov	r8, r9, d0
 8005bd0:	4616      	mov	r6, r2
 8005bd2:	f7ff fcd5 	bl	8005580 <_Balloc>
 8005bd6:	4604      	mov	r4, r0
 8005bd8:	b930      	cbnz	r0, 8005be8 <__d2b+0x24>
 8005bda:	4602      	mov	r2, r0
 8005bdc:	4b23      	ldr	r3, [pc, #140]	@ (8005c6c <__d2b+0xa8>)
 8005bde:	4824      	ldr	r0, [pc, #144]	@ (8005c70 <__d2b+0xac>)
 8005be0:	f240 310f 	movw	r1, #783	@ 0x30f
 8005be4:	f000 fa82 	bl	80060ec <__assert_func>
 8005be8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005bec:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005bf0:	b10d      	cbz	r5, 8005bf6 <__d2b+0x32>
 8005bf2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005bf6:	9301      	str	r3, [sp, #4]
 8005bf8:	f1b8 0300 	subs.w	r3, r8, #0
 8005bfc:	d023      	beq.n	8005c46 <__d2b+0x82>
 8005bfe:	4668      	mov	r0, sp
 8005c00:	9300      	str	r3, [sp, #0]
 8005c02:	f7ff fd84 	bl	800570e <__lo0bits>
 8005c06:	e9dd 1200 	ldrd	r1, r2, [sp]
 8005c0a:	b1d0      	cbz	r0, 8005c42 <__d2b+0x7e>
 8005c0c:	f1c0 0320 	rsb	r3, r0, #32
 8005c10:	fa02 f303 	lsl.w	r3, r2, r3
 8005c14:	430b      	orrs	r3, r1
 8005c16:	40c2      	lsrs	r2, r0
 8005c18:	6163      	str	r3, [r4, #20]
 8005c1a:	9201      	str	r2, [sp, #4]
 8005c1c:	9b01      	ldr	r3, [sp, #4]
 8005c1e:	61a3      	str	r3, [r4, #24]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	bf0c      	ite	eq
 8005c24:	2201      	moveq	r2, #1
 8005c26:	2202      	movne	r2, #2
 8005c28:	6122      	str	r2, [r4, #16]
 8005c2a:	b1a5      	cbz	r5, 8005c56 <__d2b+0x92>
 8005c2c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8005c30:	4405      	add	r5, r0
 8005c32:	603d      	str	r5, [r7, #0]
 8005c34:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8005c38:	6030      	str	r0, [r6, #0]
 8005c3a:	4620      	mov	r0, r4
 8005c3c:	b003      	add	sp, #12
 8005c3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005c42:	6161      	str	r1, [r4, #20]
 8005c44:	e7ea      	b.n	8005c1c <__d2b+0x58>
 8005c46:	a801      	add	r0, sp, #4
 8005c48:	f7ff fd61 	bl	800570e <__lo0bits>
 8005c4c:	9b01      	ldr	r3, [sp, #4]
 8005c4e:	6163      	str	r3, [r4, #20]
 8005c50:	3020      	adds	r0, #32
 8005c52:	2201      	movs	r2, #1
 8005c54:	e7e8      	b.n	8005c28 <__d2b+0x64>
 8005c56:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005c5a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8005c5e:	6038      	str	r0, [r7, #0]
 8005c60:	6918      	ldr	r0, [r3, #16]
 8005c62:	f7ff fd35 	bl	80056d0 <__hi0bits>
 8005c66:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005c6a:	e7e5      	b.n	8005c38 <__d2b+0x74>
 8005c6c:	080072e5 	.word	0x080072e5
 8005c70:	080072f6 	.word	0x080072f6

08005c74 <__ssputs_r>:
 8005c74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c78:	688e      	ldr	r6, [r1, #8]
 8005c7a:	461f      	mov	r7, r3
 8005c7c:	42be      	cmp	r6, r7
 8005c7e:	680b      	ldr	r3, [r1, #0]
 8005c80:	4682      	mov	sl, r0
 8005c82:	460c      	mov	r4, r1
 8005c84:	4690      	mov	r8, r2
 8005c86:	d82d      	bhi.n	8005ce4 <__ssputs_r+0x70>
 8005c88:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005c8c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005c90:	d026      	beq.n	8005ce0 <__ssputs_r+0x6c>
 8005c92:	6965      	ldr	r5, [r4, #20]
 8005c94:	6909      	ldr	r1, [r1, #16]
 8005c96:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005c9a:	eba3 0901 	sub.w	r9, r3, r1
 8005c9e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005ca2:	1c7b      	adds	r3, r7, #1
 8005ca4:	444b      	add	r3, r9
 8005ca6:	106d      	asrs	r5, r5, #1
 8005ca8:	429d      	cmp	r5, r3
 8005caa:	bf38      	it	cc
 8005cac:	461d      	movcc	r5, r3
 8005cae:	0553      	lsls	r3, r2, #21
 8005cb0:	d527      	bpl.n	8005d02 <__ssputs_r+0x8e>
 8005cb2:	4629      	mov	r1, r5
 8005cb4:	f7ff fbd8 	bl	8005468 <_malloc_r>
 8005cb8:	4606      	mov	r6, r0
 8005cba:	b360      	cbz	r0, 8005d16 <__ssputs_r+0xa2>
 8005cbc:	6921      	ldr	r1, [r4, #16]
 8005cbe:	464a      	mov	r2, r9
 8005cc0:	f000 fa06 	bl	80060d0 <memcpy>
 8005cc4:	89a3      	ldrh	r3, [r4, #12]
 8005cc6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005cca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005cce:	81a3      	strh	r3, [r4, #12]
 8005cd0:	6126      	str	r6, [r4, #16]
 8005cd2:	6165      	str	r5, [r4, #20]
 8005cd4:	444e      	add	r6, r9
 8005cd6:	eba5 0509 	sub.w	r5, r5, r9
 8005cda:	6026      	str	r6, [r4, #0]
 8005cdc:	60a5      	str	r5, [r4, #8]
 8005cde:	463e      	mov	r6, r7
 8005ce0:	42be      	cmp	r6, r7
 8005ce2:	d900      	bls.n	8005ce6 <__ssputs_r+0x72>
 8005ce4:	463e      	mov	r6, r7
 8005ce6:	6820      	ldr	r0, [r4, #0]
 8005ce8:	4632      	mov	r2, r6
 8005cea:	4641      	mov	r1, r8
 8005cec:	f000 f9c6 	bl	800607c <memmove>
 8005cf0:	68a3      	ldr	r3, [r4, #8]
 8005cf2:	1b9b      	subs	r3, r3, r6
 8005cf4:	60a3      	str	r3, [r4, #8]
 8005cf6:	6823      	ldr	r3, [r4, #0]
 8005cf8:	4433      	add	r3, r6
 8005cfa:	6023      	str	r3, [r4, #0]
 8005cfc:	2000      	movs	r0, #0
 8005cfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d02:	462a      	mov	r2, r5
 8005d04:	f000 fa36 	bl	8006174 <_realloc_r>
 8005d08:	4606      	mov	r6, r0
 8005d0a:	2800      	cmp	r0, #0
 8005d0c:	d1e0      	bne.n	8005cd0 <__ssputs_r+0x5c>
 8005d0e:	6921      	ldr	r1, [r4, #16]
 8005d10:	4650      	mov	r0, sl
 8005d12:	f7ff fb35 	bl	8005380 <_free_r>
 8005d16:	230c      	movs	r3, #12
 8005d18:	f8ca 3000 	str.w	r3, [sl]
 8005d1c:	89a3      	ldrh	r3, [r4, #12]
 8005d1e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005d22:	81a3      	strh	r3, [r4, #12]
 8005d24:	f04f 30ff 	mov.w	r0, #4294967295
 8005d28:	e7e9      	b.n	8005cfe <__ssputs_r+0x8a>
	...

08005d2c <_svfiprintf_r>:
 8005d2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d30:	4698      	mov	r8, r3
 8005d32:	898b      	ldrh	r3, [r1, #12]
 8005d34:	061b      	lsls	r3, r3, #24
 8005d36:	b09d      	sub	sp, #116	@ 0x74
 8005d38:	4607      	mov	r7, r0
 8005d3a:	460d      	mov	r5, r1
 8005d3c:	4614      	mov	r4, r2
 8005d3e:	d510      	bpl.n	8005d62 <_svfiprintf_r+0x36>
 8005d40:	690b      	ldr	r3, [r1, #16]
 8005d42:	b973      	cbnz	r3, 8005d62 <_svfiprintf_r+0x36>
 8005d44:	2140      	movs	r1, #64	@ 0x40
 8005d46:	f7ff fb8f 	bl	8005468 <_malloc_r>
 8005d4a:	6028      	str	r0, [r5, #0]
 8005d4c:	6128      	str	r0, [r5, #16]
 8005d4e:	b930      	cbnz	r0, 8005d5e <_svfiprintf_r+0x32>
 8005d50:	230c      	movs	r3, #12
 8005d52:	603b      	str	r3, [r7, #0]
 8005d54:	f04f 30ff 	mov.w	r0, #4294967295
 8005d58:	b01d      	add	sp, #116	@ 0x74
 8005d5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d5e:	2340      	movs	r3, #64	@ 0x40
 8005d60:	616b      	str	r3, [r5, #20]
 8005d62:	2300      	movs	r3, #0
 8005d64:	9309      	str	r3, [sp, #36]	@ 0x24
 8005d66:	2320      	movs	r3, #32
 8005d68:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005d6c:	f8cd 800c 	str.w	r8, [sp, #12]
 8005d70:	2330      	movs	r3, #48	@ 0x30
 8005d72:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005f10 <_svfiprintf_r+0x1e4>
 8005d76:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005d7a:	f04f 0901 	mov.w	r9, #1
 8005d7e:	4623      	mov	r3, r4
 8005d80:	469a      	mov	sl, r3
 8005d82:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005d86:	b10a      	cbz	r2, 8005d8c <_svfiprintf_r+0x60>
 8005d88:	2a25      	cmp	r2, #37	@ 0x25
 8005d8a:	d1f9      	bne.n	8005d80 <_svfiprintf_r+0x54>
 8005d8c:	ebba 0b04 	subs.w	fp, sl, r4
 8005d90:	d00b      	beq.n	8005daa <_svfiprintf_r+0x7e>
 8005d92:	465b      	mov	r3, fp
 8005d94:	4622      	mov	r2, r4
 8005d96:	4629      	mov	r1, r5
 8005d98:	4638      	mov	r0, r7
 8005d9a:	f7ff ff6b 	bl	8005c74 <__ssputs_r>
 8005d9e:	3001      	adds	r0, #1
 8005da0:	f000 80a7 	beq.w	8005ef2 <_svfiprintf_r+0x1c6>
 8005da4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005da6:	445a      	add	r2, fp
 8005da8:	9209      	str	r2, [sp, #36]	@ 0x24
 8005daa:	f89a 3000 	ldrb.w	r3, [sl]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	f000 809f 	beq.w	8005ef2 <_svfiprintf_r+0x1c6>
 8005db4:	2300      	movs	r3, #0
 8005db6:	f04f 32ff 	mov.w	r2, #4294967295
 8005dba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005dbe:	f10a 0a01 	add.w	sl, sl, #1
 8005dc2:	9304      	str	r3, [sp, #16]
 8005dc4:	9307      	str	r3, [sp, #28]
 8005dc6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005dca:	931a      	str	r3, [sp, #104]	@ 0x68
 8005dcc:	4654      	mov	r4, sl
 8005dce:	2205      	movs	r2, #5
 8005dd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005dd4:	484e      	ldr	r0, [pc, #312]	@ (8005f10 <_svfiprintf_r+0x1e4>)
 8005dd6:	f7fa fa03 	bl	80001e0 <memchr>
 8005dda:	9a04      	ldr	r2, [sp, #16]
 8005ddc:	b9d8      	cbnz	r0, 8005e16 <_svfiprintf_r+0xea>
 8005dde:	06d0      	lsls	r0, r2, #27
 8005de0:	bf44      	itt	mi
 8005de2:	2320      	movmi	r3, #32
 8005de4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005de8:	0711      	lsls	r1, r2, #28
 8005dea:	bf44      	itt	mi
 8005dec:	232b      	movmi	r3, #43	@ 0x2b
 8005dee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005df2:	f89a 3000 	ldrb.w	r3, [sl]
 8005df6:	2b2a      	cmp	r3, #42	@ 0x2a
 8005df8:	d015      	beq.n	8005e26 <_svfiprintf_r+0xfa>
 8005dfa:	9a07      	ldr	r2, [sp, #28]
 8005dfc:	4654      	mov	r4, sl
 8005dfe:	2000      	movs	r0, #0
 8005e00:	f04f 0c0a 	mov.w	ip, #10
 8005e04:	4621      	mov	r1, r4
 8005e06:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005e0a:	3b30      	subs	r3, #48	@ 0x30
 8005e0c:	2b09      	cmp	r3, #9
 8005e0e:	d94b      	bls.n	8005ea8 <_svfiprintf_r+0x17c>
 8005e10:	b1b0      	cbz	r0, 8005e40 <_svfiprintf_r+0x114>
 8005e12:	9207      	str	r2, [sp, #28]
 8005e14:	e014      	b.n	8005e40 <_svfiprintf_r+0x114>
 8005e16:	eba0 0308 	sub.w	r3, r0, r8
 8005e1a:	fa09 f303 	lsl.w	r3, r9, r3
 8005e1e:	4313      	orrs	r3, r2
 8005e20:	9304      	str	r3, [sp, #16]
 8005e22:	46a2      	mov	sl, r4
 8005e24:	e7d2      	b.n	8005dcc <_svfiprintf_r+0xa0>
 8005e26:	9b03      	ldr	r3, [sp, #12]
 8005e28:	1d19      	adds	r1, r3, #4
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	9103      	str	r1, [sp, #12]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	bfbb      	ittet	lt
 8005e32:	425b      	neglt	r3, r3
 8005e34:	f042 0202 	orrlt.w	r2, r2, #2
 8005e38:	9307      	strge	r3, [sp, #28]
 8005e3a:	9307      	strlt	r3, [sp, #28]
 8005e3c:	bfb8      	it	lt
 8005e3e:	9204      	strlt	r2, [sp, #16]
 8005e40:	7823      	ldrb	r3, [r4, #0]
 8005e42:	2b2e      	cmp	r3, #46	@ 0x2e
 8005e44:	d10a      	bne.n	8005e5c <_svfiprintf_r+0x130>
 8005e46:	7863      	ldrb	r3, [r4, #1]
 8005e48:	2b2a      	cmp	r3, #42	@ 0x2a
 8005e4a:	d132      	bne.n	8005eb2 <_svfiprintf_r+0x186>
 8005e4c:	9b03      	ldr	r3, [sp, #12]
 8005e4e:	1d1a      	adds	r2, r3, #4
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	9203      	str	r2, [sp, #12]
 8005e54:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005e58:	3402      	adds	r4, #2
 8005e5a:	9305      	str	r3, [sp, #20]
 8005e5c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005f20 <_svfiprintf_r+0x1f4>
 8005e60:	7821      	ldrb	r1, [r4, #0]
 8005e62:	2203      	movs	r2, #3
 8005e64:	4650      	mov	r0, sl
 8005e66:	f7fa f9bb 	bl	80001e0 <memchr>
 8005e6a:	b138      	cbz	r0, 8005e7c <_svfiprintf_r+0x150>
 8005e6c:	9b04      	ldr	r3, [sp, #16]
 8005e6e:	eba0 000a 	sub.w	r0, r0, sl
 8005e72:	2240      	movs	r2, #64	@ 0x40
 8005e74:	4082      	lsls	r2, r0
 8005e76:	4313      	orrs	r3, r2
 8005e78:	3401      	adds	r4, #1
 8005e7a:	9304      	str	r3, [sp, #16]
 8005e7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e80:	4824      	ldr	r0, [pc, #144]	@ (8005f14 <_svfiprintf_r+0x1e8>)
 8005e82:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005e86:	2206      	movs	r2, #6
 8005e88:	f7fa f9aa 	bl	80001e0 <memchr>
 8005e8c:	2800      	cmp	r0, #0
 8005e8e:	d036      	beq.n	8005efe <_svfiprintf_r+0x1d2>
 8005e90:	4b21      	ldr	r3, [pc, #132]	@ (8005f18 <_svfiprintf_r+0x1ec>)
 8005e92:	bb1b      	cbnz	r3, 8005edc <_svfiprintf_r+0x1b0>
 8005e94:	9b03      	ldr	r3, [sp, #12]
 8005e96:	3307      	adds	r3, #7
 8005e98:	f023 0307 	bic.w	r3, r3, #7
 8005e9c:	3308      	adds	r3, #8
 8005e9e:	9303      	str	r3, [sp, #12]
 8005ea0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ea2:	4433      	add	r3, r6
 8005ea4:	9309      	str	r3, [sp, #36]	@ 0x24
 8005ea6:	e76a      	b.n	8005d7e <_svfiprintf_r+0x52>
 8005ea8:	fb0c 3202 	mla	r2, ip, r2, r3
 8005eac:	460c      	mov	r4, r1
 8005eae:	2001      	movs	r0, #1
 8005eb0:	e7a8      	b.n	8005e04 <_svfiprintf_r+0xd8>
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	3401      	adds	r4, #1
 8005eb6:	9305      	str	r3, [sp, #20]
 8005eb8:	4619      	mov	r1, r3
 8005eba:	f04f 0c0a 	mov.w	ip, #10
 8005ebe:	4620      	mov	r0, r4
 8005ec0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005ec4:	3a30      	subs	r2, #48	@ 0x30
 8005ec6:	2a09      	cmp	r2, #9
 8005ec8:	d903      	bls.n	8005ed2 <_svfiprintf_r+0x1a6>
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d0c6      	beq.n	8005e5c <_svfiprintf_r+0x130>
 8005ece:	9105      	str	r1, [sp, #20]
 8005ed0:	e7c4      	b.n	8005e5c <_svfiprintf_r+0x130>
 8005ed2:	fb0c 2101 	mla	r1, ip, r1, r2
 8005ed6:	4604      	mov	r4, r0
 8005ed8:	2301      	movs	r3, #1
 8005eda:	e7f0      	b.n	8005ebe <_svfiprintf_r+0x192>
 8005edc:	ab03      	add	r3, sp, #12
 8005ede:	9300      	str	r3, [sp, #0]
 8005ee0:	462a      	mov	r2, r5
 8005ee2:	4b0e      	ldr	r3, [pc, #56]	@ (8005f1c <_svfiprintf_r+0x1f0>)
 8005ee4:	a904      	add	r1, sp, #16
 8005ee6:	4638      	mov	r0, r7
 8005ee8:	f7fd fe7e 	bl	8003be8 <_printf_float>
 8005eec:	1c42      	adds	r2, r0, #1
 8005eee:	4606      	mov	r6, r0
 8005ef0:	d1d6      	bne.n	8005ea0 <_svfiprintf_r+0x174>
 8005ef2:	89ab      	ldrh	r3, [r5, #12]
 8005ef4:	065b      	lsls	r3, r3, #25
 8005ef6:	f53f af2d 	bmi.w	8005d54 <_svfiprintf_r+0x28>
 8005efa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005efc:	e72c      	b.n	8005d58 <_svfiprintf_r+0x2c>
 8005efe:	ab03      	add	r3, sp, #12
 8005f00:	9300      	str	r3, [sp, #0]
 8005f02:	462a      	mov	r2, r5
 8005f04:	4b05      	ldr	r3, [pc, #20]	@ (8005f1c <_svfiprintf_r+0x1f0>)
 8005f06:	a904      	add	r1, sp, #16
 8005f08:	4638      	mov	r0, r7
 8005f0a:	f7fe f905 	bl	8004118 <_printf_i>
 8005f0e:	e7ed      	b.n	8005eec <_svfiprintf_r+0x1c0>
 8005f10:	0800734f 	.word	0x0800734f
 8005f14:	08007359 	.word	0x08007359
 8005f18:	08003be9 	.word	0x08003be9
 8005f1c:	08005c75 	.word	0x08005c75
 8005f20:	08007355 	.word	0x08007355

08005f24 <__sflush_r>:
 8005f24:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005f28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f2c:	0716      	lsls	r6, r2, #28
 8005f2e:	4605      	mov	r5, r0
 8005f30:	460c      	mov	r4, r1
 8005f32:	d454      	bmi.n	8005fde <__sflush_r+0xba>
 8005f34:	684b      	ldr	r3, [r1, #4]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	dc02      	bgt.n	8005f40 <__sflush_r+0x1c>
 8005f3a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	dd48      	ble.n	8005fd2 <__sflush_r+0xae>
 8005f40:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005f42:	2e00      	cmp	r6, #0
 8005f44:	d045      	beq.n	8005fd2 <__sflush_r+0xae>
 8005f46:	2300      	movs	r3, #0
 8005f48:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005f4c:	682f      	ldr	r7, [r5, #0]
 8005f4e:	6a21      	ldr	r1, [r4, #32]
 8005f50:	602b      	str	r3, [r5, #0]
 8005f52:	d030      	beq.n	8005fb6 <__sflush_r+0x92>
 8005f54:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005f56:	89a3      	ldrh	r3, [r4, #12]
 8005f58:	0759      	lsls	r1, r3, #29
 8005f5a:	d505      	bpl.n	8005f68 <__sflush_r+0x44>
 8005f5c:	6863      	ldr	r3, [r4, #4]
 8005f5e:	1ad2      	subs	r2, r2, r3
 8005f60:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005f62:	b10b      	cbz	r3, 8005f68 <__sflush_r+0x44>
 8005f64:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005f66:	1ad2      	subs	r2, r2, r3
 8005f68:	2300      	movs	r3, #0
 8005f6a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005f6c:	6a21      	ldr	r1, [r4, #32]
 8005f6e:	4628      	mov	r0, r5
 8005f70:	47b0      	blx	r6
 8005f72:	1c43      	adds	r3, r0, #1
 8005f74:	89a3      	ldrh	r3, [r4, #12]
 8005f76:	d106      	bne.n	8005f86 <__sflush_r+0x62>
 8005f78:	6829      	ldr	r1, [r5, #0]
 8005f7a:	291d      	cmp	r1, #29
 8005f7c:	d82b      	bhi.n	8005fd6 <__sflush_r+0xb2>
 8005f7e:	4a2a      	ldr	r2, [pc, #168]	@ (8006028 <__sflush_r+0x104>)
 8005f80:	40ca      	lsrs	r2, r1
 8005f82:	07d6      	lsls	r6, r2, #31
 8005f84:	d527      	bpl.n	8005fd6 <__sflush_r+0xb2>
 8005f86:	2200      	movs	r2, #0
 8005f88:	6062      	str	r2, [r4, #4]
 8005f8a:	04d9      	lsls	r1, r3, #19
 8005f8c:	6922      	ldr	r2, [r4, #16]
 8005f8e:	6022      	str	r2, [r4, #0]
 8005f90:	d504      	bpl.n	8005f9c <__sflush_r+0x78>
 8005f92:	1c42      	adds	r2, r0, #1
 8005f94:	d101      	bne.n	8005f9a <__sflush_r+0x76>
 8005f96:	682b      	ldr	r3, [r5, #0]
 8005f98:	b903      	cbnz	r3, 8005f9c <__sflush_r+0x78>
 8005f9a:	6560      	str	r0, [r4, #84]	@ 0x54
 8005f9c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005f9e:	602f      	str	r7, [r5, #0]
 8005fa0:	b1b9      	cbz	r1, 8005fd2 <__sflush_r+0xae>
 8005fa2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005fa6:	4299      	cmp	r1, r3
 8005fa8:	d002      	beq.n	8005fb0 <__sflush_r+0x8c>
 8005faa:	4628      	mov	r0, r5
 8005fac:	f7ff f9e8 	bl	8005380 <_free_r>
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	6363      	str	r3, [r4, #52]	@ 0x34
 8005fb4:	e00d      	b.n	8005fd2 <__sflush_r+0xae>
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	4628      	mov	r0, r5
 8005fba:	47b0      	blx	r6
 8005fbc:	4602      	mov	r2, r0
 8005fbe:	1c50      	adds	r0, r2, #1
 8005fc0:	d1c9      	bne.n	8005f56 <__sflush_r+0x32>
 8005fc2:	682b      	ldr	r3, [r5, #0]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d0c6      	beq.n	8005f56 <__sflush_r+0x32>
 8005fc8:	2b1d      	cmp	r3, #29
 8005fca:	d001      	beq.n	8005fd0 <__sflush_r+0xac>
 8005fcc:	2b16      	cmp	r3, #22
 8005fce:	d11e      	bne.n	800600e <__sflush_r+0xea>
 8005fd0:	602f      	str	r7, [r5, #0]
 8005fd2:	2000      	movs	r0, #0
 8005fd4:	e022      	b.n	800601c <__sflush_r+0xf8>
 8005fd6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005fda:	b21b      	sxth	r3, r3
 8005fdc:	e01b      	b.n	8006016 <__sflush_r+0xf2>
 8005fde:	690f      	ldr	r7, [r1, #16]
 8005fe0:	2f00      	cmp	r7, #0
 8005fe2:	d0f6      	beq.n	8005fd2 <__sflush_r+0xae>
 8005fe4:	0793      	lsls	r3, r2, #30
 8005fe6:	680e      	ldr	r6, [r1, #0]
 8005fe8:	bf08      	it	eq
 8005fea:	694b      	ldreq	r3, [r1, #20]
 8005fec:	600f      	str	r7, [r1, #0]
 8005fee:	bf18      	it	ne
 8005ff0:	2300      	movne	r3, #0
 8005ff2:	eba6 0807 	sub.w	r8, r6, r7
 8005ff6:	608b      	str	r3, [r1, #8]
 8005ff8:	f1b8 0f00 	cmp.w	r8, #0
 8005ffc:	dde9      	ble.n	8005fd2 <__sflush_r+0xae>
 8005ffe:	6a21      	ldr	r1, [r4, #32]
 8006000:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006002:	4643      	mov	r3, r8
 8006004:	463a      	mov	r2, r7
 8006006:	4628      	mov	r0, r5
 8006008:	47b0      	blx	r6
 800600a:	2800      	cmp	r0, #0
 800600c:	dc08      	bgt.n	8006020 <__sflush_r+0xfc>
 800600e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006012:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006016:	81a3      	strh	r3, [r4, #12]
 8006018:	f04f 30ff 	mov.w	r0, #4294967295
 800601c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006020:	4407      	add	r7, r0
 8006022:	eba8 0800 	sub.w	r8, r8, r0
 8006026:	e7e7      	b.n	8005ff8 <__sflush_r+0xd4>
 8006028:	20400001 	.word	0x20400001

0800602c <_fflush_r>:
 800602c:	b538      	push	{r3, r4, r5, lr}
 800602e:	690b      	ldr	r3, [r1, #16]
 8006030:	4605      	mov	r5, r0
 8006032:	460c      	mov	r4, r1
 8006034:	b913      	cbnz	r3, 800603c <_fflush_r+0x10>
 8006036:	2500      	movs	r5, #0
 8006038:	4628      	mov	r0, r5
 800603a:	bd38      	pop	{r3, r4, r5, pc}
 800603c:	b118      	cbz	r0, 8006046 <_fflush_r+0x1a>
 800603e:	6a03      	ldr	r3, [r0, #32]
 8006040:	b90b      	cbnz	r3, 8006046 <_fflush_r+0x1a>
 8006042:	f7fe fa13 	bl	800446c <__sinit>
 8006046:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d0f3      	beq.n	8006036 <_fflush_r+0xa>
 800604e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006050:	07d0      	lsls	r0, r2, #31
 8006052:	d404      	bmi.n	800605e <_fflush_r+0x32>
 8006054:	0599      	lsls	r1, r3, #22
 8006056:	d402      	bmi.n	800605e <_fflush_r+0x32>
 8006058:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800605a:	f7fe fb34 	bl	80046c6 <__retarget_lock_acquire_recursive>
 800605e:	4628      	mov	r0, r5
 8006060:	4621      	mov	r1, r4
 8006062:	f7ff ff5f 	bl	8005f24 <__sflush_r>
 8006066:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006068:	07da      	lsls	r2, r3, #31
 800606a:	4605      	mov	r5, r0
 800606c:	d4e4      	bmi.n	8006038 <_fflush_r+0xc>
 800606e:	89a3      	ldrh	r3, [r4, #12]
 8006070:	059b      	lsls	r3, r3, #22
 8006072:	d4e1      	bmi.n	8006038 <_fflush_r+0xc>
 8006074:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006076:	f7fe fb27 	bl	80046c8 <__retarget_lock_release_recursive>
 800607a:	e7dd      	b.n	8006038 <_fflush_r+0xc>

0800607c <memmove>:
 800607c:	4288      	cmp	r0, r1
 800607e:	b510      	push	{r4, lr}
 8006080:	eb01 0402 	add.w	r4, r1, r2
 8006084:	d902      	bls.n	800608c <memmove+0x10>
 8006086:	4284      	cmp	r4, r0
 8006088:	4623      	mov	r3, r4
 800608a:	d807      	bhi.n	800609c <memmove+0x20>
 800608c:	1e43      	subs	r3, r0, #1
 800608e:	42a1      	cmp	r1, r4
 8006090:	d008      	beq.n	80060a4 <memmove+0x28>
 8006092:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006096:	f803 2f01 	strb.w	r2, [r3, #1]!
 800609a:	e7f8      	b.n	800608e <memmove+0x12>
 800609c:	4402      	add	r2, r0
 800609e:	4601      	mov	r1, r0
 80060a0:	428a      	cmp	r2, r1
 80060a2:	d100      	bne.n	80060a6 <memmove+0x2a>
 80060a4:	bd10      	pop	{r4, pc}
 80060a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80060aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80060ae:	e7f7      	b.n	80060a0 <memmove+0x24>

080060b0 <_sbrk_r>:
 80060b0:	b538      	push	{r3, r4, r5, lr}
 80060b2:	4d06      	ldr	r5, [pc, #24]	@ (80060cc <_sbrk_r+0x1c>)
 80060b4:	2300      	movs	r3, #0
 80060b6:	4604      	mov	r4, r0
 80060b8:	4608      	mov	r0, r1
 80060ba:	602b      	str	r3, [r5, #0]
 80060bc:	f7fb ff60 	bl	8001f80 <_sbrk>
 80060c0:	1c43      	adds	r3, r0, #1
 80060c2:	d102      	bne.n	80060ca <_sbrk_r+0x1a>
 80060c4:	682b      	ldr	r3, [r5, #0]
 80060c6:	b103      	cbz	r3, 80060ca <_sbrk_r+0x1a>
 80060c8:	6023      	str	r3, [r4, #0]
 80060ca:	bd38      	pop	{r3, r4, r5, pc}
 80060cc:	20001ba8 	.word	0x20001ba8

080060d0 <memcpy>:
 80060d0:	440a      	add	r2, r1
 80060d2:	4291      	cmp	r1, r2
 80060d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80060d8:	d100      	bne.n	80060dc <memcpy+0xc>
 80060da:	4770      	bx	lr
 80060dc:	b510      	push	{r4, lr}
 80060de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80060e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80060e6:	4291      	cmp	r1, r2
 80060e8:	d1f9      	bne.n	80060de <memcpy+0xe>
 80060ea:	bd10      	pop	{r4, pc}

080060ec <__assert_func>:
 80060ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80060ee:	4614      	mov	r4, r2
 80060f0:	461a      	mov	r2, r3
 80060f2:	4b09      	ldr	r3, [pc, #36]	@ (8006118 <__assert_func+0x2c>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	4605      	mov	r5, r0
 80060f8:	68d8      	ldr	r0, [r3, #12]
 80060fa:	b14c      	cbz	r4, 8006110 <__assert_func+0x24>
 80060fc:	4b07      	ldr	r3, [pc, #28]	@ (800611c <__assert_func+0x30>)
 80060fe:	9100      	str	r1, [sp, #0]
 8006100:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006104:	4906      	ldr	r1, [pc, #24]	@ (8006120 <__assert_func+0x34>)
 8006106:	462b      	mov	r3, r5
 8006108:	f000 f870 	bl	80061ec <fiprintf>
 800610c:	f000 f880 	bl	8006210 <abort>
 8006110:	4b04      	ldr	r3, [pc, #16]	@ (8006124 <__assert_func+0x38>)
 8006112:	461c      	mov	r4, r3
 8006114:	e7f3      	b.n	80060fe <__assert_func+0x12>
 8006116:	bf00      	nop
 8006118:	20000018 	.word	0x20000018
 800611c:	0800736a 	.word	0x0800736a
 8006120:	08007377 	.word	0x08007377
 8006124:	08007207 	.word	0x08007207

08006128 <_calloc_r>:
 8006128:	b570      	push	{r4, r5, r6, lr}
 800612a:	fba1 5402 	umull	r5, r4, r1, r2
 800612e:	b934      	cbnz	r4, 800613e <_calloc_r+0x16>
 8006130:	4629      	mov	r1, r5
 8006132:	f7ff f999 	bl	8005468 <_malloc_r>
 8006136:	4606      	mov	r6, r0
 8006138:	b928      	cbnz	r0, 8006146 <_calloc_r+0x1e>
 800613a:	4630      	mov	r0, r6
 800613c:	bd70      	pop	{r4, r5, r6, pc}
 800613e:	220c      	movs	r2, #12
 8006140:	6002      	str	r2, [r0, #0]
 8006142:	2600      	movs	r6, #0
 8006144:	e7f9      	b.n	800613a <_calloc_r+0x12>
 8006146:	462a      	mov	r2, r5
 8006148:	4621      	mov	r1, r4
 800614a:	f7fe fa3e 	bl	80045ca <memset>
 800614e:	e7f4      	b.n	800613a <_calloc_r+0x12>

08006150 <__ascii_mbtowc>:
 8006150:	b082      	sub	sp, #8
 8006152:	b901      	cbnz	r1, 8006156 <__ascii_mbtowc+0x6>
 8006154:	a901      	add	r1, sp, #4
 8006156:	b142      	cbz	r2, 800616a <__ascii_mbtowc+0x1a>
 8006158:	b14b      	cbz	r3, 800616e <__ascii_mbtowc+0x1e>
 800615a:	7813      	ldrb	r3, [r2, #0]
 800615c:	600b      	str	r3, [r1, #0]
 800615e:	7812      	ldrb	r2, [r2, #0]
 8006160:	1e10      	subs	r0, r2, #0
 8006162:	bf18      	it	ne
 8006164:	2001      	movne	r0, #1
 8006166:	b002      	add	sp, #8
 8006168:	4770      	bx	lr
 800616a:	4610      	mov	r0, r2
 800616c:	e7fb      	b.n	8006166 <__ascii_mbtowc+0x16>
 800616e:	f06f 0001 	mvn.w	r0, #1
 8006172:	e7f8      	b.n	8006166 <__ascii_mbtowc+0x16>

08006174 <_realloc_r>:
 8006174:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006178:	4607      	mov	r7, r0
 800617a:	4614      	mov	r4, r2
 800617c:	460d      	mov	r5, r1
 800617e:	b921      	cbnz	r1, 800618a <_realloc_r+0x16>
 8006180:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006184:	4611      	mov	r1, r2
 8006186:	f7ff b96f 	b.w	8005468 <_malloc_r>
 800618a:	b92a      	cbnz	r2, 8006198 <_realloc_r+0x24>
 800618c:	f7ff f8f8 	bl	8005380 <_free_r>
 8006190:	4625      	mov	r5, r4
 8006192:	4628      	mov	r0, r5
 8006194:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006198:	f000 f841 	bl	800621e <_malloc_usable_size_r>
 800619c:	4284      	cmp	r4, r0
 800619e:	4606      	mov	r6, r0
 80061a0:	d802      	bhi.n	80061a8 <_realloc_r+0x34>
 80061a2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80061a6:	d8f4      	bhi.n	8006192 <_realloc_r+0x1e>
 80061a8:	4621      	mov	r1, r4
 80061aa:	4638      	mov	r0, r7
 80061ac:	f7ff f95c 	bl	8005468 <_malloc_r>
 80061b0:	4680      	mov	r8, r0
 80061b2:	b908      	cbnz	r0, 80061b8 <_realloc_r+0x44>
 80061b4:	4645      	mov	r5, r8
 80061b6:	e7ec      	b.n	8006192 <_realloc_r+0x1e>
 80061b8:	42b4      	cmp	r4, r6
 80061ba:	4622      	mov	r2, r4
 80061bc:	4629      	mov	r1, r5
 80061be:	bf28      	it	cs
 80061c0:	4632      	movcs	r2, r6
 80061c2:	f7ff ff85 	bl	80060d0 <memcpy>
 80061c6:	4629      	mov	r1, r5
 80061c8:	4638      	mov	r0, r7
 80061ca:	f7ff f8d9 	bl	8005380 <_free_r>
 80061ce:	e7f1      	b.n	80061b4 <_realloc_r+0x40>

080061d0 <__ascii_wctomb>:
 80061d0:	4603      	mov	r3, r0
 80061d2:	4608      	mov	r0, r1
 80061d4:	b141      	cbz	r1, 80061e8 <__ascii_wctomb+0x18>
 80061d6:	2aff      	cmp	r2, #255	@ 0xff
 80061d8:	d904      	bls.n	80061e4 <__ascii_wctomb+0x14>
 80061da:	228a      	movs	r2, #138	@ 0x8a
 80061dc:	601a      	str	r2, [r3, #0]
 80061de:	f04f 30ff 	mov.w	r0, #4294967295
 80061e2:	4770      	bx	lr
 80061e4:	700a      	strb	r2, [r1, #0]
 80061e6:	2001      	movs	r0, #1
 80061e8:	4770      	bx	lr
	...

080061ec <fiprintf>:
 80061ec:	b40e      	push	{r1, r2, r3}
 80061ee:	b503      	push	{r0, r1, lr}
 80061f0:	4601      	mov	r1, r0
 80061f2:	ab03      	add	r3, sp, #12
 80061f4:	4805      	ldr	r0, [pc, #20]	@ (800620c <fiprintf+0x20>)
 80061f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80061fa:	6800      	ldr	r0, [r0, #0]
 80061fc:	9301      	str	r3, [sp, #4]
 80061fe:	f000 f83f 	bl	8006280 <_vfiprintf_r>
 8006202:	b002      	add	sp, #8
 8006204:	f85d eb04 	ldr.w	lr, [sp], #4
 8006208:	b003      	add	sp, #12
 800620a:	4770      	bx	lr
 800620c:	20000018 	.word	0x20000018

08006210 <abort>:
 8006210:	b508      	push	{r3, lr}
 8006212:	2006      	movs	r0, #6
 8006214:	f000 fa08 	bl	8006628 <raise>
 8006218:	2001      	movs	r0, #1
 800621a:	f000 ffb1 	bl	8007180 <_exit>

0800621e <_malloc_usable_size_r>:
 800621e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006222:	1f18      	subs	r0, r3, #4
 8006224:	2b00      	cmp	r3, #0
 8006226:	bfbc      	itt	lt
 8006228:	580b      	ldrlt	r3, [r1, r0]
 800622a:	18c0      	addlt	r0, r0, r3
 800622c:	4770      	bx	lr

0800622e <__sfputc_r>:
 800622e:	6893      	ldr	r3, [r2, #8]
 8006230:	3b01      	subs	r3, #1
 8006232:	2b00      	cmp	r3, #0
 8006234:	b410      	push	{r4}
 8006236:	6093      	str	r3, [r2, #8]
 8006238:	da08      	bge.n	800624c <__sfputc_r+0x1e>
 800623a:	6994      	ldr	r4, [r2, #24]
 800623c:	42a3      	cmp	r3, r4
 800623e:	db01      	blt.n	8006244 <__sfputc_r+0x16>
 8006240:	290a      	cmp	r1, #10
 8006242:	d103      	bne.n	800624c <__sfputc_r+0x1e>
 8006244:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006248:	f000 b932 	b.w	80064b0 <__swbuf_r>
 800624c:	6813      	ldr	r3, [r2, #0]
 800624e:	1c58      	adds	r0, r3, #1
 8006250:	6010      	str	r0, [r2, #0]
 8006252:	7019      	strb	r1, [r3, #0]
 8006254:	4608      	mov	r0, r1
 8006256:	f85d 4b04 	ldr.w	r4, [sp], #4
 800625a:	4770      	bx	lr

0800625c <__sfputs_r>:
 800625c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800625e:	4606      	mov	r6, r0
 8006260:	460f      	mov	r7, r1
 8006262:	4614      	mov	r4, r2
 8006264:	18d5      	adds	r5, r2, r3
 8006266:	42ac      	cmp	r4, r5
 8006268:	d101      	bne.n	800626e <__sfputs_r+0x12>
 800626a:	2000      	movs	r0, #0
 800626c:	e007      	b.n	800627e <__sfputs_r+0x22>
 800626e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006272:	463a      	mov	r2, r7
 8006274:	4630      	mov	r0, r6
 8006276:	f7ff ffda 	bl	800622e <__sfputc_r>
 800627a:	1c43      	adds	r3, r0, #1
 800627c:	d1f3      	bne.n	8006266 <__sfputs_r+0xa>
 800627e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006280 <_vfiprintf_r>:
 8006280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006284:	460d      	mov	r5, r1
 8006286:	b09d      	sub	sp, #116	@ 0x74
 8006288:	4614      	mov	r4, r2
 800628a:	4698      	mov	r8, r3
 800628c:	4606      	mov	r6, r0
 800628e:	b118      	cbz	r0, 8006298 <_vfiprintf_r+0x18>
 8006290:	6a03      	ldr	r3, [r0, #32]
 8006292:	b90b      	cbnz	r3, 8006298 <_vfiprintf_r+0x18>
 8006294:	f7fe f8ea 	bl	800446c <__sinit>
 8006298:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800629a:	07d9      	lsls	r1, r3, #31
 800629c:	d405      	bmi.n	80062aa <_vfiprintf_r+0x2a>
 800629e:	89ab      	ldrh	r3, [r5, #12]
 80062a0:	059a      	lsls	r2, r3, #22
 80062a2:	d402      	bmi.n	80062aa <_vfiprintf_r+0x2a>
 80062a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80062a6:	f7fe fa0e 	bl	80046c6 <__retarget_lock_acquire_recursive>
 80062aa:	89ab      	ldrh	r3, [r5, #12]
 80062ac:	071b      	lsls	r3, r3, #28
 80062ae:	d501      	bpl.n	80062b4 <_vfiprintf_r+0x34>
 80062b0:	692b      	ldr	r3, [r5, #16]
 80062b2:	b99b      	cbnz	r3, 80062dc <_vfiprintf_r+0x5c>
 80062b4:	4629      	mov	r1, r5
 80062b6:	4630      	mov	r0, r6
 80062b8:	f000 f938 	bl	800652c <__swsetup_r>
 80062bc:	b170      	cbz	r0, 80062dc <_vfiprintf_r+0x5c>
 80062be:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80062c0:	07dc      	lsls	r4, r3, #31
 80062c2:	d504      	bpl.n	80062ce <_vfiprintf_r+0x4e>
 80062c4:	f04f 30ff 	mov.w	r0, #4294967295
 80062c8:	b01d      	add	sp, #116	@ 0x74
 80062ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062ce:	89ab      	ldrh	r3, [r5, #12]
 80062d0:	0598      	lsls	r0, r3, #22
 80062d2:	d4f7      	bmi.n	80062c4 <_vfiprintf_r+0x44>
 80062d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80062d6:	f7fe f9f7 	bl	80046c8 <__retarget_lock_release_recursive>
 80062da:	e7f3      	b.n	80062c4 <_vfiprintf_r+0x44>
 80062dc:	2300      	movs	r3, #0
 80062de:	9309      	str	r3, [sp, #36]	@ 0x24
 80062e0:	2320      	movs	r3, #32
 80062e2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80062e6:	f8cd 800c 	str.w	r8, [sp, #12]
 80062ea:	2330      	movs	r3, #48	@ 0x30
 80062ec:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800649c <_vfiprintf_r+0x21c>
 80062f0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80062f4:	f04f 0901 	mov.w	r9, #1
 80062f8:	4623      	mov	r3, r4
 80062fa:	469a      	mov	sl, r3
 80062fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006300:	b10a      	cbz	r2, 8006306 <_vfiprintf_r+0x86>
 8006302:	2a25      	cmp	r2, #37	@ 0x25
 8006304:	d1f9      	bne.n	80062fa <_vfiprintf_r+0x7a>
 8006306:	ebba 0b04 	subs.w	fp, sl, r4
 800630a:	d00b      	beq.n	8006324 <_vfiprintf_r+0xa4>
 800630c:	465b      	mov	r3, fp
 800630e:	4622      	mov	r2, r4
 8006310:	4629      	mov	r1, r5
 8006312:	4630      	mov	r0, r6
 8006314:	f7ff ffa2 	bl	800625c <__sfputs_r>
 8006318:	3001      	adds	r0, #1
 800631a:	f000 80a7 	beq.w	800646c <_vfiprintf_r+0x1ec>
 800631e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006320:	445a      	add	r2, fp
 8006322:	9209      	str	r2, [sp, #36]	@ 0x24
 8006324:	f89a 3000 	ldrb.w	r3, [sl]
 8006328:	2b00      	cmp	r3, #0
 800632a:	f000 809f 	beq.w	800646c <_vfiprintf_r+0x1ec>
 800632e:	2300      	movs	r3, #0
 8006330:	f04f 32ff 	mov.w	r2, #4294967295
 8006334:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006338:	f10a 0a01 	add.w	sl, sl, #1
 800633c:	9304      	str	r3, [sp, #16]
 800633e:	9307      	str	r3, [sp, #28]
 8006340:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006344:	931a      	str	r3, [sp, #104]	@ 0x68
 8006346:	4654      	mov	r4, sl
 8006348:	2205      	movs	r2, #5
 800634a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800634e:	4853      	ldr	r0, [pc, #332]	@ (800649c <_vfiprintf_r+0x21c>)
 8006350:	f7f9 ff46 	bl	80001e0 <memchr>
 8006354:	9a04      	ldr	r2, [sp, #16]
 8006356:	b9d8      	cbnz	r0, 8006390 <_vfiprintf_r+0x110>
 8006358:	06d1      	lsls	r1, r2, #27
 800635a:	bf44      	itt	mi
 800635c:	2320      	movmi	r3, #32
 800635e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006362:	0713      	lsls	r3, r2, #28
 8006364:	bf44      	itt	mi
 8006366:	232b      	movmi	r3, #43	@ 0x2b
 8006368:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800636c:	f89a 3000 	ldrb.w	r3, [sl]
 8006370:	2b2a      	cmp	r3, #42	@ 0x2a
 8006372:	d015      	beq.n	80063a0 <_vfiprintf_r+0x120>
 8006374:	9a07      	ldr	r2, [sp, #28]
 8006376:	4654      	mov	r4, sl
 8006378:	2000      	movs	r0, #0
 800637a:	f04f 0c0a 	mov.w	ip, #10
 800637e:	4621      	mov	r1, r4
 8006380:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006384:	3b30      	subs	r3, #48	@ 0x30
 8006386:	2b09      	cmp	r3, #9
 8006388:	d94b      	bls.n	8006422 <_vfiprintf_r+0x1a2>
 800638a:	b1b0      	cbz	r0, 80063ba <_vfiprintf_r+0x13a>
 800638c:	9207      	str	r2, [sp, #28]
 800638e:	e014      	b.n	80063ba <_vfiprintf_r+0x13a>
 8006390:	eba0 0308 	sub.w	r3, r0, r8
 8006394:	fa09 f303 	lsl.w	r3, r9, r3
 8006398:	4313      	orrs	r3, r2
 800639a:	9304      	str	r3, [sp, #16]
 800639c:	46a2      	mov	sl, r4
 800639e:	e7d2      	b.n	8006346 <_vfiprintf_r+0xc6>
 80063a0:	9b03      	ldr	r3, [sp, #12]
 80063a2:	1d19      	adds	r1, r3, #4
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	9103      	str	r1, [sp, #12]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	bfbb      	ittet	lt
 80063ac:	425b      	neglt	r3, r3
 80063ae:	f042 0202 	orrlt.w	r2, r2, #2
 80063b2:	9307      	strge	r3, [sp, #28]
 80063b4:	9307      	strlt	r3, [sp, #28]
 80063b6:	bfb8      	it	lt
 80063b8:	9204      	strlt	r2, [sp, #16]
 80063ba:	7823      	ldrb	r3, [r4, #0]
 80063bc:	2b2e      	cmp	r3, #46	@ 0x2e
 80063be:	d10a      	bne.n	80063d6 <_vfiprintf_r+0x156>
 80063c0:	7863      	ldrb	r3, [r4, #1]
 80063c2:	2b2a      	cmp	r3, #42	@ 0x2a
 80063c4:	d132      	bne.n	800642c <_vfiprintf_r+0x1ac>
 80063c6:	9b03      	ldr	r3, [sp, #12]
 80063c8:	1d1a      	adds	r2, r3, #4
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	9203      	str	r2, [sp, #12]
 80063ce:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80063d2:	3402      	adds	r4, #2
 80063d4:	9305      	str	r3, [sp, #20]
 80063d6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80064ac <_vfiprintf_r+0x22c>
 80063da:	7821      	ldrb	r1, [r4, #0]
 80063dc:	2203      	movs	r2, #3
 80063de:	4650      	mov	r0, sl
 80063e0:	f7f9 fefe 	bl	80001e0 <memchr>
 80063e4:	b138      	cbz	r0, 80063f6 <_vfiprintf_r+0x176>
 80063e6:	9b04      	ldr	r3, [sp, #16]
 80063e8:	eba0 000a 	sub.w	r0, r0, sl
 80063ec:	2240      	movs	r2, #64	@ 0x40
 80063ee:	4082      	lsls	r2, r0
 80063f0:	4313      	orrs	r3, r2
 80063f2:	3401      	adds	r4, #1
 80063f4:	9304      	str	r3, [sp, #16]
 80063f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80063fa:	4829      	ldr	r0, [pc, #164]	@ (80064a0 <_vfiprintf_r+0x220>)
 80063fc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006400:	2206      	movs	r2, #6
 8006402:	f7f9 feed 	bl	80001e0 <memchr>
 8006406:	2800      	cmp	r0, #0
 8006408:	d03f      	beq.n	800648a <_vfiprintf_r+0x20a>
 800640a:	4b26      	ldr	r3, [pc, #152]	@ (80064a4 <_vfiprintf_r+0x224>)
 800640c:	bb1b      	cbnz	r3, 8006456 <_vfiprintf_r+0x1d6>
 800640e:	9b03      	ldr	r3, [sp, #12]
 8006410:	3307      	adds	r3, #7
 8006412:	f023 0307 	bic.w	r3, r3, #7
 8006416:	3308      	adds	r3, #8
 8006418:	9303      	str	r3, [sp, #12]
 800641a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800641c:	443b      	add	r3, r7
 800641e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006420:	e76a      	b.n	80062f8 <_vfiprintf_r+0x78>
 8006422:	fb0c 3202 	mla	r2, ip, r2, r3
 8006426:	460c      	mov	r4, r1
 8006428:	2001      	movs	r0, #1
 800642a:	e7a8      	b.n	800637e <_vfiprintf_r+0xfe>
 800642c:	2300      	movs	r3, #0
 800642e:	3401      	adds	r4, #1
 8006430:	9305      	str	r3, [sp, #20]
 8006432:	4619      	mov	r1, r3
 8006434:	f04f 0c0a 	mov.w	ip, #10
 8006438:	4620      	mov	r0, r4
 800643a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800643e:	3a30      	subs	r2, #48	@ 0x30
 8006440:	2a09      	cmp	r2, #9
 8006442:	d903      	bls.n	800644c <_vfiprintf_r+0x1cc>
 8006444:	2b00      	cmp	r3, #0
 8006446:	d0c6      	beq.n	80063d6 <_vfiprintf_r+0x156>
 8006448:	9105      	str	r1, [sp, #20]
 800644a:	e7c4      	b.n	80063d6 <_vfiprintf_r+0x156>
 800644c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006450:	4604      	mov	r4, r0
 8006452:	2301      	movs	r3, #1
 8006454:	e7f0      	b.n	8006438 <_vfiprintf_r+0x1b8>
 8006456:	ab03      	add	r3, sp, #12
 8006458:	9300      	str	r3, [sp, #0]
 800645a:	462a      	mov	r2, r5
 800645c:	4b12      	ldr	r3, [pc, #72]	@ (80064a8 <_vfiprintf_r+0x228>)
 800645e:	a904      	add	r1, sp, #16
 8006460:	4630      	mov	r0, r6
 8006462:	f7fd fbc1 	bl	8003be8 <_printf_float>
 8006466:	4607      	mov	r7, r0
 8006468:	1c78      	adds	r0, r7, #1
 800646a:	d1d6      	bne.n	800641a <_vfiprintf_r+0x19a>
 800646c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800646e:	07d9      	lsls	r1, r3, #31
 8006470:	d405      	bmi.n	800647e <_vfiprintf_r+0x1fe>
 8006472:	89ab      	ldrh	r3, [r5, #12]
 8006474:	059a      	lsls	r2, r3, #22
 8006476:	d402      	bmi.n	800647e <_vfiprintf_r+0x1fe>
 8006478:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800647a:	f7fe f925 	bl	80046c8 <__retarget_lock_release_recursive>
 800647e:	89ab      	ldrh	r3, [r5, #12]
 8006480:	065b      	lsls	r3, r3, #25
 8006482:	f53f af1f 	bmi.w	80062c4 <_vfiprintf_r+0x44>
 8006486:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006488:	e71e      	b.n	80062c8 <_vfiprintf_r+0x48>
 800648a:	ab03      	add	r3, sp, #12
 800648c:	9300      	str	r3, [sp, #0]
 800648e:	462a      	mov	r2, r5
 8006490:	4b05      	ldr	r3, [pc, #20]	@ (80064a8 <_vfiprintf_r+0x228>)
 8006492:	a904      	add	r1, sp, #16
 8006494:	4630      	mov	r0, r6
 8006496:	f7fd fe3f 	bl	8004118 <_printf_i>
 800649a:	e7e4      	b.n	8006466 <_vfiprintf_r+0x1e6>
 800649c:	0800734f 	.word	0x0800734f
 80064a0:	08007359 	.word	0x08007359
 80064a4:	08003be9 	.word	0x08003be9
 80064a8:	0800625d 	.word	0x0800625d
 80064ac:	08007355 	.word	0x08007355

080064b0 <__swbuf_r>:
 80064b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064b2:	460e      	mov	r6, r1
 80064b4:	4614      	mov	r4, r2
 80064b6:	4605      	mov	r5, r0
 80064b8:	b118      	cbz	r0, 80064c2 <__swbuf_r+0x12>
 80064ba:	6a03      	ldr	r3, [r0, #32]
 80064bc:	b90b      	cbnz	r3, 80064c2 <__swbuf_r+0x12>
 80064be:	f7fd ffd5 	bl	800446c <__sinit>
 80064c2:	69a3      	ldr	r3, [r4, #24]
 80064c4:	60a3      	str	r3, [r4, #8]
 80064c6:	89a3      	ldrh	r3, [r4, #12]
 80064c8:	071a      	lsls	r2, r3, #28
 80064ca:	d501      	bpl.n	80064d0 <__swbuf_r+0x20>
 80064cc:	6923      	ldr	r3, [r4, #16]
 80064ce:	b943      	cbnz	r3, 80064e2 <__swbuf_r+0x32>
 80064d0:	4621      	mov	r1, r4
 80064d2:	4628      	mov	r0, r5
 80064d4:	f000 f82a 	bl	800652c <__swsetup_r>
 80064d8:	b118      	cbz	r0, 80064e2 <__swbuf_r+0x32>
 80064da:	f04f 37ff 	mov.w	r7, #4294967295
 80064de:	4638      	mov	r0, r7
 80064e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80064e2:	6823      	ldr	r3, [r4, #0]
 80064e4:	6922      	ldr	r2, [r4, #16]
 80064e6:	1a98      	subs	r0, r3, r2
 80064e8:	6963      	ldr	r3, [r4, #20]
 80064ea:	b2f6      	uxtb	r6, r6
 80064ec:	4283      	cmp	r3, r0
 80064ee:	4637      	mov	r7, r6
 80064f0:	dc05      	bgt.n	80064fe <__swbuf_r+0x4e>
 80064f2:	4621      	mov	r1, r4
 80064f4:	4628      	mov	r0, r5
 80064f6:	f7ff fd99 	bl	800602c <_fflush_r>
 80064fa:	2800      	cmp	r0, #0
 80064fc:	d1ed      	bne.n	80064da <__swbuf_r+0x2a>
 80064fe:	68a3      	ldr	r3, [r4, #8]
 8006500:	3b01      	subs	r3, #1
 8006502:	60a3      	str	r3, [r4, #8]
 8006504:	6823      	ldr	r3, [r4, #0]
 8006506:	1c5a      	adds	r2, r3, #1
 8006508:	6022      	str	r2, [r4, #0]
 800650a:	701e      	strb	r6, [r3, #0]
 800650c:	6962      	ldr	r2, [r4, #20]
 800650e:	1c43      	adds	r3, r0, #1
 8006510:	429a      	cmp	r2, r3
 8006512:	d004      	beq.n	800651e <__swbuf_r+0x6e>
 8006514:	89a3      	ldrh	r3, [r4, #12]
 8006516:	07db      	lsls	r3, r3, #31
 8006518:	d5e1      	bpl.n	80064de <__swbuf_r+0x2e>
 800651a:	2e0a      	cmp	r6, #10
 800651c:	d1df      	bne.n	80064de <__swbuf_r+0x2e>
 800651e:	4621      	mov	r1, r4
 8006520:	4628      	mov	r0, r5
 8006522:	f7ff fd83 	bl	800602c <_fflush_r>
 8006526:	2800      	cmp	r0, #0
 8006528:	d0d9      	beq.n	80064de <__swbuf_r+0x2e>
 800652a:	e7d6      	b.n	80064da <__swbuf_r+0x2a>

0800652c <__swsetup_r>:
 800652c:	b538      	push	{r3, r4, r5, lr}
 800652e:	4b29      	ldr	r3, [pc, #164]	@ (80065d4 <__swsetup_r+0xa8>)
 8006530:	4605      	mov	r5, r0
 8006532:	6818      	ldr	r0, [r3, #0]
 8006534:	460c      	mov	r4, r1
 8006536:	b118      	cbz	r0, 8006540 <__swsetup_r+0x14>
 8006538:	6a03      	ldr	r3, [r0, #32]
 800653a:	b90b      	cbnz	r3, 8006540 <__swsetup_r+0x14>
 800653c:	f7fd ff96 	bl	800446c <__sinit>
 8006540:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006544:	0719      	lsls	r1, r3, #28
 8006546:	d422      	bmi.n	800658e <__swsetup_r+0x62>
 8006548:	06da      	lsls	r2, r3, #27
 800654a:	d407      	bmi.n	800655c <__swsetup_r+0x30>
 800654c:	2209      	movs	r2, #9
 800654e:	602a      	str	r2, [r5, #0]
 8006550:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006554:	81a3      	strh	r3, [r4, #12]
 8006556:	f04f 30ff 	mov.w	r0, #4294967295
 800655a:	e033      	b.n	80065c4 <__swsetup_r+0x98>
 800655c:	0758      	lsls	r0, r3, #29
 800655e:	d512      	bpl.n	8006586 <__swsetup_r+0x5a>
 8006560:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006562:	b141      	cbz	r1, 8006576 <__swsetup_r+0x4a>
 8006564:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006568:	4299      	cmp	r1, r3
 800656a:	d002      	beq.n	8006572 <__swsetup_r+0x46>
 800656c:	4628      	mov	r0, r5
 800656e:	f7fe ff07 	bl	8005380 <_free_r>
 8006572:	2300      	movs	r3, #0
 8006574:	6363      	str	r3, [r4, #52]	@ 0x34
 8006576:	89a3      	ldrh	r3, [r4, #12]
 8006578:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800657c:	81a3      	strh	r3, [r4, #12]
 800657e:	2300      	movs	r3, #0
 8006580:	6063      	str	r3, [r4, #4]
 8006582:	6923      	ldr	r3, [r4, #16]
 8006584:	6023      	str	r3, [r4, #0]
 8006586:	89a3      	ldrh	r3, [r4, #12]
 8006588:	f043 0308 	orr.w	r3, r3, #8
 800658c:	81a3      	strh	r3, [r4, #12]
 800658e:	6923      	ldr	r3, [r4, #16]
 8006590:	b94b      	cbnz	r3, 80065a6 <__swsetup_r+0x7a>
 8006592:	89a3      	ldrh	r3, [r4, #12]
 8006594:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006598:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800659c:	d003      	beq.n	80065a6 <__swsetup_r+0x7a>
 800659e:	4621      	mov	r1, r4
 80065a0:	4628      	mov	r0, r5
 80065a2:	f000 f883 	bl	80066ac <__smakebuf_r>
 80065a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80065aa:	f013 0201 	ands.w	r2, r3, #1
 80065ae:	d00a      	beq.n	80065c6 <__swsetup_r+0x9a>
 80065b0:	2200      	movs	r2, #0
 80065b2:	60a2      	str	r2, [r4, #8]
 80065b4:	6962      	ldr	r2, [r4, #20]
 80065b6:	4252      	negs	r2, r2
 80065b8:	61a2      	str	r2, [r4, #24]
 80065ba:	6922      	ldr	r2, [r4, #16]
 80065bc:	b942      	cbnz	r2, 80065d0 <__swsetup_r+0xa4>
 80065be:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80065c2:	d1c5      	bne.n	8006550 <__swsetup_r+0x24>
 80065c4:	bd38      	pop	{r3, r4, r5, pc}
 80065c6:	0799      	lsls	r1, r3, #30
 80065c8:	bf58      	it	pl
 80065ca:	6962      	ldrpl	r2, [r4, #20]
 80065cc:	60a2      	str	r2, [r4, #8]
 80065ce:	e7f4      	b.n	80065ba <__swsetup_r+0x8e>
 80065d0:	2000      	movs	r0, #0
 80065d2:	e7f7      	b.n	80065c4 <__swsetup_r+0x98>
 80065d4:	20000018 	.word	0x20000018

080065d8 <_raise_r>:
 80065d8:	291f      	cmp	r1, #31
 80065da:	b538      	push	{r3, r4, r5, lr}
 80065dc:	4605      	mov	r5, r0
 80065de:	460c      	mov	r4, r1
 80065e0:	d904      	bls.n	80065ec <_raise_r+0x14>
 80065e2:	2316      	movs	r3, #22
 80065e4:	6003      	str	r3, [r0, #0]
 80065e6:	f04f 30ff 	mov.w	r0, #4294967295
 80065ea:	bd38      	pop	{r3, r4, r5, pc}
 80065ec:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80065ee:	b112      	cbz	r2, 80065f6 <_raise_r+0x1e>
 80065f0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80065f4:	b94b      	cbnz	r3, 800660a <_raise_r+0x32>
 80065f6:	4628      	mov	r0, r5
 80065f8:	f000 f830 	bl	800665c <_getpid_r>
 80065fc:	4622      	mov	r2, r4
 80065fe:	4601      	mov	r1, r0
 8006600:	4628      	mov	r0, r5
 8006602:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006606:	f000 b817 	b.w	8006638 <_kill_r>
 800660a:	2b01      	cmp	r3, #1
 800660c:	d00a      	beq.n	8006624 <_raise_r+0x4c>
 800660e:	1c59      	adds	r1, r3, #1
 8006610:	d103      	bne.n	800661a <_raise_r+0x42>
 8006612:	2316      	movs	r3, #22
 8006614:	6003      	str	r3, [r0, #0]
 8006616:	2001      	movs	r0, #1
 8006618:	e7e7      	b.n	80065ea <_raise_r+0x12>
 800661a:	2100      	movs	r1, #0
 800661c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8006620:	4620      	mov	r0, r4
 8006622:	4798      	blx	r3
 8006624:	2000      	movs	r0, #0
 8006626:	e7e0      	b.n	80065ea <_raise_r+0x12>

08006628 <raise>:
 8006628:	4b02      	ldr	r3, [pc, #8]	@ (8006634 <raise+0xc>)
 800662a:	4601      	mov	r1, r0
 800662c:	6818      	ldr	r0, [r3, #0]
 800662e:	f7ff bfd3 	b.w	80065d8 <_raise_r>
 8006632:	bf00      	nop
 8006634:	20000018 	.word	0x20000018

08006638 <_kill_r>:
 8006638:	b538      	push	{r3, r4, r5, lr}
 800663a:	4d07      	ldr	r5, [pc, #28]	@ (8006658 <_kill_r+0x20>)
 800663c:	2300      	movs	r3, #0
 800663e:	4604      	mov	r4, r0
 8006640:	4608      	mov	r0, r1
 8006642:	4611      	mov	r1, r2
 8006644:	602b      	str	r3, [r5, #0]
 8006646:	f000 fd93 	bl	8007170 <_kill>
 800664a:	1c43      	adds	r3, r0, #1
 800664c:	d102      	bne.n	8006654 <_kill_r+0x1c>
 800664e:	682b      	ldr	r3, [r5, #0]
 8006650:	b103      	cbz	r3, 8006654 <_kill_r+0x1c>
 8006652:	6023      	str	r3, [r4, #0]
 8006654:	bd38      	pop	{r3, r4, r5, pc}
 8006656:	bf00      	nop
 8006658:	20001ba8 	.word	0x20001ba8

0800665c <_getpid_r>:
 800665c:	f000 bd80 	b.w	8007160 <_getpid>

08006660 <__swhatbuf_r>:
 8006660:	b570      	push	{r4, r5, r6, lr}
 8006662:	460c      	mov	r4, r1
 8006664:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006668:	2900      	cmp	r1, #0
 800666a:	b096      	sub	sp, #88	@ 0x58
 800666c:	4615      	mov	r5, r2
 800666e:	461e      	mov	r6, r3
 8006670:	da0d      	bge.n	800668e <__swhatbuf_r+0x2e>
 8006672:	89a3      	ldrh	r3, [r4, #12]
 8006674:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006678:	f04f 0100 	mov.w	r1, #0
 800667c:	bf14      	ite	ne
 800667e:	2340      	movne	r3, #64	@ 0x40
 8006680:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006684:	2000      	movs	r0, #0
 8006686:	6031      	str	r1, [r6, #0]
 8006688:	602b      	str	r3, [r5, #0]
 800668a:	b016      	add	sp, #88	@ 0x58
 800668c:	bd70      	pop	{r4, r5, r6, pc}
 800668e:	466a      	mov	r2, sp
 8006690:	f000 f848 	bl	8006724 <_fstat_r>
 8006694:	2800      	cmp	r0, #0
 8006696:	dbec      	blt.n	8006672 <__swhatbuf_r+0x12>
 8006698:	9901      	ldr	r1, [sp, #4]
 800669a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800669e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80066a2:	4259      	negs	r1, r3
 80066a4:	4159      	adcs	r1, r3
 80066a6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80066aa:	e7eb      	b.n	8006684 <__swhatbuf_r+0x24>

080066ac <__smakebuf_r>:
 80066ac:	898b      	ldrh	r3, [r1, #12]
 80066ae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80066b0:	079d      	lsls	r5, r3, #30
 80066b2:	4606      	mov	r6, r0
 80066b4:	460c      	mov	r4, r1
 80066b6:	d507      	bpl.n	80066c8 <__smakebuf_r+0x1c>
 80066b8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80066bc:	6023      	str	r3, [r4, #0]
 80066be:	6123      	str	r3, [r4, #16]
 80066c0:	2301      	movs	r3, #1
 80066c2:	6163      	str	r3, [r4, #20]
 80066c4:	b003      	add	sp, #12
 80066c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80066c8:	ab01      	add	r3, sp, #4
 80066ca:	466a      	mov	r2, sp
 80066cc:	f7ff ffc8 	bl	8006660 <__swhatbuf_r>
 80066d0:	9f00      	ldr	r7, [sp, #0]
 80066d2:	4605      	mov	r5, r0
 80066d4:	4639      	mov	r1, r7
 80066d6:	4630      	mov	r0, r6
 80066d8:	f7fe fec6 	bl	8005468 <_malloc_r>
 80066dc:	b948      	cbnz	r0, 80066f2 <__smakebuf_r+0x46>
 80066de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80066e2:	059a      	lsls	r2, r3, #22
 80066e4:	d4ee      	bmi.n	80066c4 <__smakebuf_r+0x18>
 80066e6:	f023 0303 	bic.w	r3, r3, #3
 80066ea:	f043 0302 	orr.w	r3, r3, #2
 80066ee:	81a3      	strh	r3, [r4, #12]
 80066f0:	e7e2      	b.n	80066b8 <__smakebuf_r+0xc>
 80066f2:	89a3      	ldrh	r3, [r4, #12]
 80066f4:	6020      	str	r0, [r4, #0]
 80066f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80066fa:	81a3      	strh	r3, [r4, #12]
 80066fc:	9b01      	ldr	r3, [sp, #4]
 80066fe:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006702:	b15b      	cbz	r3, 800671c <__smakebuf_r+0x70>
 8006704:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006708:	4630      	mov	r0, r6
 800670a:	f000 f81d 	bl	8006748 <_isatty_r>
 800670e:	b128      	cbz	r0, 800671c <__smakebuf_r+0x70>
 8006710:	89a3      	ldrh	r3, [r4, #12]
 8006712:	f023 0303 	bic.w	r3, r3, #3
 8006716:	f043 0301 	orr.w	r3, r3, #1
 800671a:	81a3      	strh	r3, [r4, #12]
 800671c:	89a3      	ldrh	r3, [r4, #12]
 800671e:	431d      	orrs	r5, r3
 8006720:	81a5      	strh	r5, [r4, #12]
 8006722:	e7cf      	b.n	80066c4 <__smakebuf_r+0x18>

08006724 <_fstat_r>:
 8006724:	b538      	push	{r3, r4, r5, lr}
 8006726:	4d07      	ldr	r5, [pc, #28]	@ (8006744 <_fstat_r+0x20>)
 8006728:	2300      	movs	r3, #0
 800672a:	4604      	mov	r4, r0
 800672c:	4608      	mov	r0, r1
 800672e:	4611      	mov	r1, r2
 8006730:	602b      	str	r3, [r5, #0]
 8006732:	f7fb fc1e 	bl	8001f72 <_fstat>
 8006736:	1c43      	adds	r3, r0, #1
 8006738:	d102      	bne.n	8006740 <_fstat_r+0x1c>
 800673a:	682b      	ldr	r3, [r5, #0]
 800673c:	b103      	cbz	r3, 8006740 <_fstat_r+0x1c>
 800673e:	6023      	str	r3, [r4, #0]
 8006740:	bd38      	pop	{r3, r4, r5, pc}
 8006742:	bf00      	nop
 8006744:	20001ba8 	.word	0x20001ba8

08006748 <_isatty_r>:
 8006748:	b538      	push	{r3, r4, r5, lr}
 800674a:	4d06      	ldr	r5, [pc, #24]	@ (8006764 <_isatty_r+0x1c>)
 800674c:	2300      	movs	r3, #0
 800674e:	4604      	mov	r4, r0
 8006750:	4608      	mov	r0, r1
 8006752:	602b      	str	r3, [r5, #0]
 8006754:	f7fb fc0f 	bl	8001f76 <_isatty>
 8006758:	1c43      	adds	r3, r0, #1
 800675a:	d102      	bne.n	8006762 <_isatty_r+0x1a>
 800675c:	682b      	ldr	r3, [r5, #0]
 800675e:	b103      	cbz	r3, 8006762 <_isatty_r+0x1a>
 8006760:	6023      	str	r3, [r4, #0]
 8006762:	bd38      	pop	{r3, r4, r5, pc}
 8006764:	20001ba8 	.word	0x20001ba8

08006768 <exp>:
 8006768:	b538      	push	{r3, r4, r5, lr}
 800676a:	ed2d 8b02 	vpush	{d8}
 800676e:	ec55 4b10 	vmov	r4, r5, d0
 8006772:	f000 fa69 	bl	8006c48 <__ieee754_exp>
 8006776:	eeb0 8a40 	vmov.f32	s16, s0
 800677a:	eef0 8a60 	vmov.f32	s17, s1
 800677e:	ec45 4b10 	vmov	d0, r4, r5
 8006782:	f000 f8f7 	bl	8006974 <finite>
 8006786:	b168      	cbz	r0, 80067a4 <exp+0x3c>
 8006788:	a317      	add	r3, pc, #92	@ (adr r3, 80067e8 <exp+0x80>)
 800678a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800678e:	4620      	mov	r0, r4
 8006790:	4629      	mov	r1, r5
 8006792:	f7fa f9c9 	bl	8000b28 <__aeabi_dcmpgt>
 8006796:	b160      	cbz	r0, 80067b2 <exp+0x4a>
 8006798:	f7fd ff6a 	bl	8004670 <__errno>
 800679c:	ed9f 8b0e 	vldr	d8, [pc, #56]	@ 80067d8 <exp+0x70>
 80067a0:	2322      	movs	r3, #34	@ 0x22
 80067a2:	6003      	str	r3, [r0, #0]
 80067a4:	eeb0 0a48 	vmov.f32	s0, s16
 80067a8:	eef0 0a68 	vmov.f32	s1, s17
 80067ac:	ecbd 8b02 	vpop	{d8}
 80067b0:	bd38      	pop	{r3, r4, r5, pc}
 80067b2:	a30f      	add	r3, pc, #60	@ (adr r3, 80067f0 <exp+0x88>)
 80067b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067b8:	4620      	mov	r0, r4
 80067ba:	4629      	mov	r1, r5
 80067bc:	f7fa f996 	bl	8000aec <__aeabi_dcmplt>
 80067c0:	2800      	cmp	r0, #0
 80067c2:	d0ef      	beq.n	80067a4 <exp+0x3c>
 80067c4:	f7fd ff54 	bl	8004670 <__errno>
 80067c8:	2322      	movs	r3, #34	@ 0x22
 80067ca:	ed9f 8b05 	vldr	d8, [pc, #20]	@ 80067e0 <exp+0x78>
 80067ce:	6003      	str	r3, [r0, #0]
 80067d0:	e7e8      	b.n	80067a4 <exp+0x3c>
 80067d2:	bf00      	nop
 80067d4:	f3af 8000 	nop.w
 80067d8:	00000000 	.word	0x00000000
 80067dc:	7ff00000 	.word	0x7ff00000
	...
 80067e8:	fefa39ef 	.word	0xfefa39ef
 80067ec:	40862e42 	.word	0x40862e42
 80067f0:	d52d3051 	.word	0xd52d3051
 80067f4:	c0874910 	.word	0xc0874910

080067f8 <expf>:
 80067f8:	b508      	push	{r3, lr}
 80067fa:	ed2d 8b02 	vpush	{d8}
 80067fe:	eef0 8a40 	vmov.f32	s17, s0
 8006802:	f000 fb9b 	bl	8006f3c <__ieee754_expf>
 8006806:	eeb0 8a40 	vmov.f32	s16, s0
 800680a:	eeb0 0a68 	vmov.f32	s0, s17
 800680e:	f000 f8bc 	bl	800698a <finitef>
 8006812:	b160      	cbz	r0, 800682e <expf+0x36>
 8006814:	eddf 7a0f 	vldr	s15, [pc, #60]	@ 8006854 <expf+0x5c>
 8006818:	eef4 8ae7 	vcmpe.f32	s17, s15
 800681c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006820:	dd0a      	ble.n	8006838 <expf+0x40>
 8006822:	f7fd ff25 	bl	8004670 <__errno>
 8006826:	ed9f 8a0c 	vldr	s16, [pc, #48]	@ 8006858 <expf+0x60>
 800682a:	2322      	movs	r3, #34	@ 0x22
 800682c:	6003      	str	r3, [r0, #0]
 800682e:	eeb0 0a48 	vmov.f32	s0, s16
 8006832:	ecbd 8b02 	vpop	{d8}
 8006836:	bd08      	pop	{r3, pc}
 8006838:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800685c <expf+0x64>
 800683c:	eef4 8ae7 	vcmpe.f32	s17, s15
 8006840:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006844:	d5f3      	bpl.n	800682e <expf+0x36>
 8006846:	f7fd ff13 	bl	8004670 <__errno>
 800684a:	2322      	movs	r3, #34	@ 0x22
 800684c:	ed9f 8a04 	vldr	s16, [pc, #16]	@ 8006860 <expf+0x68>
 8006850:	6003      	str	r3, [r0, #0]
 8006852:	e7ec      	b.n	800682e <expf+0x36>
 8006854:	42b17217 	.word	0x42b17217
 8006858:	7f800000 	.word	0x7f800000
 800685c:	c2cff1b5 	.word	0xc2cff1b5
 8006860:	00000000 	.word	0x00000000

08006864 <sqrtf>:
 8006864:	b508      	push	{r3, lr}
 8006866:	ed2d 8b02 	vpush	{d8}
 800686a:	eeb0 8a40 	vmov.f32	s16, s0
 800686e:	f000 f9e5 	bl	8006c3c <__ieee754_sqrtf>
 8006872:	eeb4 8a48 	vcmp.f32	s16, s16
 8006876:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800687a:	d60c      	bvs.n	8006896 <sqrtf+0x32>
 800687c:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800689c <sqrtf+0x38>
 8006880:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8006884:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006888:	d505      	bpl.n	8006896 <sqrtf+0x32>
 800688a:	f7fd fef1 	bl	8004670 <__errno>
 800688e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8006892:	2321      	movs	r3, #33	@ 0x21
 8006894:	6003      	str	r3, [r0, #0]
 8006896:	ecbd 8b02 	vpop	{d8}
 800689a:	bd08      	pop	{r3, pc}
 800689c:	00000000 	.word	0x00000000

080068a0 <tanhf>:
 80068a0:	b538      	push	{r3, r4, r5, lr}
 80068a2:	ee10 5a10 	vmov	r5, s0
 80068a6:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 80068aa:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80068ae:	ed2d 8b02 	vpush	{d8}
 80068b2:	eef0 7a40 	vmov.f32	s15, s0
 80068b6:	d30f      	bcc.n	80068d8 <tanhf+0x38>
 80068b8:	4b2a      	ldr	r3, [pc, #168]	@ (8006964 <tanhf+0xc4>)
 80068ba:	edd3 6a00 	vldr	s13, [r3]
 80068be:	ed93 7a00 	vldr	s14, [r3]
 80068c2:	ee86 0aa7 	vdiv.f32	s0, s13, s15
 80068c6:	2d00      	cmp	r5, #0
 80068c8:	bfac      	ite	ge
 80068ca:	ee30 0a07 	vaddge.f32	s0, s0, s14
 80068ce:	ee30 0a47 	vsublt.f32	s0, s0, s14
 80068d2:	ecbd 8b02 	vpop	{d8}
 80068d6:	bd38      	pop	{r3, r4, r5, pc}
 80068d8:	4a23      	ldr	r2, [pc, #140]	@ (8006968 <tanhf+0xc8>)
 80068da:	4293      	cmp	r3, r2
 80068dc:	d839      	bhi.n	8006952 <tanhf+0xb2>
 80068de:	f1b3 5f10 	cmp.w	r3, #603979776	@ 0x24000000
 80068e2:	d207      	bcs.n	80068f4 <tanhf+0x54>
 80068e4:	4b1f      	ldr	r3, [pc, #124]	@ (8006964 <tanhf+0xc4>)
 80068e6:	ed93 0a00 	vldr	s0, [r3]
 80068ea:	ee30 0a27 	vadd.f32	s0, s0, s15
 80068ee:	ee20 0a27 	vmul.f32	s0, s0, s15
 80068f2:	e7ee      	b.n	80068d2 <tanhf+0x32>
 80068f4:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 80068f8:	4c1c      	ldr	r4, [pc, #112]	@ (800696c <tanhf+0xcc>)
 80068fa:	d319      	bcc.n	8006930 <tanhf+0x90>
 80068fc:	f000 fbec 	bl	80070d8 <fabsf>
 8006900:	edd4 7a00 	vldr	s15, [r4]
 8006904:	ee20 0a27 	vmul.f32	s0, s0, s15
 8006908:	f000 f84a 	bl	80069a0 <expm1f>
 800690c:	4b15      	ldr	r3, [pc, #84]	@ (8006964 <tanhf+0xc4>)
 800690e:	edd3 7a00 	vldr	s15, [r3]
 8006912:	ed94 6a00 	vldr	s12, [r4]
 8006916:	ed94 7a00 	vldr	s14, [r4]
 800691a:	ee37 7a00 	vadd.f32	s14, s14, s0
 800691e:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8006922:	ee37 0ae6 	vsub.f32	s0, s15, s13
 8006926:	2d00      	cmp	r5, #0
 8006928:	bfb8      	it	lt
 800692a:	eeb1 0a40 	vneglt.f32	s0, s0
 800692e:	e7d0      	b.n	80068d2 <tanhf+0x32>
 8006930:	ed94 8a00 	vldr	s16, [r4]
 8006934:	f000 fbd0 	bl	80070d8 <fabsf>
 8006938:	ee28 0a40 	vnmul.f32	s0, s16, s0
 800693c:	f000 f830 	bl	80069a0 <expm1f>
 8006940:	edd4 7a00 	vldr	s15, [r4]
 8006944:	ee77 7a80 	vadd.f32	s15, s15, s0
 8006948:	eeb1 7a40 	vneg.f32	s14, s0
 800694c:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8006950:	e7e9      	b.n	8006926 <tanhf+0x86>
 8006952:	4b04      	ldr	r3, [pc, #16]	@ (8006964 <tanhf+0xc4>)
 8006954:	ed93 0a00 	vldr	s0, [r3]
 8006958:	4b05      	ldr	r3, [pc, #20]	@ (8006970 <tanhf+0xd0>)
 800695a:	edd3 7a00 	vldr	s15, [r3]
 800695e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8006962:	e7e0      	b.n	8006926 <tanhf+0x86>
 8006964:	0803500c 	.word	0x0803500c
 8006968:	41afffff 	.word	0x41afffff
 800696c:	08035008 	.word	0x08035008
 8006970:	08035004 	.word	0x08035004

08006974 <finite>:
 8006974:	b082      	sub	sp, #8
 8006976:	ed8d 0b00 	vstr	d0, [sp]
 800697a:	9801      	ldr	r0, [sp, #4]
 800697c:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8006980:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8006984:	0fc0      	lsrs	r0, r0, #31
 8006986:	b002      	add	sp, #8
 8006988:	4770      	bx	lr

0800698a <finitef>:
 800698a:	ee10 3a10 	vmov	r3, s0
 800698e:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 8006992:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 8006996:	bfac      	ite	ge
 8006998:	2000      	movge	r0, #0
 800699a:	2001      	movlt	r0, #1
 800699c:	4770      	bx	lr
	...

080069a0 <expm1f>:
 80069a0:	ee10 3a10 	vmov	r3, s0
 80069a4:	4a83      	ldr	r2, [pc, #524]	@ (8006bb4 <expm1f+0x214>)
 80069a6:	f003 4000 	and.w	r0, r3, #2147483648	@ 0x80000000
 80069aa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d91f      	bls.n	80069f2 <expm1f+0x52>
 80069b2:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80069b6:	d902      	bls.n	80069be <expm1f+0x1e>
 80069b8:	ee30 0a00 	vadd.f32	s0, s0, s0
 80069bc:	4770      	bx	lr
 80069be:	d106      	bne.n	80069ce <expm1f+0x2e>
 80069c0:	2800      	cmp	r0, #0
 80069c2:	eeff 7a00 	vmov.f32	s15, #240	@ 0xbf800000 -1.0
 80069c6:	bf18      	it	ne
 80069c8:	eeb0 0a67 	vmovne.f32	s0, s15
 80069cc:	4770      	bx	lr
 80069ce:	b920      	cbnz	r0, 80069da <expm1f+0x3a>
 80069d0:	4a79      	ldr	r2, [pc, #484]	@ (8006bb8 <expm1f+0x218>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d963      	bls.n	8006a9e <expm1f+0xfe>
 80069d6:	f000 b92b 	b.w	8006c30 <__math_oflowf>
 80069da:	eddf 7a78 	vldr	s15, [pc, #480]	@ 8006bbc <expm1f+0x21c>
 80069de:	ee70 7a27 	vadd.f32	s15, s0, s15
 80069e2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80069e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80069ea:	d551      	bpl.n	8006a90 <expm1f+0xf0>
 80069ec:	eebf 0a00 	vmov.f32	s0, #240	@ 0xbf800000 -1.0
 80069f0:	4770      	bx	lr
 80069f2:	4a73      	ldr	r2, [pc, #460]	@ (8006bc0 <expm1f+0x220>)
 80069f4:	4293      	cmp	r3, r2
 80069f6:	d972      	bls.n	8006ade <expm1f+0x13e>
 80069f8:	4a72      	ldr	r2, [pc, #456]	@ (8006bc4 <expm1f+0x224>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d868      	bhi.n	8006ad0 <expm1f+0x130>
 80069fe:	ed9f 7a72 	vldr	s14, [pc, #456]	@ 8006bc8 <expm1f+0x228>
 8006a02:	2800      	cmp	r0, #0
 8006a04:	d13d      	bne.n	8006a82 <expm1f+0xe2>
 8006a06:	ee30 7a47 	vsub.f32	s14, s0, s14
 8006a0a:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8006bcc <expm1f+0x22c>
 8006a0e:	2301      	movs	r3, #1
 8006a10:	ee37 0a66 	vsub.f32	s0, s14, s13
 8006a14:	ee77 7a40 	vsub.f32	s15, s14, s0
 8006a18:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006a1c:	eef6 5a00 	vmov.f32	s11, #96	@ 0x3f000000  0.5
 8006a20:	ee20 4a25 	vmul.f32	s8, s0, s11
 8006a24:	ed9f 6a6a 	vldr	s12, [pc, #424]	@ 8006bd0 <expm1f+0x230>
 8006a28:	eddf 6a6a 	vldr	s13, [pc, #424]	@ 8006bd4 <expm1f+0x234>
 8006a2c:	ed9f 5a6a 	vldr	s10, [pc, #424]	@ 8006bd8 <expm1f+0x238>
 8006a30:	ee20 7a04 	vmul.f32	s14, s0, s8
 8006a34:	eef0 4a08 	vmov.f32	s9, #8	@ 0x40400000  3.0
 8006a38:	eee7 6a06 	vfma.f32	s13, s14, s12
 8006a3c:	ed9f 6a67 	vldr	s12, [pc, #412]	@ 8006bdc <expm1f+0x23c>
 8006a40:	eea6 6a87 	vfma.f32	s12, s13, s14
 8006a44:	eddf 6a66 	vldr	s13, [pc, #408]	@ 8006be0 <expm1f+0x240>
 8006a48:	eee6 6a07 	vfma.f32	s13, s12, s14
 8006a4c:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8006a50:	eea6 5a87 	vfma.f32	s10, s13, s14
 8006a54:	eef0 6a46 	vmov.f32	s13, s12
 8006a58:	eee5 6a07 	vfma.f32	s13, s10, s14
 8006a5c:	eee4 4a66 	vfms.f32	s9, s8, s13
 8006a60:	eeb1 4a08 	vmov.f32	s8, #24	@ 0x40c00000  6.0
 8006a64:	eea0 4a64 	vfms.f32	s8, s0, s9
 8006a68:	ee36 5ae4 	vsub.f32	s10, s13, s9
 8006a6c:	eec5 6a04 	vdiv.f32	s13, s10, s8
 8006a70:	ee66 6a87 	vmul.f32	s13, s13, s14
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d140      	bne.n	8006afa <expm1f+0x15a>
 8006a78:	ee90 7a26 	vfnms.f32	s14, s0, s13
 8006a7c:	ee30 0a47 	vsub.f32	s0, s0, s14
 8006a80:	4770      	bx	lr
 8006a82:	ee30 7a07 	vadd.f32	s14, s0, s14
 8006a86:	eddf 6a57 	vldr	s13, [pc, #348]	@ 8006be4 <expm1f+0x244>
 8006a8a:	f04f 33ff 	mov.w	r3, #4294967295
 8006a8e:	e7bf      	b.n	8006a10 <expm1f+0x70>
 8006a90:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 8006be8 <expm1f+0x248>
 8006a94:	ee20 7a07 	vmul.f32	s14, s0, s14
 8006a98:	eefe 7a00 	vmov.f32	s15, #224	@ 0xbf000000 -0.5
 8006a9c:	e005      	b.n	8006aaa <expm1f+0x10a>
 8006a9e:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 8006be8 <expm1f+0x248>
 8006aa2:	ee20 7a07 	vmul.f32	s14, s0, s14
 8006aa6:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8006aaa:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006aae:	eeb0 7a40 	vmov.f32	s14, s0
 8006ab2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006ab6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8006aba:	ee17 3a90 	vmov	r3, s15
 8006abe:	eddf 7a42 	vldr	s15, [pc, #264]	@ 8006bc8 <expm1f+0x228>
 8006ac2:	eea6 7ae7 	vfms.f32	s14, s13, s15
 8006ac6:	eddf 7a41 	vldr	s15, [pc, #260]	@ 8006bcc <expm1f+0x22c>
 8006aca:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8006ace:	e79f      	b.n	8006a10 <expm1f+0x70>
 8006ad0:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 8006be8 <expm1f+0x248>
 8006ad4:	ee20 7a07 	vmul.f32	s14, s0, s14
 8006ad8:	2800      	cmp	r0, #0
 8006ada:	d0e4      	beq.n	8006aa6 <expm1f+0x106>
 8006adc:	e7dc      	b.n	8006a98 <expm1f+0xf8>
 8006ade:	f1b3 5f4c 	cmp.w	r3, #855638016	@ 0x33000000
 8006ae2:	d208      	bcs.n	8006af6 <expm1f+0x156>
 8006ae4:	eddf 7a41 	vldr	s15, [pc, #260]	@ 8006bec <expm1f+0x24c>
 8006ae8:	ee70 7a27 	vadd.f32	s15, s0, s15
 8006aec:	ee77 7ae7 	vsub.f32	s15, s15, s15
 8006af0:	ee30 0a67 	vsub.f32	s0, s0, s15
 8006af4:	4770      	bx	lr
 8006af6:	2300      	movs	r3, #0
 8006af8:	e790      	b.n	8006a1c <expm1f+0x7c>
 8006afa:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8006afe:	1c5a      	adds	r2, r3, #1
 8006b00:	eed6 7a80 	vfnms.f32	s15, s13, s0
 8006b04:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006b08:	d106      	bne.n	8006b18 <expm1f+0x178>
 8006b0a:	ee70 7a67 	vsub.f32	s15, s0, s15
 8006b0e:	eebe 0a00 	vmov.f32	s0, #224	@ 0xbf000000 -0.5
 8006b12:	eea7 0aa5 	vfma.f32	s0, s15, s11
 8006b16:	4770      	bx	lr
 8006b18:	2b01      	cmp	r3, #1
 8006b1a:	d118      	bne.n	8006b4e <expm1f+0x1ae>
 8006b1c:	eebd 7a00 	vmov.f32	s14, #208	@ 0xbe800000 -0.250
 8006b20:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8006b24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b28:	bf5b      	ittet	pl
 8006b2a:	ee70 7a67 	vsubpl.f32	s15, s0, s15
 8006b2e:	eeb0 7a00 	vmovpl.f32	s14, #0	@ 0x40000000  2.0
 8006b32:	ee70 5a25 	vaddmi.f32	s11, s0, s11
 8006b36:	eea7 6a87 	vfmapl.f32	s12, s15, s14
 8006b3a:	bf43      	ittte	mi
 8006b3c:	ee77 7ae5 	vsubmi.f32	s15, s15, s11
 8006b40:	eeb8 0a00 	vmovmi.f32	s0, #128	@ 0xc0000000 -2.0
 8006b44:	ee27 0a80 	vmulmi.f32	s0, s15, s0
 8006b48:	eeb0 0a46 	vmovpl.f32	s0, s12
 8006b4c:	4770      	bx	lr
 8006b4e:	1c5a      	adds	r2, r3, #1
 8006b50:	2a39      	cmp	r2, #57	@ 0x39
 8006b52:	ea4f 51c3 	mov.w	r1, r3, lsl #23
 8006b56:	d90b      	bls.n	8006b70 <expm1f+0x1d0>
 8006b58:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8006b5c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8006b60:	ee17 3a90 	vmov	r3, s15
 8006b64:	4419      	add	r1, r3
 8006b66:	ee07 1a90 	vmov	s15, r1
 8006b6a:	ee37 0ac6 	vsub.f32	s0, s15, s12
 8006b6e:	4770      	bx	lr
 8006b70:	2b16      	cmp	r3, #22
 8006b72:	dc11      	bgt.n	8006b98 <expm1f+0x1f8>
 8006b74:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006b78:	fa42 f303 	asr.w	r3, r2, r3
 8006b7c:	f1c3 537e 	rsb	r3, r3, #1065353216	@ 0x3f800000
 8006b80:	ee07 3a10 	vmov	s14, r3
 8006b84:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8006b88:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006b8c:	ee17 3a90 	vmov	r3, s15
 8006b90:	440b      	add	r3, r1
 8006b92:	ee00 3a10 	vmov	s0, r3
 8006b96:	4770      	bx	lr
 8006b98:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 8006b9c:	05db      	lsls	r3, r3, #23
 8006b9e:	ee07 3a10 	vmov	s14, r3
 8006ba2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006ba6:	ee70 7a67 	vsub.f32	s15, s0, s15
 8006baa:	ee77 7a86 	vadd.f32	s15, s15, s12
 8006bae:	ee17 3a90 	vmov	r3, s15
 8006bb2:	e7ed      	b.n	8006b90 <expm1f+0x1f0>
 8006bb4:	4195b843 	.word	0x4195b843
 8006bb8:	42b17217 	.word	0x42b17217
 8006bbc:	0da24260 	.word	0x0da24260
 8006bc0:	3eb17218 	.word	0x3eb17218
 8006bc4:	3f851591 	.word	0x3f851591
 8006bc8:	3f317180 	.word	0x3f317180
 8006bcc:	3717f7d1 	.word	0x3717f7d1
 8006bd0:	b457edbb 	.word	0xb457edbb
 8006bd4:	36867e54 	.word	0x36867e54
 8006bd8:	bd088889 	.word	0xbd088889
 8006bdc:	b8a670cd 	.word	0xb8a670cd
 8006be0:	3ad00d01 	.word	0x3ad00d01
 8006be4:	b717f7d1 	.word	0xb717f7d1
 8006be8:	3fb8aa3b 	.word	0x3fb8aa3b
 8006bec:	7149f2ca 	.word	0x7149f2ca

08006bf0 <with_errnof>:
 8006bf0:	b510      	push	{r4, lr}
 8006bf2:	ed2d 8b02 	vpush	{d8}
 8006bf6:	eeb0 8a40 	vmov.f32	s16, s0
 8006bfa:	4604      	mov	r4, r0
 8006bfc:	f7fd fd38 	bl	8004670 <__errno>
 8006c00:	eeb0 0a48 	vmov.f32	s0, s16
 8006c04:	ecbd 8b02 	vpop	{d8}
 8006c08:	6004      	str	r4, [r0, #0]
 8006c0a:	bd10      	pop	{r4, pc}

08006c0c <xflowf>:
 8006c0c:	b130      	cbz	r0, 8006c1c <xflowf+0x10>
 8006c0e:	eef1 7a40 	vneg.f32	s15, s0
 8006c12:	ee27 0a80 	vmul.f32	s0, s15, s0
 8006c16:	2022      	movs	r0, #34	@ 0x22
 8006c18:	f7ff bfea 	b.w	8006bf0 <with_errnof>
 8006c1c:	eef0 7a40 	vmov.f32	s15, s0
 8006c20:	e7f7      	b.n	8006c12 <xflowf+0x6>
	...

08006c24 <__math_uflowf>:
 8006c24:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8006c2c <__math_uflowf+0x8>
 8006c28:	f7ff bff0 	b.w	8006c0c <xflowf>
 8006c2c:	10000000 	.word	0x10000000

08006c30 <__math_oflowf>:
 8006c30:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8006c38 <__math_oflowf+0x8>
 8006c34:	f7ff bfea 	b.w	8006c0c <xflowf>
 8006c38:	70000000 	.word	0x70000000

08006c3c <__ieee754_sqrtf>:
 8006c3c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8006c40:	4770      	bx	lr
 8006c42:	0000      	movs	r0, r0
 8006c44:	0000      	movs	r0, r0
	...

08006c48 <__ieee754_exp>:
 8006c48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006c4c:	ec55 4b10 	vmov	r4, r5, d0
 8006c50:	49b1      	ldr	r1, [pc, #708]	@ (8006f18 <__ieee754_exp+0x2d0>)
 8006c52:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8006c56:	428a      	cmp	r2, r1
 8006c58:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 8006c5c:	d936      	bls.n	8006ccc <__ieee754_exp+0x84>
 8006c5e:	49af      	ldr	r1, [pc, #700]	@ (8006f1c <__ieee754_exp+0x2d4>)
 8006c60:	428a      	cmp	r2, r1
 8006c62:	d914      	bls.n	8006c8e <__ieee754_exp+0x46>
 8006c64:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8006c68:	4323      	orrs	r3, r4
 8006c6a:	4622      	mov	r2, r4
 8006c6c:	d007      	beq.n	8006c7e <__ieee754_exp+0x36>
 8006c6e:	462b      	mov	r3, r5
 8006c70:	4620      	mov	r0, r4
 8006c72:	4629      	mov	r1, r5
 8006c74:	f7f9 fb12 	bl	800029c <__adddf3>
 8006c78:	4604      	mov	r4, r0
 8006c7a:	460d      	mov	r5, r1
 8006c7c:	e002      	b.n	8006c84 <__ieee754_exp+0x3c>
 8006c7e:	2e00      	cmp	r6, #0
 8006c80:	f040 8118 	bne.w	8006eb4 <__ieee754_exp+0x26c>
 8006c84:	ec45 4b10 	vmov	d0, r4, r5
 8006c88:	b004      	add	sp, #16
 8006c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c8e:	a38c      	add	r3, pc, #560	@ (adr r3, 8006ec0 <__ieee754_exp+0x278>)
 8006c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c94:	4620      	mov	r0, r4
 8006c96:	4629      	mov	r1, r5
 8006c98:	f7f9 ff46 	bl	8000b28 <__aeabi_dcmpgt>
 8006c9c:	4607      	mov	r7, r0
 8006c9e:	b128      	cbz	r0, 8006cac <__ieee754_exp+0x64>
 8006ca0:	2000      	movs	r0, #0
 8006ca2:	b004      	add	sp, #16
 8006ca4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ca8:	f000 ba52 	b.w	8007150 <__math_oflow>
 8006cac:	a386      	add	r3, pc, #536	@ (adr r3, 8006ec8 <__ieee754_exp+0x280>)
 8006cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cb2:	4620      	mov	r0, r4
 8006cb4:	4629      	mov	r1, r5
 8006cb6:	f7f9 ff19 	bl	8000aec <__aeabi_dcmplt>
 8006cba:	2800      	cmp	r0, #0
 8006cbc:	f000 8087 	beq.w	8006dce <__ieee754_exp+0x186>
 8006cc0:	4638      	mov	r0, r7
 8006cc2:	b004      	add	sp, #16
 8006cc4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006cc8:	f000 ba3a 	b.w	8007140 <__math_uflow>
 8006ccc:	4b94      	ldr	r3, [pc, #592]	@ (8006f20 <__ieee754_exp+0x2d8>)
 8006cce:	429a      	cmp	r2, r3
 8006cd0:	f240 80a9 	bls.w	8006e26 <__ieee754_exp+0x1de>
 8006cd4:	4b93      	ldr	r3, [pc, #588]	@ (8006f24 <__ieee754_exp+0x2dc>)
 8006cd6:	429a      	cmp	r2, r3
 8006cd8:	d879      	bhi.n	8006dce <__ieee754_exp+0x186>
 8006cda:	4b93      	ldr	r3, [pc, #588]	@ (8006f28 <__ieee754_exp+0x2e0>)
 8006cdc:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ce4:	4620      	mov	r0, r4
 8006ce6:	4629      	mov	r1, r5
 8006ce8:	f7f9 fad6 	bl	8000298 <__aeabi_dsub>
 8006cec:	4b8f      	ldr	r3, [pc, #572]	@ (8006f2c <__ieee754_exp+0x2e4>)
 8006cee:	00f7      	lsls	r7, r6, #3
 8006cf0:	443b      	add	r3, r7
 8006cf2:	ed93 7b00 	vldr	d7, [r3]
 8006cf6:	ed8d 7b00 	vstr	d7, [sp]
 8006cfa:	f086 0a01 	eor.w	sl, r6, #1
 8006cfe:	4680      	mov	r8, r0
 8006d00:	4689      	mov	r9, r1
 8006d02:	ebaa 0a06 	sub.w	sl, sl, r6
 8006d06:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006d0a:	4640      	mov	r0, r8
 8006d0c:	4649      	mov	r1, r9
 8006d0e:	f7f9 fac3 	bl	8000298 <__aeabi_dsub>
 8006d12:	4604      	mov	r4, r0
 8006d14:	460d      	mov	r5, r1
 8006d16:	4622      	mov	r2, r4
 8006d18:	462b      	mov	r3, r5
 8006d1a:	4620      	mov	r0, r4
 8006d1c:	4629      	mov	r1, r5
 8006d1e:	f7f9 fc73 	bl	8000608 <__aeabi_dmul>
 8006d22:	a36b      	add	r3, pc, #428	@ (adr r3, 8006ed0 <__ieee754_exp+0x288>)
 8006d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d28:	4606      	mov	r6, r0
 8006d2a:	460f      	mov	r7, r1
 8006d2c:	f7f9 fc6c 	bl	8000608 <__aeabi_dmul>
 8006d30:	a369      	add	r3, pc, #420	@ (adr r3, 8006ed8 <__ieee754_exp+0x290>)
 8006d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d36:	f7f9 faaf 	bl	8000298 <__aeabi_dsub>
 8006d3a:	4632      	mov	r2, r6
 8006d3c:	463b      	mov	r3, r7
 8006d3e:	f7f9 fc63 	bl	8000608 <__aeabi_dmul>
 8006d42:	a367      	add	r3, pc, #412	@ (adr r3, 8006ee0 <__ieee754_exp+0x298>)
 8006d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d48:	f7f9 faa8 	bl	800029c <__adddf3>
 8006d4c:	4632      	mov	r2, r6
 8006d4e:	463b      	mov	r3, r7
 8006d50:	f7f9 fc5a 	bl	8000608 <__aeabi_dmul>
 8006d54:	a364      	add	r3, pc, #400	@ (adr r3, 8006ee8 <__ieee754_exp+0x2a0>)
 8006d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d5a:	f7f9 fa9d 	bl	8000298 <__aeabi_dsub>
 8006d5e:	4632      	mov	r2, r6
 8006d60:	463b      	mov	r3, r7
 8006d62:	f7f9 fc51 	bl	8000608 <__aeabi_dmul>
 8006d66:	a362      	add	r3, pc, #392	@ (adr r3, 8006ef0 <__ieee754_exp+0x2a8>)
 8006d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d6c:	f7f9 fa96 	bl	800029c <__adddf3>
 8006d70:	4632      	mov	r2, r6
 8006d72:	463b      	mov	r3, r7
 8006d74:	f7f9 fc48 	bl	8000608 <__aeabi_dmul>
 8006d78:	4602      	mov	r2, r0
 8006d7a:	460b      	mov	r3, r1
 8006d7c:	4620      	mov	r0, r4
 8006d7e:	4629      	mov	r1, r5
 8006d80:	f7f9 fa8a 	bl	8000298 <__aeabi_dsub>
 8006d84:	4602      	mov	r2, r0
 8006d86:	460b      	mov	r3, r1
 8006d88:	4606      	mov	r6, r0
 8006d8a:	460f      	mov	r7, r1
 8006d8c:	4620      	mov	r0, r4
 8006d8e:	4629      	mov	r1, r5
 8006d90:	f7f9 fc3a 	bl	8000608 <__aeabi_dmul>
 8006d94:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006d98:	f1ba 0f00 	cmp.w	sl, #0
 8006d9c:	d15c      	bne.n	8006e58 <__ieee754_exp+0x210>
 8006d9e:	2200      	movs	r2, #0
 8006da0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8006da4:	4630      	mov	r0, r6
 8006da6:	4639      	mov	r1, r7
 8006da8:	f7f9 fa76 	bl	8000298 <__aeabi_dsub>
 8006dac:	4602      	mov	r2, r0
 8006dae:	460b      	mov	r3, r1
 8006db0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006db4:	f7f9 fd52 	bl	800085c <__aeabi_ddiv>
 8006db8:	4622      	mov	r2, r4
 8006dba:	462b      	mov	r3, r5
 8006dbc:	f7f9 fa6c 	bl	8000298 <__aeabi_dsub>
 8006dc0:	4602      	mov	r2, r0
 8006dc2:	460b      	mov	r3, r1
 8006dc4:	2000      	movs	r0, #0
 8006dc6:	495a      	ldr	r1, [pc, #360]	@ (8006f30 <__ieee754_exp+0x2e8>)
 8006dc8:	f7f9 fa66 	bl	8000298 <__aeabi_dsub>
 8006dcc:	e754      	b.n	8006c78 <__ieee754_exp+0x30>
 8006dce:	4b59      	ldr	r3, [pc, #356]	@ (8006f34 <__ieee754_exp+0x2ec>)
 8006dd0:	4620      	mov	r0, r4
 8006dd2:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8006dd6:	4629      	mov	r1, r5
 8006dd8:	a347      	add	r3, pc, #284	@ (adr r3, 8006ef8 <__ieee754_exp+0x2b0>)
 8006dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dde:	f7f9 fc13 	bl	8000608 <__aeabi_dmul>
 8006de2:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006de6:	f7f9 fa59 	bl	800029c <__adddf3>
 8006dea:	f7f9 febd 	bl	8000b68 <__aeabi_d2iz>
 8006dee:	4682      	mov	sl, r0
 8006df0:	f7f9 fba0 	bl	8000534 <__aeabi_i2d>
 8006df4:	a342      	add	r3, pc, #264	@ (adr r3, 8006f00 <__ieee754_exp+0x2b8>)
 8006df6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dfa:	4606      	mov	r6, r0
 8006dfc:	460f      	mov	r7, r1
 8006dfe:	f7f9 fc03 	bl	8000608 <__aeabi_dmul>
 8006e02:	4602      	mov	r2, r0
 8006e04:	460b      	mov	r3, r1
 8006e06:	4620      	mov	r0, r4
 8006e08:	4629      	mov	r1, r5
 8006e0a:	f7f9 fa45 	bl	8000298 <__aeabi_dsub>
 8006e0e:	a33e      	add	r3, pc, #248	@ (adr r3, 8006f08 <__ieee754_exp+0x2c0>)
 8006e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e14:	4680      	mov	r8, r0
 8006e16:	4689      	mov	r9, r1
 8006e18:	4630      	mov	r0, r6
 8006e1a:	4639      	mov	r1, r7
 8006e1c:	f7f9 fbf4 	bl	8000608 <__aeabi_dmul>
 8006e20:	e9cd 0100 	strd	r0, r1, [sp]
 8006e24:	e76f      	b.n	8006d06 <__ieee754_exp+0xbe>
 8006e26:	4b44      	ldr	r3, [pc, #272]	@ (8006f38 <__ieee754_exp+0x2f0>)
 8006e28:	429a      	cmp	r2, r3
 8006e2a:	d810      	bhi.n	8006e4e <__ieee754_exp+0x206>
 8006e2c:	a338      	add	r3, pc, #224	@ (adr r3, 8006f10 <__ieee754_exp+0x2c8>)
 8006e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e32:	4620      	mov	r0, r4
 8006e34:	4629      	mov	r1, r5
 8006e36:	f7f9 fa31 	bl	800029c <__adddf3>
 8006e3a:	4b3d      	ldr	r3, [pc, #244]	@ (8006f30 <__ieee754_exp+0x2e8>)
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	f7f9 fe73 	bl	8000b28 <__aeabi_dcmpgt>
 8006e42:	b138      	cbz	r0, 8006e54 <__ieee754_exp+0x20c>
 8006e44:	4b3a      	ldr	r3, [pc, #232]	@ (8006f30 <__ieee754_exp+0x2e8>)
 8006e46:	2200      	movs	r2, #0
 8006e48:	4620      	mov	r0, r4
 8006e4a:	4629      	mov	r1, r5
 8006e4c:	e712      	b.n	8006c74 <__ieee754_exp+0x2c>
 8006e4e:	f04f 0a00 	mov.w	sl, #0
 8006e52:	e760      	b.n	8006d16 <__ieee754_exp+0xce>
 8006e54:	4682      	mov	sl, r0
 8006e56:	e75e      	b.n	8006d16 <__ieee754_exp+0xce>
 8006e58:	4632      	mov	r2, r6
 8006e5a:	463b      	mov	r3, r7
 8006e5c:	2000      	movs	r0, #0
 8006e5e:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8006e62:	f7f9 fa19 	bl	8000298 <__aeabi_dsub>
 8006e66:	4602      	mov	r2, r0
 8006e68:	460b      	mov	r3, r1
 8006e6a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006e6e:	f7f9 fcf5 	bl	800085c <__aeabi_ddiv>
 8006e72:	4602      	mov	r2, r0
 8006e74:	460b      	mov	r3, r1
 8006e76:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006e7a:	f7f9 fa0d 	bl	8000298 <__aeabi_dsub>
 8006e7e:	4642      	mov	r2, r8
 8006e80:	464b      	mov	r3, r9
 8006e82:	f7f9 fa09 	bl	8000298 <__aeabi_dsub>
 8006e86:	4602      	mov	r2, r0
 8006e88:	460b      	mov	r3, r1
 8006e8a:	2000      	movs	r0, #0
 8006e8c:	4928      	ldr	r1, [pc, #160]	@ (8006f30 <__ieee754_exp+0x2e8>)
 8006e8e:	f7f9 fa03 	bl	8000298 <__aeabi_dsub>
 8006e92:	f46f 727f 	mvn.w	r2, #1020	@ 0x3fc
 8006e96:	4592      	cmp	sl, r2
 8006e98:	db02      	blt.n	8006ea0 <__ieee754_exp+0x258>
 8006e9a:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8006e9e:	e6eb      	b.n	8006c78 <__ieee754_exp+0x30>
 8006ea0:	f50a 7a7a 	add.w	sl, sl, #1000	@ 0x3e8
 8006ea4:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	f04f 73b8 	mov.w	r3, #24117248	@ 0x1700000
 8006eae:	f7f9 fbab 	bl	8000608 <__aeabi_dmul>
 8006eb2:	e6e1      	b.n	8006c78 <__ieee754_exp+0x30>
 8006eb4:	2400      	movs	r4, #0
 8006eb6:	2500      	movs	r5, #0
 8006eb8:	e6e4      	b.n	8006c84 <__ieee754_exp+0x3c>
 8006eba:	bf00      	nop
 8006ebc:	f3af 8000 	nop.w
 8006ec0:	fefa39ef 	.word	0xfefa39ef
 8006ec4:	40862e42 	.word	0x40862e42
 8006ec8:	d52d3051 	.word	0xd52d3051
 8006ecc:	c0874910 	.word	0xc0874910
 8006ed0:	72bea4d0 	.word	0x72bea4d0
 8006ed4:	3e663769 	.word	0x3e663769
 8006ed8:	c5d26bf1 	.word	0xc5d26bf1
 8006edc:	3ebbbd41 	.word	0x3ebbbd41
 8006ee0:	af25de2c 	.word	0xaf25de2c
 8006ee4:	3f11566a 	.word	0x3f11566a
 8006ee8:	16bebd93 	.word	0x16bebd93
 8006eec:	3f66c16c 	.word	0x3f66c16c
 8006ef0:	5555553e 	.word	0x5555553e
 8006ef4:	3fc55555 	.word	0x3fc55555
 8006ef8:	652b82fe 	.word	0x652b82fe
 8006efc:	3ff71547 	.word	0x3ff71547
 8006f00:	fee00000 	.word	0xfee00000
 8006f04:	3fe62e42 	.word	0x3fe62e42
 8006f08:	35793c76 	.word	0x35793c76
 8006f0c:	3dea39ef 	.word	0x3dea39ef
 8006f10:	8800759c 	.word	0x8800759c
 8006f14:	7e37e43c 	.word	0x7e37e43c
 8006f18:	40862e41 	.word	0x40862e41
 8006f1c:	7fefffff 	.word	0x7fefffff
 8006f20:	3fd62e42 	.word	0x3fd62e42
 8006f24:	3ff0a2b1 	.word	0x3ff0a2b1
 8006f28:	08035020 	.word	0x08035020
 8006f2c:	08035010 	.word	0x08035010
 8006f30:	3ff00000 	.word	0x3ff00000
 8006f34:	08035030 	.word	0x08035030
 8006f38:	3defffff 	.word	0x3defffff

08006f3c <__ieee754_expf>:
 8006f3c:	ee10 2a10 	vmov	r2, s0
 8006f40:	f022 4300 	bic.w	r3, r2, #2147483648	@ 0x80000000
 8006f44:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8006f48:	d902      	bls.n	8006f50 <__ieee754_expf+0x14>
 8006f4a:	ee30 0a00 	vadd.f32	s0, s0, s0
 8006f4e:	4770      	bx	lr
 8006f50:	ea4f 71d2 	mov.w	r1, r2, lsr #31
 8006f54:	d106      	bne.n	8006f64 <__ieee754_expf+0x28>
 8006f56:	eddf 7a4e 	vldr	s15, [pc, #312]	@ 8007090 <__ieee754_expf+0x154>
 8006f5a:	2900      	cmp	r1, #0
 8006f5c:	bf18      	it	ne
 8006f5e:	eeb0 0a67 	vmovne.f32	s0, s15
 8006f62:	4770      	bx	lr
 8006f64:	484b      	ldr	r0, [pc, #300]	@ (8007094 <__ieee754_expf+0x158>)
 8006f66:	4282      	cmp	r2, r0
 8006f68:	dd02      	ble.n	8006f70 <__ieee754_expf+0x34>
 8006f6a:	2000      	movs	r0, #0
 8006f6c:	f7ff be60 	b.w	8006c30 <__math_oflowf>
 8006f70:	2a00      	cmp	r2, #0
 8006f72:	da05      	bge.n	8006f80 <__ieee754_expf+0x44>
 8006f74:	4a48      	ldr	r2, [pc, #288]	@ (8007098 <__ieee754_expf+0x15c>)
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d902      	bls.n	8006f80 <__ieee754_expf+0x44>
 8006f7a:	2000      	movs	r0, #0
 8006f7c:	f7ff be52 	b.w	8006c24 <__math_uflowf>
 8006f80:	4a46      	ldr	r2, [pc, #280]	@ (800709c <__ieee754_expf+0x160>)
 8006f82:	4293      	cmp	r3, r2
 8006f84:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8006f88:	d952      	bls.n	8007030 <__ieee754_expf+0xf4>
 8006f8a:	4a45      	ldr	r2, [pc, #276]	@ (80070a0 <__ieee754_expf+0x164>)
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	ea4f 0281 	mov.w	r2, r1, lsl #2
 8006f92:	d834      	bhi.n	8006ffe <__ieee754_expf+0xc2>
 8006f94:	4b43      	ldr	r3, [pc, #268]	@ (80070a4 <__ieee754_expf+0x168>)
 8006f96:	4413      	add	r3, r2
 8006f98:	ed93 7a00 	vldr	s14, [r3]
 8006f9c:	4b42      	ldr	r3, [pc, #264]	@ (80070a8 <__ieee754_expf+0x16c>)
 8006f9e:	4413      	add	r3, r2
 8006fa0:	ee30 7a47 	vsub.f32	s14, s0, s14
 8006fa4:	f081 0201 	eor.w	r2, r1, #1
 8006fa8:	edd3 7a00 	vldr	s15, [r3]
 8006fac:	1a52      	subs	r2, r2, r1
 8006fae:	ee37 0a67 	vsub.f32	s0, s14, s15
 8006fb2:	ee20 6a00 	vmul.f32	s12, s0, s0
 8006fb6:	ed9f 5a3d 	vldr	s10, [pc, #244]	@ 80070ac <__ieee754_expf+0x170>
 8006fba:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80070b0 <__ieee754_expf+0x174>
 8006fbe:	eee6 6a05 	vfma.f32	s13, s12, s10
 8006fc2:	ed9f 5a3c 	vldr	s10, [pc, #240]	@ 80070b4 <__ieee754_expf+0x178>
 8006fc6:	eea6 5a86 	vfma.f32	s10, s13, s12
 8006fca:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 80070b8 <__ieee754_expf+0x17c>
 8006fce:	eee5 6a06 	vfma.f32	s13, s10, s12
 8006fd2:	ed9f 5a3a 	vldr	s10, [pc, #232]	@ 80070bc <__ieee754_expf+0x180>
 8006fd6:	eea6 5a86 	vfma.f32	s10, s13, s12
 8006fda:	eef0 6a40 	vmov.f32	s13, s0
 8006fde:	eee5 6a46 	vfms.f32	s13, s10, s12
 8006fe2:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8006fe6:	ee20 5a26 	vmul.f32	s10, s0, s13
 8006fea:	bb92      	cbnz	r2, 8007052 <__ieee754_expf+0x116>
 8006fec:	ee76 6ac6 	vsub.f32	s13, s13, s12
 8006ff0:	eec5 7a26 	vdiv.f32	s15, s10, s13
 8006ff4:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8006ff8:	ee35 0ac0 	vsub.f32	s0, s11, s0
 8006ffc:	4770      	bx	lr
 8006ffe:	4b30      	ldr	r3, [pc, #192]	@ (80070c0 <__ieee754_expf+0x184>)
 8007000:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 80070c4 <__ieee754_expf+0x188>
 8007004:	eddf 6a30 	vldr	s13, [pc, #192]	@ 80070c8 <__ieee754_expf+0x18c>
 8007008:	4413      	add	r3, r2
 800700a:	edd3 7a00 	vldr	s15, [r3]
 800700e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8007012:	eeb0 7a40 	vmov.f32	s14, s0
 8007016:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800701a:	ee17 2a90 	vmov	r2, s15
 800701e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007022:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8007026:	eddf 6a29 	vldr	s13, [pc, #164]	@ 80070cc <__ieee754_expf+0x190>
 800702a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800702e:	e7be      	b.n	8006fae <__ieee754_expf+0x72>
 8007030:	f1b3 5f50 	cmp.w	r3, #872415232	@ 0x34000000
 8007034:	d20b      	bcs.n	800704e <__ieee754_expf+0x112>
 8007036:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80070d0 <__ieee754_expf+0x194>
 800703a:	ee70 6a26 	vadd.f32	s13, s0, s13
 800703e:	eef4 6ae5 	vcmpe.f32	s13, s11
 8007042:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007046:	dd02      	ble.n	800704e <__ieee754_expf+0x112>
 8007048:	ee30 0a25 	vadd.f32	s0, s0, s11
 800704c:	4770      	bx	lr
 800704e:	2200      	movs	r2, #0
 8007050:	e7af      	b.n	8006fb2 <__ieee754_expf+0x76>
 8007052:	ee36 6a66 	vsub.f32	s12, s12, s13
 8007056:	f112 0f7d 	cmn.w	r2, #125	@ 0x7d
 800705a:	eec5 6a06 	vdiv.f32	s13, s10, s12
 800705e:	bfb8      	it	lt
 8007060:	3264      	addlt	r2, #100	@ 0x64
 8007062:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007066:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800706a:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800706e:	ee17 3a90 	vmov	r3, s15
 8007072:	bfab      	itete	ge
 8007074:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 8007078:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 800707c:	ee00 3a10 	vmovge	s0, r3
 8007080:	eddf 7a14 	vldrlt	s15, [pc, #80]	@ 80070d4 <__ieee754_expf+0x198>
 8007084:	bfbc      	itt	lt
 8007086:	ee00 3a10 	vmovlt	s0, r3
 800708a:	ee20 0a27 	vmullt.f32	s0, s0, s15
 800708e:	4770      	bx	lr
 8007090:	00000000 	.word	0x00000000
 8007094:	42b17217 	.word	0x42b17217
 8007098:	42cff1b5 	.word	0x42cff1b5
 800709c:	3eb17218 	.word	0x3eb17218
 80070a0:	3f851591 	.word	0x3f851591
 80070a4:	08035048 	.word	0x08035048
 80070a8:	08035040 	.word	0x08035040
 80070ac:	3331bb4c 	.word	0x3331bb4c
 80070b0:	b5ddea0e 	.word	0xb5ddea0e
 80070b4:	388ab355 	.word	0x388ab355
 80070b8:	bb360b61 	.word	0xbb360b61
 80070bc:	3e2aaaab 	.word	0x3e2aaaab
 80070c0:	08035050 	.word	0x08035050
 80070c4:	3fb8aa3b 	.word	0x3fb8aa3b
 80070c8:	3f317180 	.word	0x3f317180
 80070cc:	3717f7d1 	.word	0x3717f7d1
 80070d0:	7149f2ca 	.word	0x7149f2ca
 80070d4:	0d800000 	.word	0x0d800000

080070d8 <fabsf>:
 80070d8:	ee10 3a10 	vmov	r3, s0
 80070dc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80070e0:	ee00 3a10 	vmov	s0, r3
 80070e4:	4770      	bx	lr

080070e6 <with_errno>:
 80070e6:	b510      	push	{r4, lr}
 80070e8:	ed2d 8b02 	vpush	{d8}
 80070ec:	eeb0 8a40 	vmov.f32	s16, s0
 80070f0:	eef0 8a60 	vmov.f32	s17, s1
 80070f4:	4604      	mov	r4, r0
 80070f6:	f7fd fabb 	bl	8004670 <__errno>
 80070fa:	eeb0 0a48 	vmov.f32	s0, s16
 80070fe:	eef0 0a68 	vmov.f32	s1, s17
 8007102:	ecbd 8b02 	vpop	{d8}
 8007106:	6004      	str	r4, [r0, #0]
 8007108:	bd10      	pop	{r4, pc}

0800710a <xflow>:
 800710a:	4603      	mov	r3, r0
 800710c:	b507      	push	{r0, r1, r2, lr}
 800710e:	ec51 0b10 	vmov	r0, r1, d0
 8007112:	b183      	cbz	r3, 8007136 <xflow+0x2c>
 8007114:	4602      	mov	r2, r0
 8007116:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800711a:	e9cd 2300 	strd	r2, r3, [sp]
 800711e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007122:	f7f9 fa71 	bl	8000608 <__aeabi_dmul>
 8007126:	ec41 0b10 	vmov	d0, r0, r1
 800712a:	2022      	movs	r0, #34	@ 0x22
 800712c:	b003      	add	sp, #12
 800712e:	f85d eb04 	ldr.w	lr, [sp], #4
 8007132:	f7ff bfd8 	b.w	80070e6 <with_errno>
 8007136:	4602      	mov	r2, r0
 8007138:	460b      	mov	r3, r1
 800713a:	e7ee      	b.n	800711a <xflow+0x10>
 800713c:	0000      	movs	r0, r0
	...

08007140 <__math_uflow>:
 8007140:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8007148 <__math_uflow+0x8>
 8007144:	f7ff bfe1 	b.w	800710a <xflow>
 8007148:	00000000 	.word	0x00000000
 800714c:	10000000 	.word	0x10000000

08007150 <__math_oflow>:
 8007150:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8007158 <__math_oflow+0x8>
 8007154:	f7ff bfd9 	b.w	800710a <xflow>
 8007158:	00000000 	.word	0x00000000
 800715c:	70000000 	.word	0x70000000

08007160 <_getpid>:
 8007160:	4b02      	ldr	r3, [pc, #8]	@ (800716c <_getpid+0xc>)
 8007162:	2258      	movs	r2, #88	@ 0x58
 8007164:	601a      	str	r2, [r3, #0]
 8007166:	f04f 30ff 	mov.w	r0, #4294967295
 800716a:	4770      	bx	lr
 800716c:	20001ba8 	.word	0x20001ba8

08007170 <_kill>:
 8007170:	4b02      	ldr	r3, [pc, #8]	@ (800717c <_kill+0xc>)
 8007172:	2258      	movs	r2, #88	@ 0x58
 8007174:	601a      	str	r2, [r3, #0]
 8007176:	f04f 30ff 	mov.w	r0, #4294967295
 800717a:	4770      	bx	lr
 800717c:	20001ba8 	.word	0x20001ba8

08007180 <_exit>:
 8007180:	e7fe      	b.n	8007180 <_exit>
	...

08007184 <_init>:
 8007184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007186:	bf00      	nop
 8007188:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800718a:	bc08      	pop	{r3}
 800718c:	469e      	mov	lr, r3
 800718e:	4770      	bx	lr

08007190 <_fini>:
 8007190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007192:	bf00      	nop
 8007194:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007196:	bc08      	pop	{r3}
 8007198:	469e      	mov	lr, r3
 800719a:	4770      	bx	lr
